{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n\n  // TODO: This takes too many requests, remove for now\n\n  /*const [isPlaying, setIsPlaying] = useState(false);\n  // Note the spotify web player SDK is in beta so performance is janky\n  \n  useEffect(() => {\n  \tconst interval = setInterval( async () => {\n  \tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n  \t\tif (response) {\n  \t\tif (response.is_playing) {\n  \t\t\tsetIsPlaying(true);\n  \t\t}\n  \t\t} else if (!response) {\n  \t\tsetIsPlaying(false);\n  \t\t}\n  \t})\n  \t.catch(() => {\n  \t\tgetAccessToken()\n  \t});\n  \t}, 7000);\n  \treturn () => clearInterval(interval);\n  }, [isPlaying]);*/\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n  const [profile, setProfile] = useState();\n  useEffect;\n  spotifyApi.getMe().then(response => {\n    setProfile(response);\n  }, []);\n  console.log(profile);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/RecentTracks\",\n          children: /*#__PURE__*/_jsxDEV(RecentTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/logout\",\n          children: /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/TopTracks\",\n          children: /*#__PURE__*/_jsxDEV(TopTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Moods\",\n          children: /*#__PURE__*/_jsxDEV(Moods, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Welcome to Spoti-FYI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n} // ****** NESTED ROUTING\n\n_s(Dashboard, \"xmVPOM/5AyKtnrQRAITPZeTDUbU=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Switch","LogoutButton","Navbar","TopTracks","Moods","RecentTracks","SpotifyPlayer","spotifyApi","token","getAccessToken","Dashboard","profile","setProfile","getMe","then","response","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,0BAAlD;;AAIA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AACpC;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,EAAtC;AAGAC,EAAAA,SAAS;AACTU,EAAAA,UAAU,CAACM,KAAX,GACCC,IADD,CACOC,QAAD,IAAc;AACnBH,IAAAA,UAAU,CAACG,QAAD,CAAV;AACA,GAHD,EAGG,EAHH;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,sBACC,QAAC,aAAD;AAAA,2BACA;AAAA,8BACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADD,eAGC,QAAC,MAAD;AAAA,gCACA,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAAA,iCACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADA,eAIA,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAA,iCACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAJA,eAOA,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,YAAZ;AAAA,iCACC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAPA,eAUA,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAA,iCACC,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAVA,eAaA,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAA,iCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAbA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADD;AAuCA,C,CACD;;GA3EwBD,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nexport default function Dashboard() {\n// TODO: This takes too many requests, remove for now\n/*const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 7000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);*/\n\n//return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\n\tconst [profile, setProfile] = useState()\n\n\n\tuseEffect\n\tspotifyApi.getMe()\n\t.then((response) => {\n\t\tsetProfile(response)\n\t}, [])\n\n\tconsole.log(profile)\n\treturn (\n\t\t<BrowserRouter>\n\t\t<div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n\t\t\t<Navbar />\n\n\t\t\t<Switch>\n\t\t\t<Route path=\"/RecentTracks\">\n\t\t\t\t<RecentTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/logout\">\n\t\t\t\t<LogoutButton />\n\t\t\t</Route>\n\t\t\t<Route path=\"/TopTracks\">\n\t\t\t\t<TopTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/Moods\">\n\t\t\t\t<Moods />\n\t\t\t</Route>\n\t\t\t<Route path=\"/\">\n\t\t\t\t<h1>Welcome to Spoti-FYI</h1>\n\t\t\t</Route>\n\t\t\t</Switch>\n\t\t\t{/*isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)*/}\n\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}