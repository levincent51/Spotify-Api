{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi } from \"../components/spotifyAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  token\n}) {\n  _s();\n\n  const [isPlaying, setIsPlaying] = useState(false); // Note the spotify web player SDK is in beta so performance is janky\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          }\n        } else if (!response) {\n          setIsPlaying(false);\n        }\n      });\n    }, 150);\n    return () => clearInterval(interval);\n  }, [isPlaying]); //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/RecentTracks\",\n          children: /*#__PURE__*/_jsxDEV(RecentTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/logout\",\n          children: /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/TopTracks\",\n          children: /*#__PURE__*/_jsxDEV(TopTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"WELCOME TO SPOTIFY API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Currently Playing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n          token: token,\n          syncExternalDevice: false,\n          syncExternalDeviceInterval: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Currently Not Playing Anything \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n} // ****** NESTED ROUTING\n\n_s(Dashboard, \"BwVY8ih+eQv3Bg1ifNx664wzb54=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","Component","useState","useEffect","BrowserRouter","Route","Switch","Link","LogoutButton","Navbar","TopTracks","RecentTracks","SpotifyPlayer","spotifyApi","Dashboard","token","isPlaying","setIsPlaying","interval","setInterval","getMyCurrentPlaybackState","then","response","is_playing","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,IAAvC,QAAmD,kBAAnD;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA8B;AAAA;;AAC3C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C,CAD2C,CAE3C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,QAAQ,GAAGC,WAAW,CAAE,YAAY;AACxCN,MAAAA,UAAU,CAACO,yBAAX,GAAuCC,IAAvC,CAA6CC,QAAD,IAAc;AACxD,YAAIA,QAAJ,EAAc;AACZ,cAAIA,QAAQ,CAACC,UAAb,EAAyB;AACvBN,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,SAJD,MAIO,IAAI,CAACK,QAAL,EAAe;AACpBL,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OARD;AASD,KAV2B,EAUzB,GAVyB,CAA5B;AAWA,WAAO,MAAMO,aAAa,CAACN,QAAD,CAA1B;AACD,GAbQ,EAaN,CAACF,SAAD,CAbM,CAAT,CAH2C,CAkB3C;AACA;;AACA,sBACE,QAAC,aAAD;AAAA,2BACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAAA,iCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAA,iCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,YAAZ;AAAA,iCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAiBGA,SAAS,gBACR;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AACE,UAAA,KAAK,EAAED,KADT;AAEE,UAAA,kBAAkB,EAAE,KAFtB;AAGE,UAAA,0BAA0B,EAAE;AAH9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,gBAUR;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,C,CACD;;GAzDwBD,S;;KAAAA,S","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi } from \"../components/spotifyAPI\";\n\nexport default function Dashboard({ token }) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  // Note the spotify web player SDK is in beta so performance is janky\n  useEffect(() => {\n    const interval = setInterval( async () => {\n      spotifyApi.getMyCurrentPlaybackState().then((response) => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          }\n        } else if (!response) {\n          setIsPlaying(false);\n        }\n      });\n    }, 150);\n    return () => clearInterval(interval);\n  }, [isPlaying]);\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/\">\n            <h1>WELCOME TO SPOTIFY API</h1>\n          </Route>\n        </Switch>\n        {isPlaying ? (\n          <div className=\"player\">\n            <b>Currently Playing</b>\n            <SpotifyPlayer\n              token={token}\n              syncExternalDevice={false}\n              syncExternalDeviceInterval={1}\n            />\n          </div>\n        ) : (\n          <div className=\"player\">\n            <b>Currently Not Playing Anything </b>\n          </div>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}