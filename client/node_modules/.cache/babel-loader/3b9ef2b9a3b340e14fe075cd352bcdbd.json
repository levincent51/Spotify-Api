{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport { response } from \"express\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n      /*if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n      } */\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n      /*if (response.next) {\n          newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n      } */\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nspotifyApi.getPlaylist(token, '6mSPlgg3X9RguFcpnZZDIw').then(response => console.log(response.name));\n/*\nconsole.log(spotifyApi.getMySavedTracks({\n    limit:50,\n}))*/\n\nconst Reccommendations = () => {\n  _s();\n\n  const [mood, setMood] = useState('sad');\n  const [playlists, setPlaylists] = useState([]);\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {\n    getplaylists([], 2, 0).then(response => {\n      setPlaylists(response.map(x => x.id));\n    });\n  }, []);\n  console.log(playlists);\n  useEffect(() => {\n    var all_songs = [];\n    playlists.forEach(res => {\n      getTrackfromPlaylist(res, [], 3, 0).then(response => {});\n    });\n  }, [playlists]); //console.log(playlists.map( x => x.id))\n  // neeed recursion of this logic\n  // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"628/RWgNrCT7oCvbyJLk/xbolII=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["response","React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","items","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getPlaylist","console","log","name","Reccommendations","mood","setMood","setPlaylists","allSongs","setAllSongs","map","x","id","all_songs","forEach","res"],"mappings":"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","sourcesContent":["import { response } from \"express\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            /*if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } */\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            /*if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } */\n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\n\nspotifyApi.getPlaylist(token, '6mSPlgg3X9RguFcpnZZDIw').then((response) => console.log(response.name))\n/*\nconsole.log(spotifyApi.getMySavedTracks({\n    limit:50,\n}))*/\n\n\n\nconst Reccommendations = () => {\n\n    const [mood, setMood] = useState('sad')\n\n    const [playlists, setPlaylists] = useState([]);\n    const [allSongs, setAllSongs] = useState()\n\n\n    useEffect(() => {\n        getplaylists([],2,0).then(\n            (response) => {\n                setPlaylists(response.map(x => x.id))\n            }\n        )  \n\n    }, []);\n\n    console.log(playlists)\n\n    useEffect(() => {\n        var all_songs = []\n        playlists.forEach((res) => {\n            getTrackfromPlaylist(res,[],3,0).then( (response) => {\n\n            })\n        })\n    }, [playlists]);\n\n\n    //console.log(playlists.map( x => x.id))\n \n\n\n\n    // neeed recursion of this logic\n\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}