{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n\n      if (response.next) {\n        newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset);\n      }\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = res => {\n  const c = getTrackfromPlaylist(res, [], 100, 0).then(response => {\n    if (response) {\n      return response.map(x => x.track.id); //response.map(x => x.track.id) \n    }\n  });\n  return c;\n};\n\nfunction arraySplice(array) {\n  var a = array;\n  var spliced = [];\n\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, 100)];\n    }\n  }\n\n  return spliced;\n}\n\nconst Reccommendations = () => {\n  _s();\n\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState('sad');\n  const [songs, setSongs] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem('audio_features'));\n  var tracks = JSON.parse(window.sessionStorage.getItem('tracks')); // get every songs form every playlist and every saved \n\n  const toggleTab = (index, mood) => {\n    console.log(audioFet);\n    setMood(mood);\n    setToggleState(index);\n  };\n\n  useEffect(() => {\n    if (!tracks) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async response => {\n          console.log('Fetching all songs...');\n\n          for await (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n\n\n          setAllSongs(all_songs);\n          window.sessionStorage.setItem('tracks', JSON.stringify(all_songs));\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log('Fetching all songs...');\n      setAllSongs(tracks);\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem('audio_features', JSON.stringify(all_audio));\n        }\n\n        console.log('Fetching audio data...');\n        get(all_audio);\n      }\n    } else {\n      console.log('Fetching audio data...');\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (mood == 'sad') {\n      console.log(':(');\n      spotifyApi.getTracks; // SET TRACKS IN THIS LOGIC\n    } else if (mood == 'happy') {\n      console.log(':)');\n    } else if (mood == 'study') {\n      console.log(':/');\n    }\n  }, [mood, audioFet]); // NOW FILTER EVERYTHING IN AUDIO FEATURES\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n  // AUDIO FEATURES HOOK\n  // neeed recursion of this logic\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Gather all the songs from all your playlists and find which songs statistically follow these moods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Songs Discovered: \", audioFet ? audioFet.length : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"0\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bloc-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 1 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(1, \"sad\"),\n            children: \"Sad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 2 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(2, \"happy\"),\n            children: \"Happy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 3 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(3, \"study\"),\n            children: \"Study\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Fetching all Songs....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: \"Loading Sad songs :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: \"Loading Happy Songs :D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: \"Loading Study songs.....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Fetching Audio Data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true)\n  /* {tracks.items.map((track, key) => (\n          <TrackInfo key={key} track={track}*/\n  ;\n};\n\n_s(Reccommendations, \"1odfFNLhi7h4AxeJE6unS+u0/5I=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","next","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getAllSongs","res","c","map","x","track","id","arraySplice","array","a","spliced","length","splice","Reccommendations","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","audio_feat","JSON","parse","window","sessionStorage","getItem","toggleTab","index","console","log","all_songs","setItem","stringify","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","getTracks"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } \n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\n\nconst getAllSongs = (res) => {\n    const c = getTrackfromPlaylist(res,[],100,0).then( (response) => {\n        if (response) { \n            return response.map(x => x.track.id)\n            //response.map(x => x.track.id) \n        }\n    })\n\n    return c\n}\n\nfunction arraySplice(array) {\n    var a = array\n    var spliced = []\n    if (array) {\n        while (a.length) {\n            spliced = [...spliced, a.splice(0,100)]\n        }\n\n    }\n    return spliced\n\n}\n\n\nconst Reccommendations = () => {\n\n\n    const [audioFet, setAudioFet] = useState()\n    const [allSongs, setAllSongs] = useState()\n    const [toggleState, setToggleState] = useState(1);\n    const [mood, setMood] = useState('sad')\n    const [songs, setSongs] = useState()\n\n\n    var audio_feat = JSON.parse(window.sessionStorage.getItem('audio_features'))\n    var tracks = JSON.parse(window.sessionStorage.getItem('tracks'))\n    \n \n    // get every songs form every playlist and every saved \n\n\n    const toggleTab = (index, mood) => {\n        console.log(audioFet)\n        setMood(mood)\n        setToggleState(index);\n    };\n\n\n    useEffect(() => {\n       if (!tracks) {\n            async function fetchData() {\n                var all_songs = []\n                await getplaylists([],50,0).then(\n                    async (response) => {\n                        console.log('Fetching all songs...')\n                        \n                        for await (const index of response.map(x => x.id)) {\n                            all_songs = [...all_songs, ...await getAllSongs(index)]\n                        }\n                \n                        // instead of set state maybe import this from home\n                        setAllSongs(all_songs)\n                        window.sessionStorage.setItem('tracks', JSON.stringify(all_songs))\n                })  \n            }\n            fetchData()\n       } else {\n            console.log('Fetching all songs...')\n            setAllSongs(tracks)\n           \n       }\n    }, []);\n    //console.log(allSongs)\n\n    useEffect(() => {\n        //console.log(allSongs)\n        if (!audio_feat) {\n            if (allSongs) {\n                var all_audio = []\n\n                const allSongsSpliced = arraySplice(allSongs)\n    \n                async function get(all_audio) {\n                    for (const index of allSongsSpliced) {\n                        const c = await spotifyApi.getAudioFeaturesForTracks(index)\n                        all_audio = [...all_audio, ...c.audio_features]\n                    }\n                    setAudioFet(all_audio)\n                    window.sessionStorage.setItem('audio_features', JSON.stringify(all_audio))\n                }\n                console.log('Fetching audio data...')\n                get(all_audio)\n            }\n        } else {\n            console.log('Fetching audio data...')\n            setAudioFet(audio_feat)\n\n        }\n\n    }, [allSongs])\n\n\n    useEffect(() => {\n        if(allSongs) {\n            setSongs(1)\n        }\n    }, [allSongs])\n\n    useEffect(() => {\n    \n        if (mood == 'sad') {\n            console.log(':(')\n            spotifyApi.getTracks\n\n            // SET TRACKS IN THIS LOGIC\n        } else if (mood == 'happy') {\n            console.log(':)')\n        } else if (mood == 'study') {\n            console.log(':/')\n        }\n\n        \n\n    }, [mood, audioFet])\n\n\n    // NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n\n\n    // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n    \n    // AUDIO FEATURES HOOK\n \n    \n\n    // neeed recursion of this logic\n\n\n    return (\n        <>\n        <h1> Gather all the songs from all your playlists and find which songs statistically \n        follow these moods \n        </h1>\n        \n        <div>{songs ? (\n            <div className=\"container\">\n            <h2>Songs Discovered: {audioFet? audioFet.length : <>0</>}</h2>\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"sad\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"happy\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"study\")}\n              >\n                Study\n              </button>\n            </div>\n            </div>\n        ) : (<b>Fetching all Songs....</b>)}</div>\n\n\n        {audioFet ? (\n          <div className=\"content-tabs\">\n            <div\n              className={\n                toggleState === 1 ? \"content  active-content\" : \"content\"\n              }\n            >\n                Loading Sad songs :(\n            </div>\n            <div\n              className={\n                toggleState === 2 ? \"content  active-content\" : \"content\"\n              }\n            >\n                Loading Happy Songs :D\n            </div>\n            <div\n              className={\n                toggleState === 3 ? \"content  active-content\" : \"content\"\n              }\n            >\n                Loading Study songs.....\n            </div>\n          </div>\n        ) : (\n\n          <b>Fetching Audio Data...</b>\n        )}\n        </>\n        /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}