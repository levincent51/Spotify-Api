{"ast":null,"code":"import _regeneratorRuntime from\"/Users/macuser/Project Spotify/Spotify-Api/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/macuser/Project Spotify/Spotify-Api/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/macuser/Project Spotify/Spotify-Api/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{BrowserRouter,Route,Switch}from\"react-router-dom\";import{LogoutButton}from\"../components/functions\";import Navbar from\"../components/Navbar\";import Home from\"./Home\";import TopTracks from\"./TopTracks\";import Moods from\"./Moods\";import RecentTracks from\"./RecentTracks\";import SpotifyPlayer from\"react-spotify-web-playback\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Dashboard(){// TODO: This takes too many requests, remove for now\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isPlaying=_useState2[0],setIsPlaying=_useState2[1];// Note the spotify web player SDK is in beta so performance is janky\n// \nuseEffect(function(){var interval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:spotifyApi.getMyCurrentPlaybackState().then(function(response){if(response){if(response.is_playing){setIsPlaying(true);}}else if(!response){setIsPlaying(false);}}).catch(function(){getAccessToken();});case 1:case\"end\":return _context.stop();}}},_callee);})),7000);return function(){return clearInterval(interval);};},[isPlaying]);//return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\nreturn/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/RecentTracks\",children:/*#__PURE__*/_jsx(RecentTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/logout\",children:/*#__PURE__*/_jsx(LogoutButton,{})}),/*#__PURE__*/_jsx(Route,{path:\"/TopTracks\",children:/*#__PURE__*/_jsx(TopTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/Moods\",children:/*#__PURE__*/_jsx(Moods,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",children:/*#__PURE__*/_jsx(Home,{})})]}),isPlaying?/*#__PURE__*/_jsxs(\"div\",{className:\"player\",children:[/*#__PURE__*/_jsx(\"b\",{children:\"Currently Playing\"}),/*#__PURE__*/_jsx(SpotifyPlayer,{token:token,syncExternalDevice:true,syncExternalDeviceInterval:5})]}):/*#__PURE__*/_jsx(\"div\",{className:\"player\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Currently Not Playing Anything \"})})]})});}// ****** NESTED ROUTING","map":{"version":3,"sources":["/Users/macuser/Project Spotify/Spotify-Api/client/src/Pages/Dashboard.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Switch","LogoutButton","Navbar","Home","TopTracks","Moods","RecentTracks","SpotifyPlayer","spotifyApi","token","getAccessToken","Dashboard","isPlaying","setIsPlaying","interval","setInterval","getMyCurrentPlaybackState","then","response","is_playing","catch","clearInterval"],"mappings":"yYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,aAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,KAA6C,kBAA7C,CACA,OAASC,YAAT,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,KAAkD,0BAAlD,C,wFAEA,cAAe,SAASC,CAAAA,SAAT,EAAqB,CAClC;AACA,cAAkCf,QAAQ,CAAC,KAAD,CAA1C,wCAAOgB,SAAP,eAAkBC,YAAlB,eACF;AAEA;AACEhB,SAAS,CAAC,UAAM,CACd,GAAMiB,CAAAA,QAAQ,CAAGC,WAAW,sEAAE,mIAC9BP,UAAU,CAACQ,yBAAX,GAAuCC,IAAvC,CAA4C,SAACC,QAAD,CAAc,CACxD,GAAIA,QAAJ,CAAc,CACd,GAAIA,QAAQ,CAACC,UAAb,CAAyB,CACvBN,YAAY,CAAC,IAAD,CAAZ,CACD,CACA,CAJD,IAIO,IAAI,CAACK,QAAL,CAAe,CACtBL,YAAY,CAAC,KAAD,CAAZ,CACC,CACF,CARD,EASCO,KATD,CASO,UAAM,CACXV,cAAc,GACf,CAXD,EAD8B,sDAAF,GAazB,IAbyB,CAA5B,CAcA,MAAO,kBAAMW,CAAAA,aAAa,CAACP,QAAD,CAAnB,EAAP,CACD,CAhBQ,CAgBN,CAACF,SAAD,CAhBM,CAAT,CAkBA;AACA;AAEA,mBACE,KAAC,aAAD,wBACE,oCACE,KAAC,MAAD,IADF,cAGE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,eAAZ,uBACE,KAAC,YAAD,IADF,EADF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,uBACE,KAAC,YAAD,IADF,EAJF,cAOE,KAAC,KAAD,EAAO,IAAI,CAAC,YAAZ,uBACE,KAAC,SAAD,IADF,EAPF,cAUE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,uBACE,KAAC,KAAD,IADF,EAVF,cAaE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,uBACE,KAAC,IAAD,IADF,EAbF,GAHF,CAoBGA,SAAS,cACf,aAAK,SAAS,CAAC,QAAf,wBACC,wCADD,cAEC,KAAC,aAAD,EACA,KAAK,CAAEH,KADP,CAEA,kBAAkB,CAAE,IAFpB,CAGA,0BAA0B,CAAE,CAH5B,EAFD,GADe,cAUf,YAAK,SAAS,CAAC,QAAf,uBACC,sDADD,EA9BG,GADF,EADF,CAuCD,CACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport Home from \"./Home\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nexport default function Dashboard() {\n  // TODO: This takes too many requests, remove for now\n  const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\n// \n  useEffect(() => {\n    const interval = setInterval( async () => {\n    spotifyApi.getMyCurrentPlaybackState().then((response) => {\n      if (response) {\n      if (response.is_playing) {\n        setIsPlaying(true);\n      }\n      } else if (!response) {\n      setIsPlaying(false);\n      }\n    })\n    .catch(() => {\n      getAccessToken()\n    });\n    }, 7000);\n    return () => clearInterval(interval);\n  }, [isPlaying]);\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/Moods\">\n            <Moods />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        {isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}