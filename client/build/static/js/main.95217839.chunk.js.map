{"version":3,"sources":["Pages/Login.js","components/functions.js","components/Navbar.js","components/spotifyAPI.js","Pages/Home.js","components/TrackInfo.js","Pages/TopTracks.js","components/UserSongs.js","Pages/Moods.js","Pages/RecentTracks.js","Pages/Dashboard.js","App.js","index.js"],"names":["Login","className","href","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","LogoutButton","window","localStorage","clear","sessionStorage","location","replace","useState","loggedOut","setLoggedOut","Redirect","to","push","Button","onClick","removeItem","Navbar","style","background","activeStyle","fontWeight","color","float","spotifyApi","SpotifyWebApi","refreshAccessToken","a","refresh_token","getItem","axios","get","SERVER","params","then","res","access_token","data","console","log","setItem","Date","now","reload","catch","e","getAccessToken","hashParams","r","q","hash","substring","exec","decodeURIComponent","getHashParams","error","tokenExpiry","token","setAccessToken","Home","profile","setProfile","useEffect","getMe","response","display_name","split","src","images","url","TrackInfo","track","index","uri","album","alt","artists","map","name","join","TopTracks","toggleState","setToggleState","tracks","setTracks","timeRange","setTimeRange","toggleTab","time_range","newTimeRange","getMyTopTracks","limit","items","key","indexOf","getplaylists","playlists","offset","newOffset","getUserPlaylists","newPlaylist","next","getTrackfromPlaylist","playlistId","getPlaylistTracks","newTrack","arraySplice","array","size","spliced","length","splice","Moods","audioFet","setAudioFet","allSongs","setAllSongs","mood","songs","setSongs","audio_feat","JSON","parse","trackstorage","getTracksfromList","arraysplice","Tracks","i","getTracks","x","id","c","all_songs","unique","Set","stringify","fetchData","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","audioWithFeat","filter","value","setValue","value1","setValue1","value2","setValue2","vocal","setVocal","filterReq","useCallback","valence","energy","danceability","filter2","instrumentalness","FilteredSplice","Typography","Slider","onChange","event","newValue","step","marks","min","max","valueLabelDisplay","newValue1","newValue2","Switch","label","RecentTracks","RecentlyPlayed","setRecentlyPlayed","getMyRecentlyPlayedTracks","item","duration_ms","tabIndex","format","played_at","TableItem","Dashboard","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95217839.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Login.css\";\n\nconst SERVER_URL = \"https://react-express-spotify.herokuapp.com/login\"; // https://react-express-spotify.herokuapp.com/login http://localhost:8888/login\n\nexport default function Login() {\nreturn (\n\t<div className=\"login\">\n\n\t<p>\n\t\tAn insight into your listening habits on Spotify\n\t</p>\n\t<a href={SERVER_URL}> Login to Spotify </a>\n\t</div>\n);\n}\n","import React, { useState } from \"react\";\n\n// gets hash parameters\nexport function getHashParams() {\n\tvar hashParams = {};\n\tvar e,\n\t\tr = /([^&;=]+)=?([^&;]*)/g,\n\t\tq = window.location.hash.substring(1);\n\te = r.exec(q);\n\twhile (e) {\n\t\thashParams[e[1]] = decodeURIComponent(e[2]);\n\t\te = r.exec(q);\n\t}\n\n\treturn hashParams;\n}\n\nexport function millisToMinutesAndSeconds(millis) {\n\tvar minutes = Math.floor(millis / 60000);\n\tvar seconds = ((millis % 60000) / 1000).toFixed(0);\n\treturn minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\n\nexport const LogoutButton = () => {\n\twindow.localStorage.clear();\n\twindow.sessionStorage.clear();\n\twindow.location.replace(\"/\");\n\tconst [loggedOut, setLoggedOut] = useState(false);\n\n\tconst logout = () => {\n\t\tlocalStorage.removeItem(\"whpf_user\");\n\t\tsetLoggedOut(true);\n\t};\n\n\tif (loggedOut) {\n\t\treturn <Redirect to=\"/\" push={true} />;\n\t}\n\n\treturn <Button onClick={logout}>LogOut</Button>;\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n\treturn (\n\t\t<div className=\"navbar\">\n\t\t<li style={\n\t\t\t{\n\t\t\t\tbackground:'green',\n\t\t\t}\n\t\t}>\n\t\t\t<NavLink to=\"/\" \n\t\t\tactiveStyle={{\n\t\t\t\tfontWeight: \"bold\",\n\t\t\t\tcolor: \"white\",\n\t\t\t\tbackground:\"green\",\n\t\t\t}}>HOME</NavLink>\n\t\t</li>\n\t\t<li>\n\t\t\t<NavLink\n\t\t\tto=\"/Moods\"\n\t\t\tactiveStyle={{\n\t\t\t\tfontWeight: \"bold\",\n\t\t\t\tcolor: \"green\",\n\t\t\t}}\n\t\t\t>\n\t\t\tMoods\n\t\t\t</NavLink>\n\t\t</li>\n\t\t<li>\n\t\t\t<NavLink\n\t\t\tto=\"/TopTracks\"\n\t\t\tactiveStyle={{\n\t\t\t\tfontWeight: \"bold\",\n\t\t\t\tcolor: \"green\",\n\t\t\t}}\n\t\t\t>\n\t\t\tTop Tracks\n\t\t\t</NavLink>\n\t\t</li>\n\t\t<li>\n\t\t\t<NavLink\n\t\t\tto=\"/RecentTracks\"\n\t\t\tactiveStyle={{\n\t\t\t\tfontWeight: \"bold\",\n\t\t\t\tcolor: \"green\",\n\t\t\t}}\n\t\t\t>\n\t\t\tRecentlyPlayed\n\t\t\t</NavLink>\n\t\t</li>\n\n\t\t<li style={{ float: \"right\" }}>\n\t\n\t\t\t<NavLink to=\"/logout\">Logout</NavLink>\n\t\t</li>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import axios from \"axios\";\nimport { getHashParams, getObject, setObject } from \"./functions\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst EXPIRATION_TIME = 3600000; // 1 hour\nconst SERVER = \"https://react-express-spotify.herokuapp.com/\"; // or https://react-express-spotify.herokuapp.com/ http://localhost:8888\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n\n// USES JMPerez's spotify-web-api-js\n\nexport const spotifyApi = new SpotifyWebApi();\n\n// constantly refreshing\nexport const refreshAccessToken = async () => {\n// take refresh token from local storage\n\tconst refresh_token = window.localStorage.getItem(\"refresh_token\");\n\taxios\n\t\t.get(SERVER + \"refresh_token\", {\n\t\tparams: {\n\t\t\trefresh_token: refresh_token,\n\t\t},\n\t\t})\n\t\t.then((res) => {\n\t\tconst access_token = res.data.access_token;\n\t\tconsole.log(\"New acccess_token\", access_token);\n\t\twindow.localStorage.setItem(\"access_token\", access_token);\n\t\twindow.localStorage.setItem(\"token_timestamp\", Date.now());\n\t\twindow.location.reload();\n\t\t})\n\t\t.catch((e) => console.log(e));\n};\n\n// GET TOKEN, REFRESH IF REQUIRED\nexport const getAccessToken = () => {\n// Takes token from our url\n\n\tconst { error, access_token, refresh_token } = getHashParams();\n\n\t//  token invalid freom timeout\n\tif (error) {\n\t\tconsole.log(error);\n\t\trefreshAccessToken();\n\t}\n\n\tif (access_token && refresh_token) {\n\t\twindow.location.replace(\"/\");\n\t\twindow.localStorage.setItem(\"access_token\", access_token);\n\t\twindow.localStorage.setItem(\"refresh_token\", refresh_token);\n\t\twindow.localStorage.setItem(\"token_timestamp\", Date.now());\n\n\t\treturn access_token;\n\t}\n\t// THIS WILL AUTO REFRESH OUR TOKEN BASED ON EXPIRY TIME\n\tconst tokenExpiry = window.localStorage.getItem(\"token_timestamp\");\n\n\tif (\n\t\ttokenExpiry &&\n\t\ttokenExpiry !== \"undefined\" &&\n\t\tDate.now() - tokenExpiry > EXPIRATION_TIME\n\t) {\n\t\tconsole.log(\"Token expired, refreshing token\");\n\t\trefreshAccessToken();\n\t}\n\n\tconst local_access_token = window.localStorage.getItem(\"access_token\");\n\n\treturn local_access_token;\n};\n\n// SET OUR TOKEN with our spotify-web-api-js\nexport const token = getAccessToken();\n\nspotifyApi.setAccessToken(token);\n","import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\n\nconst Home = () => {\n    const [profile, setProfile] = useState()\n\n\n\tuseEffect(() => {\n\t\tspotifyApi.getMe()\n\t\t.then((response) => {\n\t\t\tsetProfile(response)\n\n\t\t})\n        .catch(() => {\n            getAccessToken()\n        })\n\t},[])\n\t\n\n\n\n\tconsole.log(profile)\n\n\n \n    return (\n        <div>\n        {profile ? <>\n\n        \n            <h1>Welcome to Spoti-FYI.</h1>\n\n            <h2>Hi {profile.display_name.split(' ')[0]} </h2>\n            <img src={profile.images[0].url} />\n            </>\n            : <p>Loading</p>\n\n        }\n        </div>\n    )\n}\n\nexport default Home","import React from \"react\";\n\n// our track card for displaying artist, trackname and the picture\nconst TrackInfo = ({ track, index }) => {\n\treturn (\n\t\t<a className=\"TrackInfoLink\" href={track.uri}>\n\t\t<div className=\"card\">\n\t\t\t<img src={track.album.images[1].url} alt=\"Track\" />\n\t\t\t<div className=\"containerCard\">\n\t\t\t\t\n\t\t\t<h4>\n\t\t\t<p>{index + 1}</p>\n\t\t\t\t<b>{track.artists.map((e) => e.name).join(\", \")}</b>\n\t\t\t</h4>\n\t\t\t<p>{track.name}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t</a>\n\t);\n};\n\nexport default TrackInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport TrackInfo from \"../components/TrackInfo\";\n\nconst TopTracks = () => {\n  \tconst [toggleState, setToggleState] = useState(1);\n\n\tconst [tracks, setTracks] = useState();\n\tconst [timeRange, setTimeRange] = useState(\"short_term\");\n\n  \tconst changeTerm = (newTimeRange) => {\n\t\tif (newTimeRange != timeRange) {\n\t\t\tsetTracks()\n\t\t}\n\t\tsetTimeRange(newTimeRange);\n\t};\n\tconst toggleTab = (index, time_range) => {\n\t\tchangeTerm(time_range);\n\t\tsetToggleState(index);\n\t};\n  \tuseEffect(() => {\n\t\tspotifyApi\n\t\t.getMyTopTracks({\n\t\t\tlimit: 50,\n\t\t\ttime_range: timeRange,\n\t\t})\n\t\t.then((response) => {\n\t\t\tif (response) {\n\t\t\tconsole.log(response);\n\t\t\tsetTracks({\n\t\t\t\titems: response.items,\n\t\t\t});\n\t\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tgetAccessToken();\n\t\t});\n\t}, [timeRange]);\n\n\treturn (\n\t\t<div>\n\t\t<h2>Top Tracks</h2>\n\n\t\t<div className=\"container\">\n\t\t\t<div className=\"bloc-tabs\">\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(1, \"short_term\")}\n\t\t\t>\n\t\t\t\t4 weeks\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(2, \"medium_term\")}\n\t\t\t>\n\t\t\t\t6 months\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(3, \"long_term\")}\n\t\t\t>\n\t\t\t\tAll time\n\t\t\t</button>\n\t\t\t</div>\n\t\t\t{tracks ? (\n\t\t\t<div className=\"content-tabs\">\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)} />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)} />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)}  />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<b>LOADING</b>\n\t\t\t)}\n\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TopTracks;\n","import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\nexport const getplaylists = async (playlists, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newPlaylist;\n\tawait spotifyApi\n\t.getUserPlaylists({\n\t\tlimit: limit,\n\t\toffset: offset,\n\t\t})\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tconsole.log(response)\n\t\t\tnewPlaylist = [...playlists, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewPlaylist = getplaylists(newPlaylist, limit, newOffset);\n\t\t\t}\n\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\tgetAccessToken();\n\t});\n\treturn newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newTrack;\n\tawait spotifyApi\n\t\t.getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tnewTrack = [...tracks, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewTrack = getTrackfromPlaylist(\n\t\t\t\tplaylistId,\n\t\t\t\tnewTrack,\n\t\t\t\tlimit,\n\t\t\t\tnewOffset\n\t\t\t);\n\t\t\t}\n\t\t}\n\t\t});\n\n\treturn newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\n\n\nexport const getAllSongs = (res) => {\n\tconst c = getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n\t\tif (response) {\n\t\treturn response.map((x) => x.track.id);\n\t\t//response.map(x => x.track.id)\n\t\t}\n\t});\n\n\treturn c;\n};\n\nexport function arraySplice(array, size) {\n\tvar a = array;\n\tvar spliced = [];\n\tif (array) {\n\t\twhile (a.length) {\n\t\tspliced = [...spliced, a.splice(0, size)];\n\t\t}\n\t}\n\treturn spliced;\n}\n\n\n\n\n\n ","import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {\n  arraySplice,\n  getplaylists,\n  getAllSongs,\n} from \"../components/UserSongs\";\nimport { Slider, Typography, Switch } from \"@material-ui/core\";\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n\n\n\nconst Moods = () => {\n  const [playlists, setPlaylists] = useState(\"all\");\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async (arraysplice) => {\n    var Tracks = { tracks: [] };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n    setTracks(Tracks);\n  };\n\n  // get every songs form every playlist and every saved\n\n  /*const toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};*/\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          // filter duplicates\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\t\t  const audioWithFeat = all_audio.filter(x => x); // filter out songs without features\n          setAudioFet(audioWithFeat);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n      /*\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}*/\n    }\n  }, [mood, audioFet]);\n\n\n  const [value, setValue] = useState(0.5);\n  const [value1, setValue1] = useState(0.5);\n  const [value2, setValue2] = useState(0.5);\n  const [vocal, setVocal] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue/100);\n  };\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1/100);\n  };\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2/100);\n  };\n  const handleVocal = () => {\n    setVocal(!vocal);\n  };\n\n\n\n  const filterReq = useCallback( async () => {\n\tconsole.log(\"mood\", value);\n\tconsole.log(\"energy\", value1);\n\tconsole.log(\"groove\", value2);\n\tconsole.log(\"vocal\", vocal);\n\tconst filter = audioFet.filter((x) => \n\tx.valence >= (value - 0.15) && x.valence <= (value + 0.15) &&\n\tx.energy >= (value1 - 0.15) && x.energy <= (value1 + 0.15) &&\n\tx.danceability >= (value2 - 0.15) && x.danceability <= (value2 + 0.15) \n\t)\n\tvar filter2;\n\tif (vocal) {\n\t\tfilter2 = filter.filter((x) => x.instrumentalness <= 0.4)\n\n\t\tconsole.log(filter2)\n\t} else {\n\t\tfilter2 = filter.filter((x) => x.instrumentalness >= 0.8)\n\t\tconsole.log(filter2)\n\t}\n\n\tconst FilteredSplice = arraySplice(filter2,50)\n\tconsole.log(FilteredSplice)\n\tgetTracksfromList(FilteredSplice)\n\n  })\n  console.log(tracks)\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all your songs and find the perfect songs to match your current\n        mood\n      </h1>\n      <h2>Choose source (in development)</h2>\n      <button> Get All Liked Songs</button>\n      <button> Get All Playlists</button>\n      <button> Get Only Your Playlists</button>\n      <button> Get Everything</button>\n      <div>\n        {songs ? ( <div className=\"container\">\n            <h2>\n              Total Songs Discovered: {audioFet ? audioFet.length : <>0</>}\n            </h2>\n\n            <div>\n              <Typography>Mood</Typography>\n\n              <Slider\n                value={value *100}\n                onChange={handleChange}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Energy</Typography>\n\n              <Slider\n                value={value1 *100}\n                onChange={handleChange1}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Groove</Typography>\n\n              <Slider\n                value={value2 *100}\n                onChange={handleChange2}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n\t\t\t<div>\n            <Typography>Vocals</Typography>\n            <Switch onChange={handleVocal} label=\"Vocals\" />\n\t\t\t</div>\n\n            {/*\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\n\t\t\t\t</div> \n\t\t\t\t*/}\n        </div>\n        ) : (\n          <>\n            <b>Fetching all Songs....</b>\n            <p>\n              Please do not refresh/leave the page while this is occuring.\n            </p>{\" \"}\n          </>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div className=\"content-tabs\">\n          <p>Songs Found: {tracks ? <>{tracks.tracks.length}</> : 0} </p>\n\n\t\t  <div>\n\t\t\t<button onClick={filterReq}>Find Songs!</button>\n\t\t\t</div>\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Sad songs :(</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 2 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Happy Songs :D</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 3 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Study Songs :/</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 4 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Gym Songs >:(</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <>{songs ? <b>Fetching Audio Data...</b> : null}</>\n      )}\n    </>\n  );\n};\n\nexport default Moods;\n","import React, { Component, useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport format from \"date-fns/format\";\nimport { millisToMinutesAndSeconds } from \"../components/functions\";\n\nconst TableItem = (item) => (\n  <tr key={item.played_at}>\n    <td>\n      <a href={item.track.uri} className=\"row-link\">\n        {millisToMinutesAndSeconds(item.track.duration_ms)}\n      </a>\n    </td>\n\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.name}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.artists.map((e) => e.name).join(\", \")}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {format(Date.parse(item.played_at), \"dd/MM/yyyy, hh:mma\")}\n      </a>\n    </td>\n  </tr>\n);\n\nconst RecentTracks = () => {\n  const [RecentlyPlayed, setRecentlyPlayed] = useState();\n\n  // variable limit? with useeffect to load more maybe on scroll down, limit will change\n  useEffect(() => {\n    spotifyApi\n      .getMyRecentlyPlayedTracks({\n        limit: 50,\n      })\n      .then((response) => {\n        if (response) {\n          console.log(response);\n          setRecentlyPlayed({\n            items: response.items,\n          });\n        }\n      })\n      .catch(() => {\n        getAccessToken();\n      });\n  }, []);\n  console.log(RecentlyPlayed);\n\n  return (\n    <div>\n      {RecentlyPlayed ? (\n        <div className=\"recently-played\">\n          <h2>Recently played tracks</h2>\n\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Duration</th>\n                <th>Track</th>\n                <th>Artist(s)</th>\n                <th>Played at</th>\n              </tr>\n            </thead>\n            <tbody>{RecentlyPlayed.items.map((item) => TableItem(item))}</tbody>\n          </table>\n        </div>\n      ) : (\n        <b>LOADING</b>\n      )}\n    </div>\n  );\n};\nexport default RecentTracks;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport Home from \"./Home\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nexport default function Dashboard() {\n// TODO: This takes too many requests, remove for now\n/*const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 7000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);*/\n\n//return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\n\n\t\n\treturn (\n\t\t<BrowserRouter>\n\t\t<div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n\t\t\t<Navbar />\n\n\t\t\t<Switch>\n\t\t\t<Route path=\"/RecentTracks\">\n\t\t\t\t<RecentTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/logout\">\n\t\t\t\t<LogoutButton />\n\t\t\t</Route>\n\t\t\t<Route path=\"/TopTracks\">\n\t\t\t\t<TopTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/Moods\">\n\t\t\t\t<Moods />\n\t\t\t</Route>\n\t\t\t<Route path=\"/\">\n\t\t\t\t<Home />\n\t\t\t</Route>\n\t\t\t</Switch>\n\t\t\t{/*isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)*/}\n\t\t</div>\n\t\t</BrowserRouter>\n\t\t\n\t);\n}\n// ****** NESTED ROUTING\n","import React, { Component, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Pages/Login\";\nimport Dashboard from \"./Pages/Dashboard\";\n\nimport { token } from \"./components/spotifyAPI\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">{token ? <Dashboard/> : <Login />}</div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}