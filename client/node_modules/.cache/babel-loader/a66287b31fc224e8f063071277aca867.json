{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _asyncIterator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncIterator\";import TrackInfo from\"../components/TrackInfo\";import React,{useState,useEffect}from\"react\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import fetchData from\"../components/UserSongs\";// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/ // LOGIC WORKSSS RECURSION\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getplaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(playlists,limit,offset){var newOffset,newPlaylist;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOffset=offset+limit;_context.next=3;return spotifyApi.getUserPlaylists({limit:limit,offset:offset}).then(function(response){if(response){newPlaylist=[].concat(_toConsumableArray(playlists),_toConsumableArray(response.items));if(response.next){newPlaylist=getplaylists(newPlaylist,limit,newOffset);}}}).catch(function(){getAccessToken();});case 3:return _context.abrupt(\"return\",newPlaylist);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getplaylists(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getTrackfromPlaylist=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(playlistId,tracks,limit,offset){var newOffset,newTrack;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newOffset=offset+limit;_context2.next=3;return spotifyApi.getPlaylistTracks(token,playlistId,{limit:limit,offset:offset}).then(function(response){if(response){newTrack=[].concat(_toConsumableArray(tracks),_toConsumableArray(response.items));if(response.next){newTrack=getTrackfromPlaylist(playlistId,newTrack,limit,newOffset);}}});case 3:return _context2.abrupt(\"return\",newTrack);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTrackfromPlaylist(_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();var getAllSongs=function getAllSongs(res){var c=getTrackfromPlaylist(res,[],100,0).then(function(response){if(response){return response.map(function(x){return x.track.id;});//response.map(x => x.track.id) \n}});return c;};function arraySplice(array,size){var a=array;var spliced=[];if(array){while(a.length){spliced=[].concat(_toConsumableArray(spliced),[a.splice(0,size)]);}}return spliced;}var Reccommendations=function Reccommendations(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),audioFet=_useState2[0],setAudioFet=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),allSongs=_useState4[0],setAllSongs=_useState4[1];var _useState5=useState(1),_useState6=_slicedToArray(_useState5,2),toggleState=_useState6[0],setToggleState=_useState6[1];var _useState7=useState('sad'),_useState8=_slicedToArray(_useState7,2),mood=_useState8[0],setMood=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),songs=_useState10[0],setSongs=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),tracks=_useState12[0],setTracks=_useState12[1];//var audio_feat = JSON.parse(window.sessionStorage.getItem('audio_features'))\n//var trackstorage = JSON.parse(window.sessionStorage.getItem('tracks'))\n// get every songs form every playlist and every saved \nvar toggleTab=function toggleTab(index,mood){console.log(audioFet);setTracks();setMood(mood);setToggleState(index);};useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var all_songs;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:all_songs=[];_context4.next=3;return getplaylists([],50,0).then(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response){var _iteratorAbruptCompletion,_didIteratorError,_iteratorError,_iterator,_step,index;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log('Fetching all songs...');_iteratorAbruptCompletion=false;_didIteratorError=false;_context3.prev=3;_iterator=_asyncIterator(response.map(function(x){return x.id;}));case 5:_context3.next=7;return _iterator.next();case 7:if(!(_iteratorAbruptCompletion=!(_step=_context3.sent).done)){_context3.next=20;break;}index=_step.value;_context3.t0=[];_context3.t1=_toConsumableArray(all_songs);_context3.t2=_toConsumableArray;_context3.next=14;return getAllSongs(index);case 14:_context3.t3=_context3.sent;_context3.t4=(0,_context3.t2)(_context3.t3);all_songs=_context3.t0.concat.call(_context3.t0,_context3.t1,_context3.t4);case 17:_iteratorAbruptCompletion=false;_context3.next=5;break;case 20:_context3.next=26;break;case 22:_context3.prev=22;_context3.t5=_context3[\"catch\"](3);_didIteratorError=true;_iteratorError=_context3.t5;case 26:_context3.prev=26;_context3.prev=27;if(!(_iteratorAbruptCompletion&&_iterator.return!=null)){_context3.next=31;break;}_context3.next=31;return _iterator.return();case 31:_context3.prev=31;if(!_didIteratorError){_context3.next=34;break;}throw _iteratorError;case 34:return _context3.finish(31);case 35:return _context3.finish(26);case 36:// instead of set state maybe import this from home\nsetAllSongs(all_songs);//window.sessionStorage.setItem('tracks', JSON.stringify(all_songs))\ncase 37:case\"end\":return _context3.stop();}}},_callee3,null,[[3,22,26,36],[27,,31,35]]);}));return function(_x8){return _ref3.apply(this,arguments);};}());case 3:case\"end\":return _context4.stop();}}},_callee4);}));return _fetchData.apply(this,arguments);}fetchData();},[]);//console.log(allSongs)\nuseEffect(function(){//console.log(allSongs)\nif(allSongs){var get=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(all_audio){var _iterator2,_step2,index,c;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_iterator2=_createForOfIteratorHelper(allSongsSpliced);_context5.prev=1;_iterator2.s();case 3:if((_step2=_iterator2.n()).done){_context5.next=11;break;}index=_step2.value;_context5.next=7;return spotifyApi.getAudioFeaturesForTracks(index);case 7:c=_context5.sent;all_audio=[].concat(_toConsumableArray(all_audio),_toConsumableArray(c.audio_features));case 9:_context5.next=3;break;case 11:_context5.next=16;break;case 13:_context5.prev=13;_context5.t0=_context5[\"catch\"](1);_iterator2.e(_context5.t0);case 16:_context5.prev=16;_iterator2.f();return _context5.finish(16);case 19:setAudioFet(all_audio);//window.sessionStorage.setItem('audio_features', JSON.stringify(all_audio))\ncase 20:case\"end\":return _context5.stop();}}},_callee5,null,[[1,13,16,19]]);}));return function get(_x9){return _ref4.apply(this,arguments);};}();var all_audio=[];var allSongsSpliced=arraySplice(allSongs,100);console.log('Fetching audio data...');get(all_audio);}},[allSongs]);useEffect(function(){if(allSongs){setSongs(1);}},[allSongs]);useEffect(function(){if(audioFet){console.log(audioFet);if(mood=='sad'){console.log(':(');var FilteredSplice=arraySplice(audioFet.filter(function(x){return x.valence<0.2;}),50);spotifyApi.getTracks(FilteredSplice[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});// SET TRACKS IN THIS LOGIC\n}else if(mood=='happy'){console.log(':)');var _FilteredSplice=arraySplice(audioFet.filter(function(x){return x.energy>0.7;}),50);spotifyApi.getTracks(_FilteredSplice[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});}else if(mood=='study'){console.log(':/');var _FilteredSplice2=arraySplice(audioFet.filter(function(x){return x.danceability<0.2;}),50);spotifyApi.getTracks(_FilteredSplice2[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});}}},[mood,audioFet]);console.log(tracks);// NOW FILTER EVERYTHING IN AUDIO FEATURES\n// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n// AUDIO FEATURES HOOK\n// neeed recursion of this logic\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Gather all the songs from all your playlists and find which songs statistically follow these moods\"}),/*#__PURE__*/_jsx(\"div\",{children:songs?/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Songs Discovered: \",audioFet?audioFet.length:/*#__PURE__*/_jsx(_Fragment,{children:\"0\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bloc-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:toggleState===1?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(1,\"sad\");},children:\"Sad\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===2?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(2,\"happy\");},children:\"Happy\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===3?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(3,\"study\");},children:\"Study\"})]})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching all Songs....\"})}),audioFet?/*#__PURE__*/_jsxs(\"div\",{className:\"content-tabs\",children:[/*#__PURE__*/_jsx(\"div\",{className:toggleState===1?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Sad songs :(\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===2?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Happy Songs :D\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===3?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Study Songs :/\"})})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching Audio Data...\"})]})/* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/;};export default Reccommendations;","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","getUserPlaylists","then","response","newPlaylist","items","next","catch","getTrackfromPlaylist","playlistId","tracks","getPlaylistTracks","newTrack","getAllSongs","res","c","map","x","track","id","arraySplice","array","size","a","spliced","length","splice","Reccommendations","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","setTracks","toggleTab","index","console","log","all_songs","get","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","FilteredSplice","filter","valence","getTracks","energy","danceability","key"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } \n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\n\nconst getAllSongs = (res) => {\n    const c = getTrackfromPlaylist(res,[],100,0).then( (response) => {\n        if (response) { \n            return response.map(x => x.track.id)\n            //response.map(x => x.track.id) \n        }\n    })\n\n    return c\n}\n\nfunction arraySplice(array, size) {\n    var a = array\n    var spliced = []\n    if (array) {\n        while (a.length) {\n            spliced = [...spliced, a.splice(0,size)]\n        }\n\n    }\n    return spliced\n\n}\n\n\nconst Reccommendations = () => {\n\n\n    const [audioFet, setAudioFet] = useState()\n    const [allSongs, setAllSongs] = useState()\n    const [toggleState, setToggleState] = useState(1);\n    const [mood, setMood] = useState('sad')\n    const [songs, setSongs] = useState()\n\n    const [tracks, setTracks] = useState()\n\n    //var audio_feat = JSON.parse(window.sessionStorage.getItem('audio_features'))\n    //var trackstorage = JSON.parse(window.sessionStorage.getItem('tracks'))\n    \n \n    // get every songs form every playlist and every saved \n\n\n    const toggleTab = (index, mood) => {\n        console.log(audioFet)\n        setTracks();\n        setMood(mood)\n        setToggleState(index);\n    };\n\n\n    useEffect(() => {\n            async function fetchData() {\n                var all_songs = []\n                await getplaylists([],50,0).then(\n                    async (response) => {\n                        console.log('Fetching all songs...')\n                        \n                        for await (const index of response.map(x => x.id)) {\n                            all_songs = [...all_songs, ...await getAllSongs(index)]\n                        }\n                \n                        // instead of set state maybe import this from home\n                        setAllSongs(all_songs)\n                        //window.sessionStorage.setItem('tracks', JSON.stringify(all_songs))\n                })  \n            }\n            fetchData()\n\n    }, []);\n    //console.log(allSongs)\n\n    useEffect(() => {\n        //console.log(allSongs)\n   \n            if (allSongs) {\n                var all_audio = []\n\n                const allSongsSpliced = arraySplice(allSongs, 100)\n    \n                async function get(all_audio) {\n                    for (const index of allSongsSpliced) {\n                        const c = await spotifyApi.getAudioFeaturesForTracks(index)\n                        all_audio = [...all_audio, ...c.audio_features]\n                    }\n                    setAudioFet(all_audio)\n                    //window.sessionStorage.setItem('audio_features', JSON.stringify(all_audio))\n                }\n                console.log('Fetching audio data...')\n                get(all_audio)\n            }\n\n    }, [allSongs])\n\n\n    useEffect(() => {\n        if(allSongs) {\n            setSongs(1)\n        }\n    }, [allSongs])\n\n    useEffect(() => {\n        if (audioFet) {\n            console.log(audioFet)\n            if (mood == 'sad') {\n                console.log(':(')\n                const FilteredSplice = arraySplice(audioFet.filter(x => x.valence < 0.2), 50)\n                spotifyApi.getTracks(FilteredSplice[0].map(x => x.id))\n                .then( (response) => {\n                    setTracks(response)\n                })\n    \n                // SET TRACKS IN THIS LOGIC\n            } else if (mood == 'happy') {\n                console.log(':)')\n                const FilteredSplice = arraySplice(audioFet.filter(x => x.energy > 0.7), 50)\n                spotifyApi.getTracks(FilteredSplice[0].map(x => x.id))\n                .then( (response) => {\n                    setTracks(response)\n                })\n            } else if (mood == 'study') {\n                console.log(':/')\n                const FilteredSplice = arraySplice(audioFet.filter(x => x.danceability < 0.2), 50)\n                spotifyApi.getTracks(FilteredSplice[0].map(x => x.id))\n                .then( (response) => {\n                    setTracks(response)\n                })\n            }\n\n        }\n\n    }, [mood, audioFet])\n    console.log(tracks)\n\n    // NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n\n\n    // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n    \n    // AUDIO FEATURES HOOK\n \n    \n\n    // neeed recursion of this logic\n\n\n    return (\n        <>\n        <h1> Gather all the songs from all your playlists and find which songs statistically \n        follow these moods \n        </h1>\n        \n        <div>{songs ? (\n            <div className=\"container\">\n            <h2>Songs Discovered: {audioFet? audioFet.length : <>0</>}</h2>\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"sad\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"happy\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"study\")}\n              >\n                Study\n              </button>\n            </div>\n            </div>\n        ) : (<b>Fetching all Songs....</b>)}</div>\n\n\n        {audioFet ? (\n          <div className=\"content-tabs\">\n            <div\n              className={\n                toggleState === 1 ? \"content  active-content\" : \"content\"\n              }\n            >   \n                {tracks ? <>\n                {tracks.tracks.map((track, key) => (\n                <TrackInfo key={key} track={track} />))}\n                </> : <p>Loading Sad songs :(</p>}\n            </div>\n            <div\n              className={\n                toggleState === 2 ? \"content  active-content\" : \"content\"\n              }\n            >\n                {tracks ? <>\n                {tracks.tracks.map((track, key) => (\n                <TrackInfo key={key} track={track} />))}\n                </> :\n                <p>Loading Happy Songs :D</p>}\n            </div>\n            <div\n              className={\n                toggleState === 3 ? \"content  active-content\" : \"content\"\n              }\n            >\n                {tracks ? <>\n                {tracks.tracks.map((track, key) => (\n                <TrackInfo key={key} track={track} />))}\n                </> :\n                <p>Loading Study Songs :/</p>}\n            </div>\n          </div>\n        ) : (\n\n          <b>Fetching Audio Data...</b>\n        )}\n        </>\n        /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}