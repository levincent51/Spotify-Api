{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{BrowserRouter,Route,Switch}from\"react-router-dom\";import{LogoutButton}from\"../components/functions\";import Navbar from\"../components/Navbar\";import TopTracks from\"./TopTracks\";import Reccommendations from\"./Reccomendations\";import RecentTracks from\"./RecentTracks\";import SpotifyPlayer from\"react-spotify-web-playback\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Dashboard(){// TODO: This takes too many requests, remove for now\n/*const [isPlaying, setIsPlaying] = useState(false);\n  // Note the spotify web player SDK is in beta so performance is janky\n  \n  useEffect(() => {\n    const interval = setInterval( async () => {\n      spotifyApi.getMyCurrentPlaybackState().then((response) => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          }\n        } else if (!response) {\n          setIsPlaying(false);\n        }\n      })\n      .catch(() => {\n        getAccessToken()\n      });\n    }, 7000);\n    return () => clearInterval(interval);\n  }, [isPlaying]);*/ //return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\nreturn/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/RecentTracks\",children:/*#__PURE__*/_jsx(RecentTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/logout\",children:/*#__PURE__*/_jsx(LogoutButton,{})}),/*#__PURE__*/_jsx(Route,{path:\"/TopTracks\",children:/*#__PURE__*/_jsx(TopTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/Recommendations\",children:/*#__PURE__*/_jsx(Reccommendations,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to Spoti-FYI\"})})]})]})});}// ****** NESTED ROUTING","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Switch","LogoutButton","Navbar","TopTracks","Reccommendations","RecentTracks","SpotifyPlayer","spotifyApi","token","getAccessToken","Dashboard"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,aAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,KAA6C,kBAA7C,CACA,OAASC,YAAT,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,KAAkD,0BAAlD,C,wFAIA,cAAe,SAASC,CAAAA,SAAT,EAAqB,CAClC;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBArBoC,CAuBlC;AACA;AACA,mBACE,KAAC,aAAD,wBACE,oCACE,KAAC,MAAD,IADF,cAGE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,eAAZ,uBACE,KAAC,YAAD,IADF,EADF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,uBACE,KAAC,YAAD,IADF,EAJF,cAOE,KAAC,KAAD,EAAO,IAAI,CAAC,YAAZ,uBACE,KAAC,SAAD,IADF,EAPF,cAUE,KAAC,KAAD,EAAO,IAAI,CAAC,kBAAZ,uBACE,KAAC,gBAAD,IADF,EAVF,cAaE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,uBACE,4CADF,EAbF,GAHF,GADF,EADF,CAuCD,CACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport Reccommendations from \"./Reccomendations\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nexport default function Dashboard() {\n  // TODO: This takes too many requests, remove for now\n  /*const [isPlaying, setIsPlaying] = useState(false);\n  // Note the spotify web player SDK is in beta so performance is janky\n  \n  useEffect(() => {\n    const interval = setInterval( async () => {\n      spotifyApi.getMyCurrentPlaybackState().then((response) => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          }\n        } else if (!response) {\n          setIsPlaying(false);\n        }\n      })\n      .catch(() => {\n        getAccessToken()\n      });\n    }, 7000);\n    return () => clearInterval(interval);\n  }, [isPlaying]);*/\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/Recommendations\">\n            <Reccommendations />\n          </Route>\n          <Route path=\"/\">\n            <h1>Welcome to Spoti-FYI</h1>\n          </Route>\n        </Switch>\n        {/*isPlaying ? (\n          <div className=\"player\">\n            <b>Currently Playing</b>\n            <SpotifyPlayer\n              token={token}\n              syncExternalDevice={true}\n              syncExternalDeviceInterval={5}\n            />\n          </div>\n        ) : (\n          <div className=\"player\">\n            <b>Currently Not Playing Anything </b>\n          </div>\n        )*/}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}