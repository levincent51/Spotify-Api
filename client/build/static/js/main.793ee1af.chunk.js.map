{"version":3,"sources":["Pages/Login.js","components/functions.js","components/Navbar.js","components/spotifyAPI.js","components/TrackInfo.js","Pages/TopTracks.js","Pages/Reccomendations.js","Pages/RecentTracks.js","Pages/Dashboard.js","App.js","index.js"],"names":["Login","className","href","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","LogoutButton","window","localStorage","clear","sessionStorage","location","replace","useState","loggedOut","setLoggedOut","Redirect","to","push","Button","onClick","removeItem","Navbar","activeStyle","fontWeight","color","style","float","spotifyApi","SpotifyWebApi","refreshAccessToken","a","refresh_token","getItem","axios","get","SERVER","params","then","res","access_token","data","console","log","setItem","Date","now","reload","catch","e","getAccessToken","hashParams","r","q","hash","substring","exec","decodeURIComponent","getHashParams","error","tokenExpiry","token","setAccessToken","TrackInfo","track","uri","src","album","images","url","alt","artists","map","name","join","TopTracks","toggleState","setToggleState","tracks","setTracks","timeRange","setTimeRange","toggleTab","index","time_range","newTimeRange","useEffect","getMyTopTracks","limit","response","items","key","getplaylists","playlists","offset","newOffset","getUserPlaylists","newPlaylist","next","getTrackfromPlaylist","playlistId","getPlaylistTracks","newTrack","arraySplice","array","size","spliced","length","splice","Reccommendations","audioFet","setAudioFet","allSongs","setAllSongs","mood","setMood","songs","setSongs","audio_feat","JSON","parse","trackstorage","all_songs","x","id","stringify","fetchData","all_audio","allSongsSpliced","getAudioFeaturesForTracks","c","audio_features","audioFetFix","filter","FilteredSplice","valence","getTracks","energy","danceability","RecentTracks","RecentlyPlayed","setRecentlyPlayed","getMyRecentlyPlayedTracks","item","duration_ms","tabIndex","format","played_at","TableItem","Dashboard","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.793ee1af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Login.css\";\n\nconst SERVER_URL = \"https://react-express-spotify.herokuapp.com/login\"; // https://react-express-spotify.herokuapp.com/login http://localhost:8888/login\n\nexport default function Login() {\n  return (\n    <div className=\"login\">\n\n      <p>\n        An insight into your listening habits on Spotify\n      </p>\n      <a href={SERVER_URL}> Login to Spotify </a>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\n// gets hash parameters\nexport function getHashParams() {\n  var hashParams = {};\n  var e,\n    r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n  e = r.exec(q);\n  while (e) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n    e = r.exec(q);\n  }\n\n  return hashParams;\n}\n\nexport function millisToMinutesAndSeconds(millis) {\n  var minutes = Math.floor(millis / 60000);\n  var seconds = ((millis % 60000) / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\n\nexport const LogoutButton = () => {\n  window.localStorage.clear();\n  window.sessionStorage.clear();\n  window.location.replace(\"/\");\n  const [loggedOut, setLoggedOut] = useState(false);\n\n  const logout = () => {\n    localStorage.removeItem(\"whpf_user\");\n    setLoggedOut(true);\n  };\n\n  if (loggedOut) {\n    return <Redirect to=\"/\" push={true} />;\n  }\n\n  return <Button onClick={logout}>LogOut</Button>;\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <li>\n        <NavLink to=\"/\">HOME</NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/TopTracks\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n          }}\n        >\n          Top Tracks\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/RecentTracks\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n          }}\n        >\n          RecentlyPlayed\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/Recommendations\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n          }}\n        >\n          Recommendations\n        </NavLink>\n      </li>\n      <li style={{ float: \"right\" }}>\n  \n        <NavLink to=\"/logout\">Logout</NavLink>\n      </li>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import axios from \"axios\";\nimport { getHashParams, getObject, setObject } from \"./functions\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst EXPIRATION_TIME = 3600000; // 1 hour\nconst SERVER = \"https://react-express-spotify.herokuapp.com/\"; // or https://react-express-spotify.herokuapp.com http://localhost:8888\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n\n// USES JMPerez's spotify-web-api-js\n\nexport const spotifyApi = new SpotifyWebApi();\n\n// constantly refreshing\nexport const refreshAccessToken = async () => {\n  // take refresh token from local storage\n  const refresh_token = window.localStorage.getItem(\"refresh_token\");\n  axios\n    .get(SERVER + \"refresh_token\", {\n      params: {\n        refresh_token: refresh_token,\n      },\n    })\n    .then((res) => {\n      const access_token = res.data.access_token;\n      console.log(\"New acccess_token\", access_token);\n      window.localStorage.setItem(\"access_token\", access_token);\n      window.localStorage.setItem(\"token_timestamp\", Date.now());\n      window.location.reload();\n    })\n    .catch((e) => console.log(e));\n};\n\n// GET TOKEN, REFRESH IF REQUIRED\nexport const getAccessToken = () => {\n  // Takes token from our url\n\n  const { error, access_token, refresh_token } = getHashParams();\n\n  //  token invalid freom timeout\n  if (error) {\n    console.log(error);\n    refreshAccessToken();\n  }\n\n  if (access_token && refresh_token) {\n    window.location.replace(\"/\");\n    window.localStorage.setItem(\"access_token\", access_token);\n    window.localStorage.setItem(\"refresh_token\", refresh_token);\n    window.localStorage.setItem(\"token_timestamp\", Date.now());\n\n    return access_token;\n  }\n  // THIS WILL AUTO REFRESH OUR TOKEN BASED ON EXPIRY TIME\n  const tokenExpiry = window.localStorage.getItem(\"token_timestamp\");\n\n  if (\n    tokenExpiry &&\n    tokenExpiry !== \"undefined\" &&\n    Date.now() - tokenExpiry > EXPIRATION_TIME\n  ) {\n    console.log(\"Token expired, refreshing token\");\n    refreshAccessToken();\n  }\n\n  const local_access_token = window.localStorage.getItem(\"access_token\");\n\n  return local_access_token;\n};\n\n// SET OUR TOKEN with our spotify-web-api-js\nexport const token = getAccessToken();\n\nspotifyApi.setAccessToken(token);\n","import React from \"react\";\n\n// our track card for displaying artist, trackname and the picture\nconst TrackInfo = ({ track }) => {\n  return (\n    <a className=\"TrackInfoLink\" href={track.uri}>\n      <div className=\"card\">\n        <img src={track.album.images[1].url} alt=\"Track\" />\n        <div className=\"containerCard\">\n          <h4>\n            <b>{track.artists.map((e) => e.name).join(\", \")}</b>\n          </h4>\n          <p>{track.name}</p>\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport default TrackInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport TrackInfo from \"../components/TrackInfo\";\n\nconst TopTracks = () => {\n  const [toggleState, setToggleState] = useState(1);\n\n  const [tracks, setTracks] = useState();\n  const [timeRange, setTimeRange] = useState(\"short_term\");\n\n  const changeTerm = (newTimeRange) => {\n    setTracks();\n    setTimeRange(newTimeRange);\n  };\n  const toggleTab = (index, time_range) => {\n    changeTerm(time_range);\n    setToggleState(index);\n  };\n  useEffect(() => {\n    spotifyApi\n      .getMyTopTracks({\n        limit: 50,\n        time_range: timeRange,\n      })\n      .then((response) => {\n        if (response) {\n          console.log(response);\n          setTracks({\n            items: response.items,\n          });\n        }\n      })\n      .catch(() => {\n        getAccessToken()\n      });;\n\n  }, [timeRange]);\n\n  return (\n    <div>\n      <h2>Top Tracks</h2>\n\n      <div className=\"container\">\n        <div className=\"bloc-tabs\">\n          <button\n            className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n            onClick={() => toggleTab(1, \"short_term\")}\n          >\n            4 weeks\n          </button>\n          <button\n            className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n            onClick={() => toggleTab(2, \"medium_term\")}\n          >\n            6 months\n          </button>\n          <button\n            className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n            onClick={() => toggleTab(3, \"long_term\")}\n          >\n            All time\n          </button>\n        </div>\n        {tracks ? (\n          <div className=\"content-tabs\">\n            <div\n              className={\n                toggleState === 1 ? \"content  active-content\" : \"content\"\n              }\n            >\n              {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track} />\n              ))}\n            </div>\n            <div\n              className={\n                toggleState === 2 ? \"content  active-content\" : \"content\"\n              }\n            >\n              {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track} />\n              ))}\n            </div>\n            <div\n              className={\n                toggleState === 3 ? \"content  active-content\" : \"content\"\n              }\n            >\n              {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track} />\n              ))}\n            </div>\n          </div>\n        ) : (\n\n          <b>LOADING</b>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TopTracks;\n","import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi\n    .getUserPlaylists({\n      limit: limit,\n      offset: offset,\n    })\n    .then((response) => {\n      if (response) {\n        newPlaylist = [...playlists, ...response.items];\n        if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n        }\n      }\n    })\n    .catch(() => {\n      getAccessToken();\n    });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi\n    .getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n    .then((response) => {\n      if (response) {\n        newTrack = [...tracks, ...response.items];\n        if (response.next) {\n          newTrack = getTrackfromPlaylist(\n            playlistId,\n            newTrack,\n            limit,\n            newOffset\n          );\n        }\n      }\n    });\n\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = (res) => {\n  const c = getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n    if (response) {\n      return response.map((x) => x.track.id);\n      //response.map(x => x.track.id)\n    }\n  });\n\n  return c;\n};\n\nfunction arraySplice(array, size) {\n  var a = array;\n  var spliced = [];\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, size)];\n    }\n  }\n  return spliced;\n}\n\nconst Reccommendations = () => {\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  // get every songs form every playlist and every saved\n\n  const toggleTab = (index, mood) => {\n    console.log(audioFet);\n    setTracks();\n    setMood(mood);\n    setToggleState(index);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          setAllSongs(all_songs);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n\n      const audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n      console.log(audioFetFix);\n      if (mood == \"sad\") {\n        console.log(\":(\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.valence < 0.2),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n\n        // SET TRACKS IN THIS LOGIC\n      } else if (mood == \"happy\") {\n        console.log(\":)\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.energy > 0.7),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n      } else if (mood == \"study\") {\n        console.log(\":/\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.danceability < 0.2),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n      }\n    }\n  }, [mood, audioFet]);\n  console.log(tracks);\n\n  // NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n  // AUDIO FEATURES HOOK\n\n  // neeed recursion of this logic\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all the songs from all your playlists and find which songs\n        statistically follow these moods\n      </h1>\n\n      <div>\n        {songs ? (\n          <div className=\"container\">\n            <h2>Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"sad\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"happy\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"study\")}\n              >\n                Study\n              </button>\n            </div>\n          </div>\n        ) : (\n          <b>Fetching all Songs....</b>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div className=\"content-tabs\">\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Sad songs :(</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 2 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Happy Songs :D</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 3 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Study Songs :/</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <b>Fetching Audio Data...</b>\n      )}\n    </>\n    /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n  );\n};\n\nexport default Reccommendations;\n","import React, { Component, useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport format from \"date-fns/format\";\nimport { millisToMinutesAndSeconds } from \"../components/functions\";\n\nconst TableItem = (item) => (\n  <tr key={item.played_at}>\n    <td>\n      <a href={item.track.uri} className=\"row-link\">\n        {millisToMinutesAndSeconds(item.track.duration_ms)}\n      </a>\n    </td>\n\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.name}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.artists.map((e) => e.name).join(\", \")}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {format(Date.parse(item.played_at), \"dd/MM/yyyy, hh:mma\")}\n      </a>\n    </td>\n  </tr>\n);\n\nconst RecentTracks = () => {\n  const [RecentlyPlayed, setRecentlyPlayed] = useState();\n\n  // variable limit? with useeffect to load more maybe on scroll down, limit will change\n  useEffect(() => {\n    spotifyApi\n      .getMyRecentlyPlayedTracks({\n        limit: 50,\n      })\n      .then((response) => {\n        if (response) {\n          console.log(response);\n          setRecentlyPlayed({\n            items: response.items,\n          });\n        }\n      })\n      .catch(() => {\n        getAccessToken()\n      });;\n  }, []);\n  console.log(RecentlyPlayed);\n\n  return (\n    <div>\n      {RecentlyPlayed ? (\n        <div className=\"recently-played\">\n          <h2>Recently played tracks</h2>\n\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Duration</th>\n                <th>Track</th>\n                <th>Artist(s)</th>\n                <th>Played at</th>\n              </tr>\n            </thead>\n            <tbody>\n              {RecentlyPlayed.items.map((item) =>\n                TableItem(item)\n              )}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <b>LOADING</b>\n      )}\n    </div>\n  );\n};\nexport default RecentTracks;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport Reccommendations from \"./Reccomendations\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nexport default function Dashboard() {\n  // TODO: This takes too many requests, remove for now\n  /*const [isPlaying, setIsPlaying] = useState(false);\n  // Note the spotify web player SDK is in beta so performance is janky\n  \n  useEffect(() => {\n    const interval = setInterval( async () => {\n      spotifyApi.getMyCurrentPlaybackState().then((response) => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          }\n        } else if (!response) {\n          setIsPlaying(false);\n        }\n      })\n      .catch(() => {\n        getAccessToken()\n      });\n    }, 7000);\n    return () => clearInterval(interval);\n  }, [isPlaying]);*/\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/Recommendations\">\n            <Reccommendations />\n          </Route>\n          <Route path=\"/\">\n            <h1>Welcome to Spoti-FYI</h1>\n          </Route>\n        </Switch>\n        {/*isPlaying ? (\n          <div className=\"player\">\n            <b>Currently Playing</b>\n            <SpotifyPlayer\n              token={token}\n              syncExternalDevice={true}\n              syncExternalDeviceInterval={5}\n            />\n          </div>\n        ) : (\n          <div className=\"player\">\n            <b>Currently Not Playing Anything </b>\n          </div>\n        )*/}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n","import React, { Component, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Pages/Login\";\nimport Dashboard from \"./Pages/Dashboard\";\n\nimport { token } from \"./components/spotifyAPI\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">{token ? <Dashboard/> : <Login />}</div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}