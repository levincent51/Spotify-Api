{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\"; // LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      console.log(response);\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks({\n    playlistId\n  }, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      console.log(response);\n      newTrack = [...tracks, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset);\n      }\n    }\n  });\n  return newTrack;\n};\n\nconsole.log(getTrackfromPlaylist(token, \"6mSPlgg3X9RguFcpnZZDIw\", [], 50, 0));\n\nconst Reccommendations = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState();\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {\n    getplaylists([], 50, 0).then(response => {\n      setPlaylists(response);\n    });\n  }, []);\n  console.log(playlists); // neeed recursion of this logic\n  // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"ld9WpvuNbwB6ZcsUa7ik1I8x+Kc=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","console","log","items","next","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","Reccommendations","setPlaylists","allSongs","setAllSongs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,0BAAlD,C,CAGA;;;;AACA,MAAMC,YAAY,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoC;AACrD,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAJ;AACA,QAAMR,UAAU,CAACS,gBAAX,CAA4B;AAC9BJ,IAAAA,KAAK,EAAEA,KADuB;AAE9BC,IAAAA,MAAM,EAAEA;AAFsB,GAA5B,EAGHI,IAHG,CAGGC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACG,KAA3B,CAAd;;AACA,UAAIH,QAAQ,CAACI,IAAb,EAAmB;AACfP,QAAAA,WAAW,GAAGL,YAAY,CAACK,WAAD,EAAcH,KAAd,EAAqBE,SAArB,CAA1B;AACH;AACJ;AACJ,GAXK,EAWHS,KAXG,CAWG,MAAM;AACXd,IAAAA,cAAc;AACjB,GAbK,CAAN;AAcA,SAAOM,WAAP;AACH,CAlBD;;AAoBA,MAAMS,oBAAoB,GAAG,OAAOC,UAAP,EAAmBC,MAAnB,EAA2Bd,KAA3B,EAAkCC,MAAlC,KAA6C;AACtE,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIe,QAAJ;AACA,QAAMpB,UAAU,CAACqB,iBAAX,CACF;AAACH,IAAAA;AAAD,GADE,EAEF;AAACb,IAAAA,KAAK,EAAEA,KAAR;AACAC,IAAAA,MAAM,EAAEA;AADR,GAFE,EAGgBI,IAHhB,CAGsBC,QAAD,IAAc;AACrC,QAAIA,QAAJ,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAS,MAAAA,QAAQ,GAAG,CAAC,GAAGD,MAAJ,EAAY,GAAGR,QAAQ,CAACG,KAAxB,CAAX;;AACA,UAAIH,QAAQ,CAACI,IAAb,EAAmB;AACfP,QAAAA,WAAW,GAAGS,oBAAoB,CAACC,UAAD,EAAaE,QAAb,EAAuBf,KAAvB,EAA8BE,SAA9B,CAAlC;AACH;AACJ;AACJ,GAXK,CAAN;AAaA,SAAOa,QAAP;AACH,CAjBD;;AAmBAR,OAAO,CAACC,GAAR,CAAYI,oBAAoB,CAAChB,KAAD,EAAO,wBAAP,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,CAAzC,CAAhC;;AAMA,MAAMqB,gBAAgB,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAAClB,SAAD,EAAYmB,YAAZ,IAA4BzB,QAAQ,EAA1C;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,EAAxC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAAC,EAAD,EAAI,EAAJ,EAAO,CAAP,CAAZ,CAAsBO,IAAtB,CACKC,QAAD,IAAc;AACVY,MAAAA,YAAY,CAACZ,QAAD,CAAZ;AACH,KAHL;AAKH,GANQ,EAMN,EANM,CAAT;AASAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ,EAf2B,CAgB3B;AAGA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAxBD;;GAAMkB,gB;;KAAAA,gB;AA0BN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            console.log(response)\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        {playlistId},\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            console.log(response)\n            newTrack = [...tracks, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } \n        }\n    })\n\n    return newTrack\n}\n\nconsole.log(getTrackfromPlaylist(token,\"6mSPlgg3X9RguFcpnZZDIw\", [], 50, 0))\n\n\n\n\n\nconst Reccommendations = () => {\n\n    const [playlists, setPlaylists] = useState();\n    const [allSongs, setAllSongs] = useState()\n\n\n    useEffect(() => {\n        getplaylists([],50,0).then(\n            (response) => {\n                setPlaylists(response)\n            }\n        )\n    }, []);\n\n    \n    console.log(playlists)\n    // neeed recursion of this logic\n\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}