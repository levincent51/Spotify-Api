{"ast":null,"code":"import _regeneratorRuntime from\"/Users/macuser/Project Spotify/Spotify-Api/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/macuser/Project Spotify/Spotify-Api/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";import{getHashParams}from\"./functions\";import SpotifyWebApi from\"spotify-web-api-js\";var EXPIRATION_TIME=3600000;// 1 hour\nvar SERVER=\"https://react-express-spotify.herokuapp.com/\";// or https://react-express-spotify.herokuapp.com/ http://localhost:8888\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n// USES JMPerez's spotify-web-api-js\nexport var spotifyApi=new SpotifyWebApi();// constantly refreshing\nexport var refreshAccessToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var refresh_token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// take refresh token from local storage\nrefresh_token=window.localStorage.getItem(\"refresh_token\");axios.get(SERVER+\"refresh_token\",{params:{refresh_token:refresh_token}}).then(function(res){var access_token=res.data.access_token;console.log(\"New acccess_token\",access_token);spotifyApi.setAccessToken(access_token);window.localStorage.setItem(\"access_token\",access_token);window.localStorage.setItem(\"token_timestamp\",Date.now());window.location.reload();return access_token;}).catch(function(e){console.log(e);window.localStorage.clear();}).finally(window.location.reload());case 2:case\"end\":return _context.stop();}}},_callee);}));return function refreshAccessToken(){return _ref.apply(this,arguments);};}();// GET TOKEN, REFRESH IF REQUIRED\nexport var getAccessToken=function getAccessToken(){// Takes token from our url\nvar _getHashParams=getHashParams(),error=_getHashParams.error,access_token=_getHashParams.access_token,refresh_token=_getHashParams.refresh_token;//  token invalid freom timeout\nif(error){console.log(error);refreshAccessToken();}if(access_token&&refresh_token){window.location.replace(\"/\");window.localStorage.setItem(\"access_token\",access_token);window.localStorage.setItem(\"refresh_token\",refresh_token);window.localStorage.setItem(\"token_timestamp\",Date.now());return access_token;}// THIS WILL AUTO REFRESH OUR TOKEN BASED ON EXPIRY TIME\nvar tokenExpiry=window.localStorage.getItem(\"token_timestamp\");if(tokenExpiry&&tokenExpiry!==\"undefined\"&&Date.now()-tokenExpiry>EXPIRATION_TIME){console.log(\"Token expired, refreshing token\");return refreshAccessToken();}var local_access_token=window.localStorage.getItem(\"access_token\");return local_access_token;};// SET OUR TOKEN with our spotify-web-api-js\nexport var token=getAccessToken();spotifyApi.setAccessToken(token);","map":{"version":3,"sources":["/Users/macuser/Project Spotify/Spotify-Api/client/src/components/spotifyAPI.js"],"names":["axios","getHashParams","SpotifyWebApi","EXPIRATION_TIME","SERVER","spotifyApi","refreshAccessToken","refresh_token","window","localStorage","getItem","get","params","then","res","access_token","data","console","log","setAccessToken","setItem","Date","now","location","reload","catch","e","clear","finally","getAccessToken","error","replace","tokenExpiry","local_access_token","token"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { getHashParams} from \"./functions\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst EXPIRATION_TIME = 3600000; // 1 hour\nconst SERVER = \"https://react-express-spotify.herokuapp.com/\"; // or https://react-express-spotify.herokuapp.com/ http://localhost:8888\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n\n// USES JMPerez's spotify-web-api-js\n\nexport const spotifyApi = new SpotifyWebApi();\n\n// constantly refreshing\nexport const refreshAccessToken = async () => {\n  // take refresh token from local storage\n  const refresh_token = window.localStorage.getItem(\"refresh_token\");\n  axios\n    .get(SERVER + \"refresh_token\", {\n      params: {\n        refresh_token: refresh_token,\n      },\n    })\n    .then((res) => {\n      const access_token = res.data.access_token;\n      console.log(\"New acccess_token\", access_token);\n      spotifyApi.setAccessToken(access_token);\n      window.localStorage.setItem(\"access_token\", access_token);\n      window.localStorage.setItem(\"token_timestamp\", Date.now());\n      window.location.reload();\n      return access_token;\n    })\n    .catch((e) => {\n      console.log(e);\n      window.localStorage.clear();\n    })\n    .finally(window.location.reload());\n};\n\n// GET TOKEN, REFRESH IF REQUIRED\nexport const getAccessToken = () => {\n  // Takes token from our url\n\n  const { error, access_token, refresh_token } = getHashParams();\n\n  //  token invalid freom timeout\n  if (error) {\n    console.log(error);\n    refreshAccessToken();\n  }\n\n  if (access_token && refresh_token) {\n    window.location.replace(\"/\");\n    window.localStorage.setItem(\"access_token\", access_token);\n    window.localStorage.setItem(\"refresh_token\", refresh_token);\n    window.localStorage.setItem(\"token_timestamp\", Date.now());\n\n    return access_token;\n  }\n  // THIS WILL AUTO REFRESH OUR TOKEN BASED ON EXPIRY TIME\n  const tokenExpiry = window.localStorage.getItem(\"token_timestamp\");\n\n  if (\n    tokenExpiry &&\n    tokenExpiry !== \"undefined\" &&\n    Date.now() - tokenExpiry > EXPIRATION_TIME\n  ) {\n    console.log(\"Token expired, refreshing token\");\n    return refreshAccessToken();\n\n  }\n\n  const local_access_token = window.localStorage.getItem(\"access_token\");\n\n  return local_access_token;\n};\n\n// SET OUR TOKEN with our spotify-web-api-js\nexport const token = getAccessToken();\n\nspotifyApi.setAccessToken(token);\n"]},"metadata":{},"sourceType":"module"}