{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import TrackInfo from\"../components/TrackInfo\";import React,{useState,useEffect}from\"react\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import fetchData from\"../components/UserSongs\";// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/ // LOGIC WORKSSS RECURSION\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getplaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(playlists,limit,offset){var newOffset,newPlaylist;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOffset=offset+limit;_context.next=3;return spotifyApi.getUserPlaylists({limit:limit,offset:offset}).then(function(response){if(response){newPlaylist=[].concat(_toConsumableArray(playlists),_toConsumableArray(response.items));if(response.next){newPlaylist=getplaylists(newPlaylist,limit,newOffset);}}}).catch(function(){getAccessToken();});case 3:return _context.abrupt(\"return\",newPlaylist);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getplaylists(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getTrackfromPlaylist=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(playlistId,tracks,limit,offset){var newOffset,newTrack;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newOffset=offset+limit;_context2.next=3;return spotifyApi.getPlaylistTracks(token,playlistId,{limit:limit,offset:offset}).then(function(response){if(response){newTrack=[].concat(_toConsumableArray(tracks),_toConsumableArray(response.items));if(response.next){newTrack=getTrackfromPlaylist(playlistId,newTrack,limit,newOffset);}}});case 3:return _context2.abrupt(\"return\",newTrack);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTrackfromPlaylist(_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();var getAllSongs=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(res){var c;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getTrackfromPlaylist(res,[],100,0).then(function(response){if(response){return response.map(function(x){return x.track.id;});}});case 2:c=_context3.sent;return _context3.abrupt(\"return\",c);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getAllSongs(_x8){return _ref3.apply(this,arguments);};}();var Reccommendations=function Reccommendations(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),allSongs=_useState2[0],setAllSongs=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),songs=_useState4[0],setSongs=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}//setAllSongs(fetchData())\nfunction _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return getplaylists([],50,0).then(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response){var all_songs,_iterator,_step,index;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:all_songs=[];_iterator=_createForOfIteratorHelper(response.map(function(x){return x.id;}));_context4.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context4.next=16;break;}index=_step.value;_context4.t0=[];_context4.t1=_toConsumableArray(all_songs);_context4.t2=_toConsumableArray;_context4.next=11;return getAllSongs(index);case 11:_context4.t3=_context4.sent;_context4.t4=(0,_context4.t2)(_context4.t3);all_songs=_context4.t0.concat.call(_context4.t0,_context4.t1,_context4.t4);case 14:_context4.next=4;break;case 16:_context4.next=21;break;case 18:_context4.prev=18;_context4.t5=_context4[\"catch\"](2);_iterator.e(_context4.t5);case 21:_context4.prev=21;_iterator.f();return _context4.finish(21);case 24:// instead of set state maybe import this from home\nsetAllSongs(all_songs);case 25:case\"end\":return _context4.stop();}}},_callee4,null,[[2,18,21,24]]);}));return function(_x9){return _ref4.apply(this,arguments);};}());case 2:case\"end\":return _context5.stop();}}},_callee5);}));return _fetchData.apply(this,arguments);}fetchData();},[]);console.log(allSongs);/*\nconst Reccommendations = () => {\n\n    const [sad, setSad] = useState()\n\n    const [recco, setRecco] = useState()\n\n    const [playlists, setPlaylists] = useState([]);\n    const [addSong, setAddSong] = useState()\n\n    useEffect(() => {\n        getplaylists([],4,0).then(\n            (response) => {\n                var all_songs = []\n                response.map(x => x.id).forEach((res) => {\n                    getTrackfromPlaylist(res,[],4,0).then( (response) => {\n                        if (response) {\n                            all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                            setAddSong(all_songs)\n                        }\n                       \n                    })\n                }) \n            })  \n        \n    }, []);\n*/useEffect(function(){if(allSongs){setSongs(1);console.log('hiii');}},[allSongs]);/*\n    useEffect(() => {\n        var all_songs = []\n        playlists.forEach((res) => {\n            getTrackfromPlaylist(res,[],3,0).then( (response) => {\n                if (response) {\n                    all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                    setAllSongs(all_songs)\n                }\n            })\n        })\n\n    }, [playlists]);*/ /* var a = YOUR_ARRAY;\nwhile(a.length) {\n    console.log(a.splice(0,100));\n\n}*/ // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n// AUDIO FEATURES HOOK\n// Get Audio Features for several tracks max id is 100\n// getting back our several tracks max id is 50\n//console.log(playlists.map( x => x.id))\n// neeed recursion of this logic\nvar _useState5=useState(1),_useState6=_slicedToArray(_useState5,2),toggleState=_useState6[0],setToggleState=_useState6[1];// get every songs form every playlist and every saved \nvar changeTerm=function changeTerm(newTimeRange){};var toggleTab=function toggleTab(index,time_range){changeTerm(time_range);setToggleState(index);};return/*#__PURE__*/_jsx(\"div\",{children:songs?/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bloc-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:toggleState===1?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(1,\"short_term\");},children:\"Sad\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===2?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(2,\"medium_term\");},children:\"Happy\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===3?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(3,\"long_term\");},children:\"Study\"})]})}):/*#__PURE__*/_jsx(\"b\",{children:\"loading\"})})/* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/;};export default Reccommendations;","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","getUserPlaylists","then","response","newPlaylist","items","next","catch","getTrackfromPlaylist","playlistId","tracks","getPlaylistTracks","newTrack","getAllSongs","res","map","x","track","id","c","Reccommendations","allSongs","setAllSongs","songs","setSongs","all_songs","index","console","log","toggleState","setToggleState","changeTerm","newTimeRange","toggleTab","time_range"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } \n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\nconst getAllSongs = async (res) => {\n    const c = await getTrackfromPlaylist(res,[],100,0).then( (response) => {\n        if (response) { \n            return response.map(x => x.track.id) \n        }\n    })\n\n    return c\n}\n\n\nconst Reccommendations = () => {\n\n\n    const [allSongs, setAllSongs] = useState()\n    const [songs, setSongs] = useState()\n\n    useEffect(() => {\n        \n        async function fetchData() {\n            await getplaylists([],50,0).then(\n                async (response) => {\n                    var all_songs = []\n                    for (const index of response.map(x => x.id)) {\n                        all_songs = [...all_songs, ...await getAllSongs(index)]\n                    }\n                    // instead of set state maybe import this from home\n                    setAllSongs(all_songs)\n            })  \n        }\n        //setAllSongs(fetchData())\n        fetchData()\n\n    }, []);\n    console.log(allSongs)\n\n/*\nconst Reccommendations = () => {\n\n    const [sad, setSad] = useState()\n\n    const [recco, setRecco] = useState()\n\n    const [playlists, setPlaylists] = useState([]);\n    const [addSong, setAddSong] = useState()\n\n    useEffect(() => {\n        getplaylists([],4,0).then(\n            (response) => {\n                var all_songs = []\n                response.map(x => x.id).forEach((res) => {\n                    getTrackfromPlaylist(res,[],4,0).then( (response) => {\n                        if (response) {\n                            all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                            setAddSong(all_songs)\n                        }\n                       \n                    })\n                }) \n            })  \n        \n    }, []);\n*/\n    useEffect(() => {\n        if(allSongs) {\n            setSongs(1)\n            console.log('hiii')\n        }\n\n    }, [allSongs])\n\n\n    /*\n    useEffect(() => {\n        var all_songs = []\n        playlists.forEach((res) => {\n            getTrackfromPlaylist(res,[],3,0).then( (response) => {\n                if (response) {\n                    all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                    setAllSongs(all_songs)\n                }\n            })\n        })\n\n    }, [playlists]);*/\n\n    /* var a = YOUR_ARRAY;\nwhile(a.length) {\n    console.log(a.splice(0,100));\n\n}*/\n    // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n    \n    // AUDIO FEATURES HOOK\n \n    \n\n\n    // Get Audio Features for several tracks max id is 100\n    // getting back our several tracks max id is 50\n\n    //console.log(playlists.map( x => x.id))\n \n\n\n\n    // neeed recursion of this logic\n\n    const [toggleState, setToggleState] = useState(1);\n    // get every songs form every playlist and every saved \n    \n    const changeTerm = (newTimeRange) => {\n    };\n\n    const toggleTab = (index, time_range) => {\n        changeTerm(time_range);\n        setToggleState(index);\n    };\n\n    return (\n        <div>{songs ? (\n            <div className=\"container\">\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"short_term\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"medium_term\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"long_term\")}\n              >\n                Study\n              </button>\n            </div>\n            </div>\n        ) : (<b>loading</b>)}</div>\n        /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}