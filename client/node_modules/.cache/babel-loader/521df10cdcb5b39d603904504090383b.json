{"ast":null,"code":"import axios from 'axios';\nimport { getHashParams, getObject, setObject } from './functions';\nconst EXPIRATION_TIME = 3600000; // 1 hour\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n\nconst refreshAccessToken = async () => {\n  // take refresh token from local storage\n  const refresh_token = window.localStorage.getItem('refresh_token');\n  axios.get('/refresh_token', {\n    params: {\n      refresh_token: refresh_token\n    }\n  }).then(res => {\n    const access_token = res.data.access_token;\n    console.log('New acccess_token', access_token);\n    window.localStorage.setItem('access_token', access_token);\n    window.localStorage.setItem('token_timestamp', Date.now());\n    window.location.reload();\n  }).catch(e => console.log(e));\n}; // GET TOKEN, REFRESH IF REQUIRED\n\n\nexport const getAccessToken = () => {\n  // Takes token from our url\n  const {\n    error,\n    access_token,\n    refresh_token\n  } = getHashParams();\n\n  if (error) {\n    console.log(error);\n    refreshAccessToken();\n  }\n\n  console.log(refreshAccessToken);\n\n  if (access_token && refresh_token) {\n    window.localStorage.setItem('access_token', access_token);\n    window.localStorage.setItem('refresh_token', refresh_token);\n    window.localStorage.setItem('token_timestamp', Date.now());\n    return access_token;\n  }\n\n  const tokenExpiry = window.localStorage.getItem('token_timestamp');\n\n  if (tokenExpiry && tokenExpiry !== 'undefined' && Date.now() - tokenExpiry > EXPIRATION_TIME) {\n    console.log('Access token expired, refreshing token...');\n    refreshAccessToken();\n  }\n\n  const local_access_token = window.localStorage.getItem('access_token');\n  return local_access_token;\n};","map":{"version":3,"sources":["/Users/macuser/project/spotify-node-react-starter-kit/client/src/components/spotifyAPI.js"],"names":["axios","getHashParams","getObject","setObject","EXPIRATION_TIME","refreshAccessToken","refresh_token","window","localStorage","getItem","get","params","then","res","access_token","data","console","log","setItem","Date","now","location","reload","catch","e","getAccessToken","error","tokenExpiry","local_access_token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,SAAnC,QAAoD,aAApD;AAEA,MAAMC,eAAe,GAAG,OAAxB,C,CAAiC;AAEjC;AACA;;AACA,MAAMC,kBAAkB,GAAG,YAAY;AACnC;AACA,QAAMC,aAAa,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAtB;AACAT,EAAAA,KAAK,CACFU,GADH,CACO,gBADP,EACyB;AACrBC,IAAAA,MAAM,EAAE;AACNL,MAAAA,aAAa,EAAEA;AADT;AADa,GADzB,EAMGM,IANH,CAMSC,GAAD,IAAS;AACb,UAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAASD,YAA9B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,YAAjC;AACAP,IAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,cAA5B,EAA4CJ,YAA5C;AACAP,IAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,iBAA5B,EAA+CC,IAAI,CAACC,GAAL,EAA/C;AACAb,IAAAA,MAAM,CAACc,QAAP,CAAgBC,MAAhB;AACD,GAZH,EAaGC,KAbH,CAaUC,CAAD,IAAOR,OAAO,CAACC,GAAR,CAAYO,CAAZ,CAbhB;AAcH,CAjBD,C,CAmBA;;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASZ,IAAAA,YAAT;AAAuBR,IAAAA;AAAvB,MAAyCL,aAAa,EAA5D;;AAEA,MAAIyB,KAAJ,EAAW;AACTV,IAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACArB,IAAAA,kBAAkB;AACnB;;AACDW,EAAAA,OAAO,CAACC,GAAR,CAAYZ,kBAAZ;;AAEA,MAAIS,YAAY,IAAIR,aAApB,EAAmC;AACjCC,IAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,cAA5B,EAA4CJ,YAA5C;AACAP,IAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,eAA5B,EAA6CZ,aAA7C;AACAC,IAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,iBAA5B,EAA+CC,IAAI,CAACC,GAAL,EAA/C;AACA,WAAON,YAAP;AACD;;AAED,QAAMa,WAAW,GAAGpB,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,iBAA5B,CAApB;;AAEA,MACEkB,WAAW,IACXA,WAAW,KAAK,WADhB,IAEAR,IAAI,CAACC,GAAL,KAAaO,WAAb,GAA2BvB,eAH7B,EAIE;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACAZ,IAAAA,kBAAkB;AACnB;;AAED,QAAMuB,kBAAkB,GAAGrB,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAA3B;AAEA,SAAOmB,kBAAP;AACH,CA/BM","sourcesContent":["import axios from 'axios';\nimport { getHashParams, getObject, setObject } from './functions';\n\nconst EXPIRATION_TIME = 3600000; // 1 hour\n\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\nconst refreshAccessToken = async () => {\n    // take refresh token from local storage\n    const refresh_token = window.localStorage.getItem('refresh_token');\n    axios\n      .get('/refresh_token', {\n        params: {\n          refresh_token: refresh_token,\n        },\n      })\n      .then((res) => {\n        const access_token = res.data.access_token;\n        console.log('New acccess_token', access_token);\n        window.localStorage.setItem('access_token', access_token);\n        window.localStorage.setItem('token_timestamp', Date.now());\n        window.location.reload();\n      })\n      .catch((e) => console.log(e));\n};\n\n// GET TOKEN, REFRESH IF REQUIRED\nexport const getAccessToken = () => {\n    // Takes token from our url\n    const { error, access_token, refresh_token } = getHashParams();\n    \n    if (error) {\n      console.log(error);\n      refreshAccessToken();\n    }\n    console.log(refreshAccessToken)\n  \n    if (access_token && refresh_token) {\n      window.localStorage.setItem('access_token', access_token);\n      window.localStorage.setItem('refresh_token', refresh_token);\n      window.localStorage.setItem('token_timestamp', Date.now());\n      return access_token;\n    }\n  \n    const tokenExpiry = window.localStorage.getItem('token_timestamp');\n\n    if (\n      tokenExpiry &&\n      tokenExpiry !== 'undefined' &&\n      Date.now() - tokenExpiry > EXPIRATION_TIME\n    ) {\n      console.log('Access token expired, refreshing token...');\n      refreshAccessToken();\n    }\n  \n    const local_access_token = window.localStorage.getItem('access_token');\n  \n    return local_access_token;\n};"]},"metadata":{},"sourceType":"module"}