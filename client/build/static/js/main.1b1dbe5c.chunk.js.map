{"version":3,"sources":["Pages/Login.js","components/functions.js","components/Navbar.js","components/spotifyAPI.js","Pages/Home.js","components/TrackInfo.js","Pages/TopTracks.js","components/UserSongs.js","Pages/Moods.js","Pages/RecentTracks.js","Pages/Dashboard.js","App.js","index.js"],"names":["Login","className","href","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","LogoutButton","window","localStorage","clear","sessionStorage","location","replace","useState","loggedOut","setLoggedOut","Redirect","to","push","Button","onClick","removeItem","Navbar","style","background","activeStyle","fontWeight","color","textDecoration","float","spotifyApi","SpotifyWebApi","refreshAccessToken","a","refresh_token","getItem","axios","get","SERVER","params","then","res","access_token","data","console","log","setItem","Date","now","reload","catch","e","getAccessToken","hashParams","r","q","hash","substring","exec","decodeURIComponent","getHashParams","error","tokenExpiry","token","setAccessToken","Home","profile","setProfile","useEffect","getMe","response","display_name","split","src","images","url","CircularProgress","TrackInfo","track","index","uri","album","alt","artists","map","name","join","TopTracks","toggleState","setToggleState","tracks","setTracks","timeRange","setTimeRange","toggleTab","time_range","newTimeRange","getMyTopTracks","limit","items","key","indexOf","getplaylists","playlists","offset","newOffset","getUserPlaylists","newPlaylist","next","getTrackfromPlaylist","playlistId","getPlaylistTracks","newTrack","getAllSongs","filter","x","id","c","arraySplice","array","size","spliced","length","splice","Moods","audioFet","setAudioFet","allSongs","setAllSongs","search","setSearch","totalSongs","useRef","songs","setSongs","audio_feat","JSON","parse","trackstorage","getTracksfromList","arraysplice","Tracks","i","getTracks","current","all_songs","unique","Set","stringify","fetchData","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","audioWithFeat","value","setValue","value1","setValue1","value2","setValue2","vocal","setVocal","filterReq","useCallback","valence","energy","danceability","filter2","instrumentalness","FilteredSplice","Typography","Slider","onChange","event","newValue","marks","label","min","max","valueLabelDisplay","newValue1","newValue2","Switch","RecentTracks","RecentlyPlayed","setRecentlyPlayed","getMyRecentlyPlayedTracks","item","duration_ms","tabIndex","format","played_at","TableItem","Dashboard","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b1dbe5c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Login.css\";\n\nconst SERVER_URL = \"https://react-express-spotify.herokuapp.com/login\"; // https://react-express-spotify.herokuapp.com/login http://localhost:8888/login\n\nexport default function Login() {\n  return (\n    <div className=\"login\">\n      <p>An insight into your listening habits on Spotify</p>\n      <a href={SERVER_URL}> Login to Spotify </a>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\n// gets hash parameters\nexport function getHashParams() {\n\tvar hashParams = {};\n\tvar e,\n\t\tr = /([^&;=]+)=?([^&;]*)/g,\n\t\tq = window.location.hash.substring(1);\n\te = r.exec(q);\n\twhile (e) {\n\t\thashParams[e[1]] = decodeURIComponent(e[2]);\n\t\te = r.exec(q);\n\t}\n\n\treturn hashParams;\n}\n\nexport function millisToMinutesAndSeconds(millis) {\n\tvar minutes = Math.floor(millis / 60000);\n\tvar seconds = ((millis % 60000) / 1000).toFixed(0);\n\treturn minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\n\nexport const LogoutButton = () => {\n\twindow.localStorage.clear();\n\twindow.sessionStorage.clear();\n\twindow.location.replace(\"/\");\n\tconst [loggedOut, setLoggedOut] = useState(false);\n\n\tconst logout = () => {\n\t\tlocalStorage.removeItem(\"whpf_user\");\n\t\tsetLoggedOut(true);\n\t};\n\n\tif (loggedOut) {\n\t\treturn <Redirect to=\"/\" push={true} />;\n\t}\n\n\treturn <Button onClick={logout}>LogOut</Button>;\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <li\n        style={{\n          background: \"green\",\n        }}\n      >\n        <NavLink\n          to=\"/\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"white\",\n            background: \"green\",\n          }}\n        >\n          HOME\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/Moods\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n            textDecoration: \"underline\",\n          }}\n        >\n          Moods\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/TopTracks\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n            textDecoration: \"underline\",\n          }}\n        >\n          Top Tracks\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/RecentTracks\"\n          activeStyle={{\n            fontWeight: \"bold\",\n            color: \"green\",\n            textDecoration: \"underline\",\n          }}\n        >\n          RecentlyPlayed\n        </NavLink>\n      </li>\n\n      <li style={{ float: \"right\" }}>\n        <NavLink to=\"/logout\">Logout</NavLink>\n      </li>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import axios from \"axios\";\nimport { getHashParams, getObject, setObject } from \"./functions\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst EXPIRATION_TIME = 3600000; // 1 hour\nconst SERVER = \"https://react-express-spotify.herokuapp.com/\"; // or https://react-express-spotify.herokuapp.com/ http://localhost:8888\n//REFRESH ACCESS TOKEN EVERY 1 HOUR\n// REFRESH_URI\n\n// USES JMPerez's spotify-web-api-js\n\nexport const spotifyApi = new SpotifyWebApi();\n\n// constantly refreshing\nexport const refreshAccessToken = async () => {\n  // take refresh token from local storage\n  const refresh_token = window.localStorage.getItem(\"refresh_token\");\n  axios\n    .get(SERVER + \"refresh_token\", {\n      params: {\n        refresh_token: refresh_token,\n      },\n    })\n    .then((res) => {\n      const access_token = res.data.access_token;\n      console.log(\"New acccess_token\", access_token);\n      window.localStorage.setItem(\"access_token\", access_token);\n      window.localStorage.setItem(\"token_timestamp\", Date.now());\n      window.location.reload();\n    })\n    .catch((e) => console.log(e));\n};\n\n// GET TOKEN, REFRESH IF REQUIRED\nexport const getAccessToken = () => {\n  // Takes token from our url\n\n  const { error, access_token, refresh_token } = getHashParams();\n\n  //  token invalid freom timeout\n  if (error) {\n    console.log(error);\n    refreshAccessToken();\n  }\n\n  if (access_token && refresh_token) {\n    window.location.replace(\"/\");\n    window.localStorage.setItem(\"access_token\", access_token);\n    window.localStorage.setItem(\"refresh_token\", refresh_token);\n    window.localStorage.setItem(\"token_timestamp\", Date.now());\n\n    return access_token;\n  }\n  // THIS WILL AUTO REFRESH OUR TOKEN BASED ON EXPIRY TIME\n  const tokenExpiry = window.localStorage.getItem(\"token_timestamp\");\n\n  if (\n    tokenExpiry &&\n    tokenExpiry !== \"undefined\" &&\n    Date.now() - tokenExpiry > EXPIRATION_TIME\n  ) {\n    console.log(\"Token expired, refreshing token\");\n    refreshAccessToken();\n  }\n\n  const local_access_token = window.localStorage.getItem(\"access_token\");\n\n  return local_access_token;\n};\n\n// SET OUR TOKEN with our spotify-web-api-js\nexport const token = getAccessToken();\n\nspotifyApi.setAccessToken(token);\n","import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst Home = () => {\n  const [profile, setProfile] = useState();\n\n  useEffect(() => {\n    spotifyApi\n      .getMe()\n      .then((response) => {\n        setProfile(response);\n      })\n      .catch(() => {\n        getAccessToken();\n      });\n  }, []);\n\n  console.log(profile);\n\n  return (\n    <div>\n      {profile ? (\n        <>\n          <h1>Welcome to Spoti-FYI.</h1>\n\n          <h2>Hi {profile.display_name.split(\" \")[0]} </h2>\n          <img src={profile.images[0].url} />\n        </>\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\n// our track card for displaying artist, trackname and the picture\nconst TrackInfo = ({ track, index }) => {\n\treturn (\n\t\t<a className=\"TrackInfoLink\" href={track.uri}>\t\n\n\t\t<div className=\"card\">\n\t\t<div className='rank'>{index + 1}</div>\n\t\t\t<img src={track.album.images[1].url} alt=\"Track\" />\n\n\t\t\t<div className=\"containerCard\">\n\n\t\t\t\t\n\t\t\t<h4>\n\n\t\t\t\t<b>{track.artists.map((e) => e.name).join(\", \")}</b>\n\t\t\t</h4>\n\t\t\t<p>{track.name}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t</a>\n\t);\n};\n\nexport default TrackInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport TrackInfo from \"../components/TrackInfo\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst TopTracks = () => {\n  \tconst [toggleState, setToggleState] = useState(1);\n\n\tconst [tracks, setTracks] = useState();\n\tconst [timeRange, setTimeRange] = useState(\"short_term\");\n\n  \tconst changeTerm = (newTimeRange) => {\n\t\tif (newTimeRange != timeRange) {\n\t\t\tsetTracks()\n\t\t}\n\t\tsetTimeRange(newTimeRange);\n\t};\n\tconst toggleTab = (index, time_range) => {\n\t\tchangeTerm(time_range);\n\t\tsetToggleState(index);\n\t};\n  \tuseEffect(() => {\n\t\tspotifyApi\n\t\t.getMyTopTracks({\n\t\t\tlimit: 50,\n\t\t\ttime_range: timeRange,\n\t\t})\n\t\t.then((response) => {\n\t\t\tif (response) {\n\t\t\tconsole.log(response);\n\t\t\tsetTracks({\n\t\t\t\titems: response.items,\n\t\t\t});\n\t\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tgetAccessToken();\n\t\t});\n\t}, [timeRange]);\n\n\treturn (\n\t\t<div>\n\t\t<h2>Top Tracks</h2>\n\n\t\t<div className=\"container\">\n\t\t\t<div className=\"bloc-tabs\">\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(1, \"short_term\")}\n\t\t\t>\n\t\t\t\t4 weeks\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(2, \"medium_term\")}\n\t\t\t>\n\t\t\t\t6 months\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\tonClick={() => toggleTab(3, \"long_term\")}\n\t\t\t>\n\t\t\t\tAll time\n\t\t\t</button>\n\t\t\t</div>\n\t\t\t{tracks ? (\n\t\t\t<div className=\"content-tabs\">\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)} />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)} />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t{tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.items.indexOf(track)}  />\n\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<CircularProgress/>\n\t\t\t)}\n\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TopTracks;\n","import { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nexport const getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi\n    .getUserPlaylists({\n      limit: limit,\n      offset: offset,\n    })\n    .then((response) => {\n      if (response) {\n        console.log(response);\n        newPlaylist = [...playlists, ...response.items];\n        if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n        }\n      }\n    })\n    .catch(() => {\n      getAccessToken();\n    });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi\n    .getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n    .then((response) => {\n      if (response) {\n        newTrack = [...tracks, ...response.items];\n        if (response.next) {\n          newTrack = getTrackfromPlaylist(\n            playlistId,\n            newTrack,\n            limit,\n            newOffset\n          );\n        }\n      }\n    });\n\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nexport const getAllSongs = async (res) => {\n  const c = await getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n    if (response) {\n      const filter = response.filter((x) => x.track);\n\n      return filter.map((x) => x.track.id);\n      //response.map(x => x.track.id)\n    }\n  });\n\n  return c;\n};\n\nexport function arraySplice(array, size) {\n  var a = array;\n  var spliced = [];\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, size)];\n    }\n  }\n  return spliced;\n}\n","import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {\n  arraySplice,\n  getplaylists,\n  getAllSongs,\n} from \"../components/UserSongs\";\nimport {\n  Slider,\n  Typography,\n  Switch,\n  CircularProgress,\n} from \"@material-ui/core\";\n\n// TODO -> Option to disable some slider options, change cards into grids, then click/hover to get audio features.\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n\nconst Moods = () => {\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [search, setSearch] = useState(false);\n  const totalSongs = useRef(0);\n\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async (arraysplice) => {\n    var Tracks = { tracks: [] };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          // filter duplicates\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(unique));\n          totalSongs.current = unique.length;\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n      totalSongs.current = trackstorage.length;\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n          const audioWithFeat = all_audio.filter((x) => x); // filter out songs without features\n          setAudioFet(audioWithFeat);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  const [value, setValue] = useState(0.5);\n  const [value1, setValue1] = useState(0.5);\n  const [value2, setValue2] = useState(0.5);\n  const [vocal, setVocal] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue / 100);\n  };\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1 / 100);\n  };\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2 / 100);\n  };\n  const handleVocal = () => {\n    setVocal(!vocal);\n  };\n\n  const filterReq = useCallback(async () => {\n    setTracks();\n    setSearch(true);\n    const filter = audioFet.filter(\n      (x) =>\n        x.valence >= value - 0.1 &&\n        x.valence <= value + 0.1 &&\n        x.energy >= value1 - 0.1 &&\n        x.energy <= value1 + 0.1 &&\n        x.danceability >= value2 - 0.1 &&\n        x.danceability <= value2 + 0.1\n    );\n    var filter2;\n    if (vocal) {\n      filter2 = filter.filter((x) => x.instrumentalness <= 0.4);\n    } else {\n      filter2 = filter.filter((x) => x.instrumentalness >= 0.8);\n    }\n    const FilteredSplice = arraySplice(filter2, 50);\n    console.log(FilteredSplice);\n    getTracksfromList(FilteredSplice);\n  });\n\n  const marksValence = [\n    {\n      value: 0,\n      label: \"sad\",\n    },\n    {\n      value: 50,\n      label: \"neutral\",\n    },\n    {\n      value: 100,\n      label: \"happy\",\n    },\n  ];\n\n  const marksEnergy = [\n    {\n      value: 0,\n      label: \"chill\",\n    },\n    {\n      value: 50,\n      label: \"neutral\",\n    },\n    {\n      value: 100,\n      label: \"hype\",\n    },\n  ];\n\n  const marksDance = [\n    {\n      value: 0,\n      label: \"calm\",\n    },\n    {\n      value: 50,\n      label: \"neutral\",\n    },\n    {\n      value: 100,\n      label: \"dance!\",\n    },\n  ];\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all your songs and find the perfect songs to match your current\n        mood\n      </h1>\n      <h2>Choose source (in development)</h2>\n      <button> Get All Liked Songs</button>\n      <button> Get All Playlists</button>\n      <button> Get Only Your Playlists</button>\n      <button> Get Everything</button>\n      <div>\n        {songs ? (\n          <div className=\"container\">\n            <h2>Total Songs Discovered: {totalSongs.current}</h2>\n            <div className=\"sliders\">\n              <div>\n                <Typography>Mood</Typography>\n\n                <Slider\n                  value={value * 100}\n                  onChange={handleChange}\n                  aria-labelledby=\"discrete-slider-small-steps\"\n                  marks={marksValence}\n                  min={0}\n                  max={100}\n                  valueLabelDisplay=\"auto\"\n                />\n              </div>\n              <div>\n                <Typography>Energy</Typography>\n\n                <Slider\n                  value={value1 * 100}\n                  onChange={handleChange1}\n                  aria-labelledby=\"discrete-slider-small-steps\"\n                  marks={marksEnergy}\n                  min={0}\n                  max={100}\n                  valueLabelDisplay=\"auto\"\n                />\n              </div>\n              <div>\n                <Typography>Groove</Typography>\n\n                <Slider\n                  value={value2 * 100}\n                  onChange={handleChange2}\n                  aria-labelledby=\"discrete-slider-small-steps\"\n                  marks={marksDance}\n                  min={0}\n                  max={100}\n                  valueLabelDisplay=\"auto\"\n                />\n              </div>\n              <div>\n                <Typography>Vocals</Typography>\n                <Switch onChange={handleVocal} label=\"Vocals\" />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <>\n            <b>Fetching all Songs....</b>\n            <CircularProgress />\n            <p>\n              Please do not refresh/leave the page while this is occuring.\n            </p>{\" \"}\n          </>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div>\n          <p>Songs Found: {tracks ? <>{tracks.tracks.length}</> : 0} </p>\n          <div>\n            <button onClick={filterReq}>Find Songs!</button>\n          </div>\n\n          {tracks ? (\n            tracks.tracks.length ? (\n              tracks.tracks.map((track, key) => (\n                <TrackInfo\n                  key={key}\n                  track={track}\n                  index={tracks.tracks.indexOf(track)}\n                />\n              ))\n            ) : (\n              <p>no songs </p>\n            )\n          ) : search ? (\n            <CircularProgress />\n          ) : (\n            <p>Click the button to find your songs!</p>\n          )}\n        </div>\n      ) : (\n        <>\n          {songs ? (\n            <>\n              <b>Fetching Audio Data...</b> <CircularProgress />\n            </>\n          ) : null}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Moods;\n","import React, { Component, useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport format from \"date-fns/format\";\nimport { millisToMinutesAndSeconds } from \"../components/functions\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst TableItem = (item) => (\n  <tr key={item.played_at}>\n    <td>\n      <a href={item.track.uri} className=\"row-link\">\n        {millisToMinutesAndSeconds(item.track.duration_ms)}\n      </a>\n    </td>\n\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.name}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {item.track.artists.map((e) => e.name).join(\", \")}\n      </a>\n    </td>\n    <td>\n      <a href={item.track.uri} tabIndex=\"-1\" className=\"row-link\">\n        {format(Date.parse(item.played_at), \"dd/MM/yyyy, hh:mma\")}\n      </a>\n    </td>\n  </tr>\n);\n\nconst RecentTracks = () => {\n  const [RecentlyPlayed, setRecentlyPlayed] = useState();\n\n  // variable limit? with useeffect to load more maybe on scroll down, limit will change\n  useEffect(() => {\n    spotifyApi\n      .getMyRecentlyPlayedTracks({\n        limit: 50,\n      })\n      .then((response) => {\n        if (response) {\n          console.log(response);\n          setRecentlyPlayed({\n            items: response.items,\n          });\n        }\n      })\n      .catch(() => {\n        getAccessToken();\n      });\n  }, []);\n  console.log(RecentlyPlayed);\n\n  return (\n    <div>\n      <h2>Recently played tracks</h2>\n      {RecentlyPlayed ? (\n        <div className=\"recently-played\">\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Duration</th>\n                <th>Track</th>\n                <th>Artist(s)</th>\n                <th>Played at</th>\n              </tr>\n            </thead>\n            <tbody>{RecentlyPlayed.items.map((item) => TableItem(item))}</tbody>\n          </table>\n        </div>\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n};\nexport default RecentTracks;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport Home from \"./Home\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nexport default function Dashboard() {\n  // TODO: This takes too many requests, remove for now\n  /*const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 7000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);*/\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/Moods\">\n            <Moods />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        {/*isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)*/}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n","import React, { Component, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Pages/Login\";\nimport Dashboard from \"./Pages/Dashboard\";\n\nimport { token } from \"./components/spotifyAPI\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">{token ? <Dashboard/> : <Login />}</div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}