{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport { arraySplice, getplaylists, getAllSongs } from \"../components/UserSongs\";\nimport { Slider, Typography } from '@material-ui/core'; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Moods = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState('all');\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async arraysplice => {\n    var Tracks = {\n      tracks: []\n    };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map(x => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  }; // get every songs form every playlist and every saved\n\n  /*const toggleTab = (index, moods) => {\n  \tconsole.log(audioFet);\n  \tif (moods != mood) {\n  \t\tsetTracks();\n  \t}\n  \t\tsetMood(moods);\n  \tsetToggleState(index);\n  };*/\n\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async response => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n          // filter duplicates\n\n\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\"audio_features\", JSON.stringify(all_audio));\n        }\n\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (audioFet) {// TODO ADJUST THE FILTERS\n\n      /*\n      const audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n      console.log(audioFetFix);\n      if (mood == \"sad\") {\n      \tconsole.log(\":(\");\n      \tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n      \tconsole.log(FilteredSplice)\n      \tif (FilteredSplice) {\n      \t\tgetTracksfromList(FilteredSplice)\n      \t\t} else {\n      \t\talert(\"No matches\")\n      \t}\n      \t// SET TRACKS IN THIS LOGIC\n      } else if (mood == \"happy\") {\n      \tconsole.log(\":)\");\n      \tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n      \tif (FilteredSplice) {\n      \t\tgetTracksfromList(FilteredSplice)\n      \t} else {\n      \t\talert(\"No matches\")\n      \t}\n      } else if (mood == \"study\") {\n      \tconsole.log(\":/\");\n      \tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n      \tif (FilteredSplice) {\n      \t\tgetTracksfromList(FilteredSplice)\n      \t} else {\n      \t\talert(\"No matches\")\n      \t}\n      } else if (mood == \"gym (mad)\") {\n      \tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n      \tif (FilteredSplice) {\n      \t\tgetTracksfromList(FilteredSplice)\n      \t} else {\n      \t\talert(\"No matches\")\n      \t}\n      \t\t}*/\n    }\n  }, [mood, audioFet]);\n  console.log(tracks);\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", \"Gather all your songs and find the perfect songs to match your current mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose source (in development)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Liked Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Only Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Everything\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Total Songs Discovered: \", audioFet ? audioFet.length : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"0\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Mood\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spaceing: 2,\n          children: /*#__PURE__*/_jsxDEV(Slider, {\n            value: value,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Slider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Slider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Fetching all Songs....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please do not refresh/leave the page while this is occuring.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 4\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 3\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Songs Found: \", tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.length\n        }, void 0, false) : 0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Sad songs :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Happy Songs :D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Study Songs :/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 4 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Gym Songs >:(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Fetching Audio Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 14\n      }, this) : null\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(Moods, \"Z5E5FfcmNFBpa4UYp9DKbWrJB9A=\");\n\n_c = Moods;\nexport default Moods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moods\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","getAccessToken","arraySplice","getplaylists","getAllSongs","Slider","Typography","Moods","playlists","setPlaylists","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","tracks","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","length","c","getTracks","map","x","id","fetchData","all_songs","then","response","console","log","index","unique","Set","setItem","stringify","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","value","setValue","handleChange","event","newValue","width","track","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {arraySplice, getplaylists, getAllSongs} from \"../components/UserSongs\";\nimport { Slider, Typography } from '@material-ui/core'\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nconst Moods = () => {\n\n\tconst [playlists, setPlaylists] = useState('all')\n\tconst [audioFet, setAudioFet] = useState();\n\tconst [allSongs, setAllSongs] = useState();\n\tconst [toggleState, setToggleState] = useState(1);\n\tconst [mood, setMood] = useState(\"sad\");\n\tconst [songs, setSongs] = useState();\n\tconst [tracks, setTracks] = useState();\n\n\tvar audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n\tvar trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n\t\n\tconst getTracksfromList = async (arraysplice) => {\n\n\t\tvar Tracks = {tracks: []}\n\t\n\t\tfor (var i = 0; i < arraysplice.length; i++) {\n\t\t\tconst c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id))\n\t\t\tTracks.tracks = [...Tracks.tracks, ...c.tracks]\n\t\t}\n\t\tsetTracks(Tracks)\n\t}\n\n\t// get every songs form every playlist and every saved\n\n\t/*const toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};*/\n\n\tuseEffect(() => {\n\t\tif (!trackstorage) {\n\t\tasync function fetchData() {\n\t\t\tvar all_songs = [];\n\t\t\tawait getplaylists([], 50, 0).then(async (response) => {\n\t\t\tconsole.log(\"Fetching all songs...\");\n\n\t\t\t\tfor await (const index of response.map((x) => x.id)) {\n\t\t\t\t\tall_songs = [...all_songs, ...(await getAllSongs(index))];\n\t\t\t\t}\n\n\t\t\t\t// instead of set state maybe import this from home\n\t\t\t\t// filter duplicates\n\t\t\t\tconst unique = [...new Set(all_songs)]\n\t\t\t\tsetAllSongs(unique);\n\t\t\t\twindow.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n\t\t\t});\n\t\t}\n\t\tfetchData();\n\t\t} else {\n\t\tconsole.log(\"Fetching all songs...\");\n\t\tsetAllSongs(trackstorage);\n\t\t}\n\t}, []);\n\t//console.log(allSongs)\n\n\tuseEffect(() => {\n\t\t//console.log(allSongs)\n\t\tif (!audio_feat) {\n\t\t\tif (allSongs) {\n\t\t\t\tvar all_audio = [];\n\n\t\t\t\tconst allSongsSpliced = arraySplice(allSongs, 100);\n\n\t\t\t\tasync function get(all_audio) {\n\t\t\t\t\tfor (const index of allSongsSpliced) {\n\t\t\t\t\t\tconst c = await spotifyApi.getAudioFeaturesForTracks(index);\n\t\t\t\t\t\tall_audio = [...all_audio, ...c.audio_features];\n\t\t\t\t\t}\n\t\t\t\t\tsetAudioFet(all_audio);\n\t\t\t\t\twindow.sessionStorage.setItem(\n\t\t\t\t\t\t\"audio_features\",\n\t\t\t\t\t\tJSON.stringify(all_audio)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tget(all_audio);\n\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tsetAudioFet(audio_feat);\n\t\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (allSongs) {\n\t\tsetSongs(1);\n\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (audioFet) {\n\t\t// TODO ADJUST THE FILTERS\n\t\t\t/*\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}*/\n\t\t}\n\t}, [mood, audioFet]);\n\tconsole.log(tracks);\n\n\tconst [value, setValue] = useState(0)\n\n\tconst handleChange = (event, newValue) => {\n\t\tsetValue(newValue)\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t<h1>\n\t\t\t{\" \"}\n\t\t\tGather all your songs and find the perfect songs to match your current mood\n\t\t</h1>\n\t\t<h2>Choose source (in development)</h2>\n\t\t<button> Get All Liked Songs</button>\n\t\t<button> Get All Playlists</button>\n\t\t<button> Get Only Your Playlists</button>\n\t\t<button> Get Everything</button>\n\t\t<div>\n\t\t\t{songs ? \n\t\t\t<div className=\"container\">\n\t\t\t\t<h2>Total Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n\t\t\t\t\n\t\t\t\t<Typography>Mood</Typography>\n\t\t\t\t<Grid container spaceing={2}>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t\t\n\n\n\t\t\t\t<div style={{width:300}}>\n\t\t\t\t<Slider />\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{width:300}}>\n\t\t\t\t<Slider />\n\t\t\t\t</div>\n\n\n\t\t\t\t{/*\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\n\t\t\t\t</div> \n\t\t\t\t*/\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t : (\n\t\t\t\t<>\n\t\t\t<b>Fetching all Songs....</b>\n\t\t\t<p>Please do not refresh/leave the page while this is occuring.</p> </>\n\t\t\t)}\n\t\t</div>\n\t\t\t\t\n\t\t{audioFet ? (\n\t\t\t\n\t\t\t<div className=\"content-tabs\">\n\t\t\t\t<p>Songs Found: {tracks? <>{tracks.tracks.length}</> : 0} </p>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Sad songs :(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}  index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Happy Songs :D</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Study Songs :/</p>\n\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 4 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Gym Songs >:(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<>\n\t\t\t{songs ? (<b>Fetching Audio Data...</b>) : null}\n\t\t\t</>\n\t\t)}\n\t\t</>\n\n\t);\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}