{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getplaylists(playlists, limit, offset) {\n  const newOffset = offset + limit;\n  var newPlaylist = playlists;\n  spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        getplaylists(playlists, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n}\n\nconst Reccommendations = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState();\n  const [allSongs, setAllSongs] = useState(); // neeed recursion of this logic\n\n  spotifyApi.getUserPlaylists({\n    limit: 1\n  }).then(response => {\n    if (response) {\n      console.log(response);\n    }\n\n    if (response.next) {\n      spotifyApi.getUserPlaylists({\n        limit: 1,\n        offset: 1\n      }).then(response => {\n        if (response) {\n          console.log(response);\n        }\n      });\n    }\n  }); // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"jujWYPnJrxWzyP92XCse4ZSuNno=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js"],"names":["React","useState","useEffect","spotifyApi","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","next","catch","Reccommendations","setPlaylists","allSongs","setAllSongs","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,0BAA3C;;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC5C,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAW,GAAGJ,SAAlB;AACAH,EAAAA,UAAU,CAACQ,gBAAX,CAA4B;AACxBJ,IAAAA,KAAK,EAAEA,KADiB;AAExBC,IAAAA,MAAM,EAAEA;AAFgB,GAA5B,EAGGI,IAHH,CAGSC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACC,KAA3B,CAAd;;AACA,UAAID,QAAQ,CAACE,IAAb,EAAmB;AACfV,QAAAA,YAAY,CAACC,SAAD,EAAYC,KAAZ,EAAmBE,SAAnB,CAAZ;AACH;AACJ;AACJ,GAVD,EAUGO,KAVH,CAUS,MAAM;AACXZ,IAAAA,cAAc;AACjB,GAZD;AAaA,SAAOM,WAAP;AACH;;AAED,MAAMO,gBAAgB,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACX,SAAD,EAAYY,YAAZ,IAA4BjB,QAAQ,EAA1C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,EAAxC,CAH2B,CAO3B;;AACAE,EAAAA,UAAU,CAACQ,gBAAX,CAA6B;AACzBJ,IAAAA,KAAK,EAAE;AADkB,GAA7B,EAEGK,IAFH,CAESC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACH;;AACD,QAAIA,QAAQ,CAACE,IAAb,EAAmB;AACfZ,MAAAA,UAAU,CAACQ,gBAAX,CAA6B;AACzBJ,QAAAA,KAAK,EAAE,CADkB;AAEzBC,QAAAA,MAAM,EAAE;AAFiB,OAA7B,EAGGI,IAHH,CAGSC,QAAD,IAAc;AAClB,YAAIA,QAAJ,EAAc;AACVQ,UAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACH;AACJ,OAPD;AAQH;AACJ,GAhBD,EAR2B,CA0B3B;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA/BD;;GAAMI,gB;;KAAAA,gB;AAiCN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\n\nfunction getplaylists(playlists, limit, offset) {\n    const newOffset = offset + limit\n    var newPlaylist = playlists\n    spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                getplaylists(playlists, limit, newOffset)\n            }\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst Reccommendations = () => {\n\n    const [playlists, setPlaylists] = useState();\n    const [allSongs, setAllSongs] = useState()\n\n    \n\n    // neeed recursion of this logic\n    spotifyApi.getUserPlaylists( {\n        limit: 1,\n    }).then((response) => {\n        if (response) {\n            console.log(response)\n        }\n        if (response.next) {\n            spotifyApi.getUserPlaylists( {\n                limit: 1,\n                offset: 1\n            }).then((response) => {\n                if (response) {\n                    console.log(response)\n                }\n            })\n        }\n    })\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}