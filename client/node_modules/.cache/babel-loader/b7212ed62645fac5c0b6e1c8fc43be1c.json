{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _asyncIterator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncIterator\";import TrackInfo from\"../components/TrackInfo\";import React,{useState,useEffect}from\"react\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import fetchData from\"../components/UserSongs\";// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/ // LOGIC WORKSSS RECURSION\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var getplaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(playlists,limit,offset){var newOffset,newPlaylist;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOffset=offset+limit;_context.next=3;return spotifyApi.getUserPlaylists({limit:limit,offset:offset}).then(function(response){if(response){console.log(response);newPlaylist=[].concat(_toConsumableArray(playlists),_toConsumableArray(response.items));if(response.next){newPlaylist=getplaylists(newPlaylist,limit,newOffset);}}}).catch(function(){getAccessToken();});case 3:return _context.abrupt(\"return\",newPlaylist);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getplaylists(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getTrackfromPlaylist=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(playlistId,tracks,limit,offset){var newOffset,newTrack;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newOffset=offset+limit;_context2.next=3;return spotifyApi.getPlaylistTracks(token,playlistId,{limit:limit,offset:offset}).then(function(response){if(response){newTrack=[].concat(_toConsumableArray(tracks),_toConsumableArray(response.items));if(response.next){newTrack=getTrackfromPlaylist(playlistId,newTrack,limit,newOffset);}}});case 3:return _context2.abrupt(\"return\",newTrack);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTrackfromPlaylist(_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();var getAllSongs=function getAllSongs(res){var c=getTrackfromPlaylist(res,[],100,0).then(function(response){if(response){return response.map(function(x){return x.track.id;});//response.map(x => x.track.id)\n}});return c;};function arraySplice(array,size){var a=array;var spliced=[];if(array){while(a.length){spliced=[].concat(_toConsumableArray(spliced),[a.splice(0,size)]);}}return spliced;}var Moods=function Moods(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),audioFet=_useState2[0],setAudioFet=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),allSongs=_useState4[0],setAllSongs=_useState4[1];var _useState5=useState(1),_useState6=_slicedToArray(_useState5,2),toggleState=_useState6[0],setToggleState=_useState6[1];var _useState7=useState(\"sad\"),_useState8=_slicedToArray(_useState7,2),mood=_useState8[0],setMood=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),songs=_useState10[0],setSongs=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),tracks=_useState12[0],setTracks=_useState12[1];var audio_feat=JSON.parse(window.sessionStorage.getItem(\"audio_features\"));var trackstorage=JSON.parse(window.sessionStorage.getItem(\"tracks\"));var getTracksfromList=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(arraysplice){var Tracks,i,c;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:Tracks={tracks:[]};i=0;case 2:if(!(i<arraysplice.length)){_context3.next=10;break;}_context3.next=5;return spotifyApi.getTracks(arraysplice[i].map(function(x){return x.id;}));case 5:c=_context3.sent;Tracks.tracks=[].concat(_toConsumableArray(Tracks.tracks),_toConsumableArray(c.tracks));case 7:i++;_context3.next=2;break;case 10:setTracks(Tracks);case 11:case\"end\":return _context3.stop();}}},_callee3);}));return function getTracksfromList(_x8){return _ref3.apply(this,arguments);};}();// get every songs form every playlist and every saved\nvar toggleTab=function toggleTab(index,moods){console.log(audioFet);if(moods!=mood){setTracks();}setMood(moods);setToggleState(index);};useEffect(function(){if(!trackstorage){var _fetchData=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var all_songs;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:all_songs=[];_context5.next=3;return getplaylists([],50,0).then(/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response){var _iteratorAbruptCompletion,_didIteratorError,_iteratorError,_iterator,_step,index,unique;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(\"Fetching all songs...\");_iteratorAbruptCompletion=false;_didIteratorError=false;_context4.prev=3;_iterator=_asyncIterator(response.map(function(x){return x.id;}));case 5:_context4.next=7;return _iterator.next();case 7:if(!(_iteratorAbruptCompletion=!(_step=_context4.sent).done)){_context4.next=20;break;}index=_step.value;_context4.t0=[];_context4.t1=_toConsumableArray(all_songs);_context4.t2=_toConsumableArray;_context4.next=14;return getAllSongs(index);case 14:_context4.t3=_context4.sent;_context4.t4=(0,_context4.t2)(_context4.t3);all_songs=_context4.t0.concat.call(_context4.t0,_context4.t1,_context4.t4);case 17:_iteratorAbruptCompletion=false;_context4.next=5;break;case 20:_context4.next=26;break;case 22:_context4.prev=22;_context4.t5=_context4[\"catch\"](3);_didIteratorError=true;_iteratorError=_context4.t5;case 26:_context4.prev=26;_context4.prev=27;if(!(_iteratorAbruptCompletion&&_iterator.return!=null)){_context4.next=31;break;}_context4.next=31;return _iterator.return();case 31:_context4.prev=31;if(!_didIteratorError){_context4.next=34;break;}throw _iteratorError;case 34:return _context4.finish(31);case 35:return _context4.finish(26);case 36:// instead of set state maybe import this from home\n// filter duplicates\nunique=_toConsumableArray(new Set(all_songs));setAllSongs(unique);window.sessionStorage.setItem(\"tracks\",JSON.stringify(all_songs));case 39:case\"end\":return _context4.stop();}}},_callee4,null,[[3,22,26,36],[27,,31,35]]);}));return function(_x9){return _ref5.apply(this,arguments);};}());case 3:case\"end\":return _context5.stop();}}},_callee5);}));return function _fetchData(){return _ref4.apply(this,arguments);};}();_fetchData();}else{console.log(\"Fetching all songs...\");setAllSongs(trackstorage);}},[]);//console.log(allSongs)\nuseEffect(function(){//console.log(allSongs)\nif(!audio_feat){if(allSongs){var get=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(all_audio){var _iterator2,_step2,index,c;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_iterator2=_createForOfIteratorHelper(allSongsSpliced);_context6.prev=1;_iterator2.s();case 3:if((_step2=_iterator2.n()).done){_context6.next=11;break;}index=_step2.value;_context6.next=7;return spotifyApi.getAudioFeaturesForTracks(index);case 7:c=_context6.sent;all_audio=[].concat(_toConsumableArray(all_audio),_toConsumableArray(c.audio_features));case 9:_context6.next=3;break;case 11:_context6.next=16;break;case 13:_context6.prev=13;_context6.t0=_context6[\"catch\"](1);_iterator2.e(_context6.t0);case 16:_context6.prev=16;_iterator2.f();return _context6.finish(16);case 19:setAudioFet(all_audio);window.sessionStorage.setItem(\"audio_features\",JSON.stringify(all_audio));case 21:case\"end\":return _context6.stop();}}},_callee6,null,[[1,13,16,19]]);}));return function get(_x10){return _ref6.apply(this,arguments);};}();var all_audio=[];var allSongsSpliced=arraySplice(allSongs,100);console.log(\"Fetching audio data...\");get(all_audio);}}else{console.log(\"Fetching audio data...\");setAudioFet(audio_feat);}},[allSongs]);useEffect(function(){if(allSongs){setSongs(1);}},[allSongs]);useEffect(function(){if(audioFet){// TODO ADJUST THE FILTERS\nvar audioFetFix=audioFet.filter(function(x){return x;});// some songs have no audio features\nconsole.log(audioFetFix);if(mood==\"sad\"){console.log(\":(\");var FilteredSplice=arraySplice(audioFetFix.filter(function(x){return x.valence<0.3&&x.energy<0.5&&x.danceability<0.6;}),50);console.log(FilteredSplice);if(FilteredSplice){getTracksfromList(FilteredSplice);}else{alert(\"No matches\");}// SET TRACKS IN THIS LOGIC\n}else if(mood==\"happy\"){console.log(\":)\");var _FilteredSplice=arraySplice(audioFetFix.filter(function(x){return x.tempo>110&&x.speechiness<0.2&&x.energy>0.6&&x.danceability>0.6&&x.valence>0.6;}),50);if(_FilteredSplice){getTracksfromList(_FilteredSplice);}else{alert(\"No matches\");}}else if(mood==\"study\"){console.log(\":/\");var _FilteredSplice2=arraySplice(audioFetFix.filter(function(x){return x.speechiness<0.4&&x.energy<0.55&&x.instrumentalness>0.7;}),50);if(_FilteredSplice2){getTracksfromList(_FilteredSplice2);}else{alert(\"No matches\");}}else if(mood==\"gym (mad)\"){var _FilteredSplice3=arraySplice(audioFetFix.filter(function(x){return x.tempo>130&&x.energy>0.65&&x.acousticness<0.2&&x.liveness>0.1;}),50);if(_FilteredSplice3){getTracksfromList(_FilteredSplice3);}else{alert(\"No matches\");}}}},[mood,audioFet]);console.log(tracks);// NOW FILTER EVERYTHING IN AUDIO FEATURES\n// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n// AUDIO FEATURES HOOK\n// neeed recursion of this logic\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\" \",\"Gather all the songs from all your playlists and find the songs that match your current mood\"]}),/*#__PURE__*/_jsx(\"button\",{children:\" Get All Playlists\"}),/*#__PURE__*/_jsx(\"button\",{children:\" Get Only Your Playlists\"}),/*#__PURE__*/_jsx(\"div\",{children:songs?/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Songs Discovered: \",audioFet?audioFet.length:/*#__PURE__*/_jsx(_Fragment,{children:\"0\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bloc-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:toggleState===1?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(1,\"sad\");},children:\"Sad\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===2?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(2,\"happy\");},children:\"Happy\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===3?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(3,\"study\");},children:\"Study\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===4?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(4,\"gym (mad)\");},children:\"Gym >:(\"})]})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching all Songs....\"})}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Songs Found: \",tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.length}):0,\" \"]}),audioFet?/*#__PURE__*/_jsxs(\"div\",{className:\"content-tabs\",children:[/*#__PURE__*/_jsx(\"div\",{className:toggleState===1?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Sad songs :(\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===2?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Happy Songs :D\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===3?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Study Songs :/\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===4?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Gym Songs >:(\"})})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching Audio Data...\"})]})/* {tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}*/;};export default Moods;","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","getUserPlaylists","then","response","console","log","newPlaylist","items","next","catch","getTrackfromPlaylist","playlistId","tracks","getPlaylistTracks","newTrack","getAllSongs","res","c","map","x","track","id","arraySplice","array","size","a","spliced","length","splice","Moods","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","getTracks","toggleTab","index","moods","all_songs","unique","Set","setItem","stringify","get","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","audioFetFix","filter","FilteredSplice","valence","energy","danceability","alert","tempo","speechiness","instrumentalness","acousticness","liveness","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newPlaylist;\n\tawait spotifyApi\n\t.getUserPlaylists({\n\t\tlimit: limit,\n\t\toffset: offset,\n\t\t})\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tconsole.log(response)\n\t\t\tnewPlaylist = [...playlists, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewPlaylist = getplaylists(newPlaylist, limit, newOffset);\n\t\t\t}\n\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\tgetAccessToken();\n\t});\n\treturn newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newTrack;\n\tawait spotifyApi\n\t\t.getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tnewTrack = [...tracks, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewTrack = getTrackfromPlaylist(\n\t\t\t\tplaylistId,\n\t\t\t\tnewTrack,\n\t\t\t\tlimit,\n\t\t\t\tnewOffset\n\t\t\t);\n\t\t\t}\n\t\t}\n\t\t});\n\n\treturn newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\n\n\nconst getAllSongs = (res) => {\n\tconst c = getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n\t\tif (response) {\n\t\treturn response.map((x) => x.track.id);\n\t\t//response.map(x => x.track.id)\n\t\t}\n\t});\n\n\treturn c;\n};\n\nfunction arraySplice(array, size) {\n\tvar a = array;\n\tvar spliced = [];\n\tif (array) {\n\t\twhile (a.length) {\n\t\tspliced = [...spliced, a.splice(0, size)];\n\t\t}\n\t}\n\treturn spliced;\n\t}\n\nconst Moods = () => {\n\tconst [audioFet, setAudioFet] = useState();\n\tconst [allSongs, setAllSongs] = useState();\n\tconst [toggleState, setToggleState] = useState(1);\n\tconst [mood, setMood] = useState(\"sad\");\n\tconst [songs, setSongs] = useState();\n\n\tconst [tracks, setTracks] = useState();\n\n\tvar audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n\tvar trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n\n\tconst getTracksfromList = async (arraysplice) => {\n\n\t\tvar Tracks = {tracks: []}\n\t\n\t\tfor (var i = 0; i < arraysplice.length; i++) {\n\t\t\tconst c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id))\n\t\t\tTracks.tracks = [...Tracks.tracks, ...c.tracks]\n\t\t}\n\t\tsetTracks(Tracks)\n\t}\n\n\t// get every songs form every playlist and every saved\n\n\tconst toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!trackstorage) {\n\t\tasync function fetchData() {\n\t\t\tvar all_songs = [];\n\t\t\tawait getplaylists([], 50, 0).then(async (response) => {\n\t\t\tconsole.log(\"Fetching all songs...\");\n\n\t\t\t\tfor await (const index of response.map((x) => x.id)) {\n\t\t\t\t\tall_songs = [...all_songs, ...(await getAllSongs(index))];\n\t\t\t\t}\n\n\t\t\t\t// instead of set state maybe import this from home\n\t\t\t\t// filter duplicates\n\t\t\t\tconst unique = [...new Set(all_songs)]\n\t\t\t\tsetAllSongs(unique);\n\t\t\t\twindow.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n\t\t\t});\n\t\t}\n\t\tfetchData();\n\t\t} else {\n\t\tconsole.log(\"Fetching all songs...\");\n\t\tsetAllSongs(trackstorage);\n\t\t}\n\t}, []);\n\t//console.log(allSongs)\n\n\tuseEffect(() => {\n\t\t//console.log(allSongs)\n\t\tif (!audio_feat) {\n\t\t\tif (allSongs) {\n\t\t\t\tvar all_audio = [];\n\n\t\t\t\tconst allSongsSpliced = arraySplice(allSongs, 100);\n\n\t\t\t\tasync function get(all_audio) {\n\t\t\t\t\tfor (const index of allSongsSpliced) {\n\t\t\t\t\t\tconst c = await spotifyApi.getAudioFeaturesForTracks(index);\n\t\t\t\t\t\tall_audio = [...all_audio, ...c.audio_features];\n\t\t\t\t\t}\n\t\t\t\t\tsetAudioFet(all_audio);\n\t\t\t\t\twindow.sessionStorage.setItem(\n\t\t\t\t\t\t\"audio_features\",\n\t\t\t\t\t\tJSON.stringify(all_audio)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tget(all_audio);\n\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tsetAudioFet(audio_feat);\n\t\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (allSongs) {\n\t\tsetSongs(1);\n\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (audioFet) {\n\t\t// TODO ADJUST THE FILTERS\n\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t}\n\t}, [mood, audioFet]);\n\tconsole.log(tracks);\n\n\t// NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n\t// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n\t// AUDIO FEATURES HOOK\n\n\t// neeed recursion of this logic\n\n\treturn (\n\t\t<>\n\t\t<h1>\n\t\t\t{\" \"}\n\t\t\tGather all the songs from all your playlists and find the songs that match your current mood\n\t\t</h1>\n\t\t<button> Get All Playlists</button>\n\t\t<button> Get Only Your Playlists</button>\n\t\t<div>\n\t\t\t{songs ? (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h2>Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<b>Fetching all Songs....</b>\n\t\t\t)}\n\t\t</div>\n\t\t\t\t<p>Songs Found: {tracks? <>{tracks.tracks.length}</> : 0} </p>\n\t\t{audioFet ? (\n\t\t\t<div className=\"content-tabs\">\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Sad songs :(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}  index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Happy Songs :D</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Study Songs :/</p>\n\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 4 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Gym Songs >:(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<b>Fetching Audio Data...</b>\n\t\t)}\n\t\t</>\n\t\t/* {tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}*/\n\t);\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}