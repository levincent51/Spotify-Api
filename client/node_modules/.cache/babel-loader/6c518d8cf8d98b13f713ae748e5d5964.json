{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\nimport format from 'date-fns/format';\nimport './Dashboard.css';\nimport RecentTracks from './RecentTracks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TableItem = (item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: item.track.uri,\n      class: \"row-link\",\n      children: item.track.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: item.track.uri,\n      tabindex: \"-1\",\n      class: \"row-link\",\n      children: item.track.artists.map(e => e.name).join(\", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: item.track.uri,\n      tabindex: \"-1\",\n      class: \"row-link\",\n      children: format(Date.parse(item.played_at), 'dd/MM/yyyy, hh:mma')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)]\n}, item.played_at, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n\n_c = TableItem;\nexport default function Dashboard() {\n  _s();\n\n  // THIS IS the get recentlyplayed component\n  const [RecentlyPlayed, setRecentlyPlayed] = useState(); // variable limit? with useeffect to load more\n\n  const getRecentlyPlayed = () => {\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      if (response) {\n        console.log(response);\n        setRecentlyPlayed({\n          items: response.items\n        });\n      }\n    });\n  };\n\n  console.log(RecentlyPlayed);\n\n  const RecentlyPlayedDisplay = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recently-played\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recently played tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Artist(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Played at\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: RecentlyPlayed.items.map((item, index) => TableItem(item, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false); //return should return, getTOPTRACKS, make playlist\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getRecentlyPlayed(),\n      children: \"Recently Played\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => logout(),\n      children: \"Log Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: RecentlyPlayed ? /*#__PURE__*/_jsxDEV(RecentTracks, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 51\n      }, this) // CHANGE IT LATER SO THAT IT WILL BE LOADING UNTILL getRECENTLYPLAYED IS LOADED\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Dashboard, \"x3r9HkRfGLrYHGg9ZEFdIAV/nFU=\");\n\n_c2 = Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TableItem\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js"],"names":["React","Component","useState","useEffect","logout","spotifyApi","format","RecentTracks","TableItem","item","index","track","uri","name","artists","map","e","join","Date","parse","played_at","Dashboard","RecentlyPlayed","setRecentlyPlayed","getRecentlyPlayed","getMyRecentlyPlayedTracks","limit","then","response","console","log","items","RecentlyPlayedDisplay"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\nimport format from 'date-fns/format';\nimport './Dashboard.css'\nimport RecentTracks from './RecentTracks'\n\nconst TableItem = (item, index) => (\n  <tr key={item.played_at}>\n    <td><a href={item.track.uri} class=\"row-link\">{item.track.name}</a></td>\n    <td><a href={item.track.uri} tabindex=\"-1\" class=\"row-link\">{item.track.artists.map(e => e.name).join(\", \")}</a></td>\n    <td><a href={item.track.uri} tabindex=\"-1\" class=\"row-link\">{format(Date.parse(item.played_at), 'dd/MM/yyyy, hh:mma') }</a></td>\n  </tr>\n);\n\n\nexport default function Dashboard() {\n\n\n    // THIS IS the get recentlyplayed component\n    const [RecentlyPlayed, setRecentlyPlayed] = useState()\n\n    // variable limit? with useeffect to load more\n    const getRecentlyPlayed = () => {\n  \n      spotifyApi.getMyRecentlyPlayedTracks({\n        limit : 50,\n      }).then((response) => {\n        if (response) {\n          console.log(response)\n          setRecentlyPlayed( {\n            items: response.items\n          });   \n        } \n      })\n\n    }\n    console.log(RecentlyPlayed)\n\n    const RecentlyPlayedDisplay = () => (\n        <>\n        <div className=\"recently-played\">\n        <h2>Recently played tracks</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Track</th>\n              <th>Artist(s)</th>\n              <th>Played at</th>\n            </tr>\n          </thead>\n          <tbody>{RecentlyPlayed.items.map((item, index) => TableItem(item, index))}</tbody>\n        </table>\n        </div>\n        </>\n    )\n\n\n\n\n  //return should return, getTOPTRACKS, make playlist\n  return (\n      <div className=\"Dashboard\">\n \n          <button onClick={() => getRecentlyPlayed()}>\n          Recently Played\n          </button>\n          <button onClick={() => logout()}>\n              Log Out\n          </button> \n          <div>\n            {  RecentlyPlayed ? <RecentTracks/>:  <li>loading</li>\n            // CHANGE IT LATER SO THAT IT WILL BE LOADING UNTILL getRECENTLYPLAYED IS LOADED\n          }\n          </div>\n          <div>\n              {/*<img src={RecentlyPlayed.albumArt} style={{ height: 150 }}/>*/}\n          </div>\n\n      </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}