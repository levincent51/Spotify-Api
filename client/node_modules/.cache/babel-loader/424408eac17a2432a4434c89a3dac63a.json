{"ast":null,"code":"import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";export var getplaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(playlists,limit,offset){var newOffset,newPlaylist;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOffset=offset+limit;_context.next=3;return spotifyApi.getUserPlaylists({limit:limit,offset:offset}).then(function(response){if(response){console.log(response);newPlaylist=[].concat(_toConsumableArray(playlists),_toConsumableArray(response.items));if(response.next){newPlaylist=getplaylists(newPlaylist,limit,newOffset);}}}).catch(function(){getAccessToken();});case 3:return _context.abrupt(\"return\",newPlaylist);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getplaylists(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getTrackfromPlaylist=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(playlistId,tracks,limit,offset){var newOffset,newTrack;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newOffset=offset+limit;_context2.next=3;return spotifyApi.getPlaylistTracks(token,playlistId,{limit:limit,offset:offset}).then(function(response){if(response){newTrack=[].concat(_toConsumableArray(tracks),_toConsumableArray(response.items));if(response.next){newTrack=getTrackfromPlaylist(playlistId,newTrack,limit,newOffset);}}});case 3:return _context2.abrupt(\"return\",newTrack);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTrackfromPlaylist(_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();export var getAllSongs=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(res){var c;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getTrackfromPlaylist(res,[],100,0).then(function(response){if(response){var filter=response.filter(function(x){return x.track;});return filter.map(function(x){return x.track.id;});//response.map(x => x.track.id)\n}});case 2:c=_context3.sent;return _context3.abrupt(\"return\",c);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getAllSongs(_x8){return _ref3.apply(this,arguments);};}();export function arraySplice(array,size){var a=array;var spliced=[];if(array){while(a.length){spliced=[].concat(_toConsumableArray(spliced),[a.splice(0,size)]);}}return spliced;}","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/components/UserSongs.js"],"names":["spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","getUserPlaylists","then","response","console","log","newPlaylist","items","next","catch","getTrackfromPlaylist","playlistId","tracks","getPlaylistTracks","newTrack","getAllSongs","res","filter","x","track","map","id","c","arraySplice","array","size","a","spliced","length","splice"],"mappings":"iZAAA,OAASA,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,KAAkD,0BAAlD,CAEA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,iBAAOC,SAAP,CAAkBC,KAAlB,CAAyBC,MAAzB,4IACpBC,SADoB,CACRD,MAAM,CAAGD,KADD,uBAGpBL,CAAAA,UAAU,CACbQ,gBADG,CACc,CAChBH,KAAK,CAAEA,KADS,CAEhBC,MAAM,CAAEA,MAFQ,CADd,EAKHG,IALG,CAKE,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAJ,CAAc,CACZC,OAAO,CAACC,GAAR,CAAYF,QAAZ,EACAG,WAAW,8BAAOT,SAAP,qBAAqBM,QAAQ,CAACI,KAA9B,EAAX,CACA,GAAIJ,QAAQ,CAACK,IAAb,CAAmB,CACjBF,WAAW,CAAGV,YAAY,CAACU,WAAD,CAAcR,KAAd,CAAqBE,SAArB,CAA1B,CACD,CACF,CACF,CAbG,EAcHS,KAdG,CAcG,UAAM,CACXd,cAAc,GACf,CAhBG,CAHoB,wCAoBnBW,WApBmB,wDAAH,kBAAZV,CAAAA,YAAY,oDAAlB,CAuBP,GAAMc,CAAAA,oBAAoB,2FAAG,kBAAOC,UAAP,CAAmBC,MAAnB,CAA2Bd,KAA3B,CAAkCC,MAAlC,6IACrBC,SADqB,CACTD,MAAM,CAAGD,KADA,wBAGrBL,CAAAA,UAAU,CACboB,iBADG,CACenB,KADf,CACsBiB,UADtB,CACkC,CAAEb,KAAK,CAAEA,KAAT,CAAgBC,MAAM,CAAEA,MAAxB,CADlC,EAEHG,IAFG,CAEE,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAJ,CAAc,CACZW,QAAQ,8BAAOF,MAAP,qBAAkBT,QAAQ,CAACI,KAA3B,EAAR,CACA,GAAIJ,QAAQ,CAACK,IAAb,CAAmB,CACjBM,QAAQ,CAAGJ,oBAAoB,CAC7BC,UAD6B,CAE7BG,QAF6B,CAG7BhB,KAH6B,CAI7BE,SAJ6B,CAA/B,CAMD,CACF,CACF,CAdG,CAHqB,yCAmBpBc,QAnBoB,0DAAH,kBAApBJ,CAAAA,oBAAoB,0DAA1B,CAsBA,MAAO,IAAMK,CAAAA,WAAW,2FAAG,kBAAOC,GAAP,mJACTN,CAAAA,oBAAoB,CAACM,GAAD,CAAM,EAAN,CAAU,GAAV,CAAe,CAAf,CAApB,CAAsCd,IAAtC,CAA2C,SAACC,QAAD,CAAc,CACvE,GAAIA,QAAJ,CAAc,CACZ,GAAMc,CAAAA,MAAM,CAAGd,QAAQ,CAACc,MAAT,CAAgB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAT,EAAhB,CAAf,CAEA,MAAOF,CAAAA,MAAM,CAACG,GAAP,CAAW,SAACF,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAF,CAAQE,EAAf,EAAX,CAAP,CACA;AACD,CACF,CAPe,CADS,QACnBC,CADmB,iDAUlBA,CAVkB,0DAAH,kBAAXP,CAAAA,WAAW,8CAAjB,CAaP,MAAO,SAASQ,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,IAA5B,CAAkC,CACvC,GAAIC,CAAAA,CAAC,CAAGF,KAAR,CACA,GAAIG,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIH,KAAJ,CAAW,CACT,MAAOE,CAAC,CAACE,MAAT,CAAiB,CACfD,OAAO,8BAAOA,OAAP,GAAgBD,CAAC,CAACG,MAAF,CAAS,CAAT,CAAYJ,IAAZ,CAAhB,EAAP,CACD,CACF,CACD,MAAOE,CAAAA,OAAP,CACD","sourcesContent":["import { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nexport const getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi\n    .getUserPlaylists({\n      limit: limit,\n      offset: offset,\n    })\n    .then((response) => {\n      if (response) {\n        console.log(response);\n        newPlaylist = [...playlists, ...response.items];\n        if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n        }\n      }\n    })\n    .catch(() => {\n      getAccessToken();\n    });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi\n    .getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n    .then((response) => {\n      if (response) {\n        newTrack = [...tracks, ...response.items];\n        if (response.next) {\n          newTrack = getTrackfromPlaylist(\n            playlistId,\n            newTrack,\n            limit,\n            newOffset\n          );\n        }\n      }\n    });\n\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nexport const getAllSongs = async (res) => {\n  const c = await getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n    if (response) {\n      const filter = response.filter((x) => x.track);\n\n      return filter.map((x) => x.track.id);\n      //response.map(x => x.track.id)\n    }\n  });\n\n  return c;\n};\n\nexport function arraySplice(array, size) {\n  var a = array;\n  var spliced = [];\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, size)];\n    }\n  }\n  return spliced;\n}\n"]},"metadata":{},"sourceType":"module"}