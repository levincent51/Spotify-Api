{"ast":null,"code":"import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n      /*if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n      } */\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n      /*if (response.next) {\n          newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n      } */\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = async res => {\n  const c = await getTrackfromPlaylist(res, [], 100, 0).then(response => {\n    if (response) {\n      return response.map(x => x.track.id);\n    }\n  });\n  return c;\n};\n\nconst AllSongs = async () => {\n  return await getplaylists([], 50, 0).then(async response => {\n    var all_songs = [];\n\n    for (const index of response.map(x => x.id)) {\n      all_songs = [...all_songs, ...(await getAllSongs(index))];\n    } // instead of set state maybe import this from home\n\n\n    return all_songs;\n  });\n};\n\n_c = AllSongs;\nexport default AllSongs;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllSongs\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/components/UserSongs.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getAllSongs","res","c","map","x","track","id","AllSongs","all_songs","index"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,0BAAlD;;AAIA,MAAMC,YAAY,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoC;AACrD,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAJ;AACA,QAAMR,UAAU,CAACS,gBAAX,CAA4B;AAC9BJ,IAAAA,KAAK,EAAEA,KADuB;AAE9BC,IAAAA,MAAM,EAAEA;AAFsB,GAA5B,EAGHI,IAHG,CAGGC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACC,KAA3B,CAAd;AACA;AACZ;AACA;AACS;AACJ,GAVK,EAUHC,KAVG,CAUG,MAAM;AACXX,IAAAA,cAAc;AACjB,GAZK,CAAN;AAaA,SAAOM,WAAP;AACH,CAjBD;;AAmBA,MAAMM,oBAAoB,GAAG,OAAOC,UAAP,EAAmBC,MAAnB,EAA2BX,KAA3B,EAAkCC,MAAlC,KAA6C;AACtE,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIY,QAAJ;AACA,QAAMjB,UAAU,CAACkB,iBAAX,CACFjB,KADE,EAEFc,UAFE,EAGF;AAACV,IAAAA,KAAK,EAAEA,KAAR;AACAC,IAAAA,MAAM,EAAEA;AADR,GAHE,EAIgBI,IAJhB,CAIsBC,QAAD,IAAc;AACrC,QAAIA,QAAJ,EAAc;AACVM,MAAAA,QAAQ,GAAG,CAAC,GAAGD,MAAJ,EAAY,GAAGL,QAAQ,CAACC,KAAxB,CAAX;AACA;AACZ;AACA;AACS;AACJ,GAXK,CAAN;AAaA,SAAOK,QAAP,CAhBsE,CAgBtD;AACnB,CAjBD;;AAmBA,MAAME,WAAW,GAAG,MAAOC,GAAP,IAAe;AAC/B,QAAMC,CAAC,GAAG,MAAMP,oBAAoB,CAACM,GAAD,EAAK,EAAL,EAAQ,GAAR,EAAY,CAAZ,CAApB,CAAmCV,IAAnC,CAA0CC,QAAD,IAAc;AACnE,QAAIA,QAAJ,EAAc;AACV,aAAOA,QAAQ,CAACW,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQC,EAA1B,CAAP;AACH;AACJ,GAJe,CAAhB;AAMA,SAAOJ,CAAP;AACH,CARD;;AAUC,MAAMK,QAAQ,GAAG,YAAY;AAC1B,SAAO,MAAMvB,YAAY,CAAC,EAAD,EAAI,EAAJ,EAAO,CAAP,CAAZ,CAAsBO,IAAtB,CACT,MAAOC,QAAP,IAAoB;AAChB,QAAIgB,SAAS,GAAG,EAAhB;;AACA,SAAK,MAAMC,KAAX,IAAoBjB,QAAQ,CAACW,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACE,EAApB,CAApB,EAA6C;AACzCE,MAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe,IAAG,MAAMR,WAAW,CAACS,KAAD,CAApB,CAAf,CAAZ;AACH,KAJe,CAKhB;;;AACA,WAAOD,SAAP;AACP,GARY,CAAb;AASH,CAVA;;KAAMD,Q;AAWP,eAAeA,QAAf","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            /*if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } */\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            /*if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } */\n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\nconst getAllSongs = async (res) => {\n    const c = await getTrackfromPlaylist(res,[],100,0).then( (response) => {\n        if (response) { \n            return response.map(x => x.track.id) \n        }\n    })\n\n    return c\n}\n\n const AllSongs = async () => {\n    return await getplaylists([],50,0).then(\n        async (response) => {\n            var all_songs = []\n            for (const index of response.map(x => x.id)) {\n                all_songs = [...all_songs, ...await getAllSongs(index)]\n            }\n            // instead of set state maybe import this from home\n            return all_songs\n    })  \n}\nexport default AllSongs\n\n\n\n "]},"metadata":{},"sourceType":"module"}