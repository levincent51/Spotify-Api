{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n\n  // THIS IS the get recentlyplayed component\n  const [RecentlyPlayed, setRecentlyPlayed] = useState();\n\n  const TableItem = (item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: item.track_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: format(item.played_at, 'D MMM YYYY, hh:mma')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, item.played_at, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this); // variable limit? with useeffect to load more\n\n\n  const getRecentlyPlayed = () => {\n    spotifyApi.getMyTopTracks({\n      limit: 20,\n      time_range: \"short_term\",\n      offset: 4 // offset: shift, next set of entities\n\n    }).then(response => {\n      if (response) {\n        console.log(response);\n      }\n    });\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 20\n    }).then(response => {\n      if (response) {\n        console.log(response);\n        setRecentlyPlayed({\n          items: response.items\n        });\n        /*\n        window.localStorage.setItem('name',response.item.name)\n        window.localStorage.setItem('image',response.item.album.images[0].url)     */\n      } else {\n        alert(\"You are not playing anything\");\n      }\n    });\n  };\n\n  console.log(RecentlyPlayed); //return should return, getTOPTRACKS, make playlist\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Recently Played:  \", RecentlyPlayed ? RecentlyPlayed.items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.track.album.images[0].url,\n            style: {\n              height: 50\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 97\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item.track.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 167\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 163\n          }, this), \"  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 92\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 211\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getRecentlyPlayed(),\n        children: \"Check Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => logout(),\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Dashboard, \"x3r9HkRfGLrYHGg9ZEFdIAV/nFU=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js"],"names":["React","Component","useState","useEffect","SpotifyWebApi","logout","spotifyApi","Dashboard","RecentlyPlayed","setRecentlyPlayed","TableItem","item","index","track_name","format","played_at","getRecentlyPlayed","getMyTopTracks","limit","time_range","offset","then","response","console","log","getMyRecentlyPlayedTracks","items","alert","map","track","album","images","url","height","name"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\n\nexport default function Dashboard() {\n\n\n    // THIS IS the get recentlyplayed component\n    const [RecentlyPlayed, setRecentlyPlayed] = useState()\n\n\n    const TableItem = (item, index) => (\n      <tr key={item.played_at}>\n        <td>{index + 1}</td>\n        <td>{item.track_name}</td>\n        <td>{format(item.played_at, 'D MMM YYYY, hh:mma')}</td>\n      </tr>\n    );\n\n    // variable limit? with useeffect to load more\n    const getRecentlyPlayed = () => {\n\n      spotifyApi.getMyTopTracks({\n          limit: 20,\n          time_range: \"short_term\",\n          offset: 4,\n          // offset: shift, next set of entities\n      }).then((response) => {\n        if (response) {\n          console.log(response)\n        }\n      })\n\n      spotifyApi.getMyRecentlyPlayedTracks({\n        limit : 20,\n      }).then((response) => {\n        if (response) {\n          console.log(response)\n          setRecentlyPlayed( {\n\n            items: response.items\n          });   \n          /*\n          window.localStorage.setItem('name',response.item.name)\n          window.localStorage.setItem('image',response.item.album.images[0].url)     */   \n        } else {\n\n          alert(\"You are not playing anything\")\n        }\n\n      })\n    }\n\n    console.log(RecentlyPlayed)\n\n\n\n\n        //return should return, getTOPTRACKS, make playlist\n        return (\n            <div className=\"Dashboard\">\n                <h1>\n                <div>\n                    Recently Played:  {  RecentlyPlayed ? RecentlyPlayed.items.map(item => <div><img src={item.track.album.images[0].url} style={{ height: 50 }}/><ul><li>{item.track.name}</li></ul>  </div>) :  <li>loading</li>}\n                </div>\n                <div>\n                    {/*<img src={RecentlyPlayed.albumArt} style={{ height: 150 }}/>*/}\n                </div>\n                    <button onClick={() => getRecentlyPlayed()}>\n                    Check Now Playing\n                    </button>\n                <button onClick={() => logout()}>\n                    Log Out\n                </button> \n                </h1>\n            </div>\n        )\n}\n"]},"metadata":{},"sourceType":"module"}