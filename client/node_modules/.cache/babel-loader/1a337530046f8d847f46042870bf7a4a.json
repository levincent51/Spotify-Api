{"ast":null,"code":"import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{BrowserRouter,Route,Switch}from\"react-router-dom\";import{LogoutButton}from\"../components/functions\";import Navbar from\"../components/Navbar\";import TopTracks from\"./TopTracks\";import Moods from\"./Moods\";import RecentTracks from\"./RecentTracks\";import SpotifyPlayer from\"react-spotify-web-playback\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Dashboard(){// TODO: This takes too many requests, remove for now\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isPlaying=_useState2[0],setIsPlaying=_useState2[1];// Note the spotify web player SDK is in beta so performance is janky\nuseEffect(function(){var interval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:spotifyApi.getMyCurrentPlaybackState().then(function(response){if(response){if(response.is_playing){setIsPlaying(true);}}else if(!response){setIsPlaying(false);}}).catch(function(){getAccessToken();});case 1:case\"end\":return _context.stop();}}},_callee);})),10000);return function(){return clearInterval(interval);};},[isPlaying]);//return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\nreturn/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/RecentTracks\",children:/*#__PURE__*/_jsx(RecentTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/logout\",children:/*#__PURE__*/_jsx(LogoutButton,{})}),/*#__PURE__*/_jsx(Route,{path:\"/TopTracks\",children:/*#__PURE__*/_jsx(TopTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/Moods\",children:/*#__PURE__*/_jsx(Moods,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to Spoti-FYI\"})})]}),isPlaying?/*#__PURE__*/_jsxs(\"div\",{className:\"player\",children:[/*#__PURE__*/_jsx(\"b\",{children:\"Currently Playing\"}),/*#__PURE__*/_jsx(SpotifyPlayer,{token:token,syncExternalDevice:true,syncExternalDeviceInterval:5})]}):/*#__PURE__*/_jsx(\"div\",{className:\"player\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Currently Not Playing Anything \"})})]})});}// ****** NESTED ROUTING","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Switch","LogoutButton","Navbar","TopTracks","Moods","RecentTracks","SpotifyPlayer","spotifyApi","token","getAccessToken","Dashboard","isPlaying","setIsPlaying","interval","setInterval","getMyCurrentPlaybackState","then","response","is_playing","catch","clearInterval"],"mappings":"yYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,aAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,KAA6C,kBAA7C,CACA,OAASC,YAAT,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,KAAkD,0BAAlD,C,wFAIA,cAAe,SAASC,CAAAA,SAAT,EAAqB,CACpC;AACA,cAAkCd,QAAQ,CAAC,KAAD,CAA1C,wCAAOe,SAAP,eAAkBC,YAAlB,eACA;AAEAf,SAAS,CAAC,UAAM,CACf,GAAMgB,CAAAA,QAAQ,CAAGC,WAAW,sEAAE,mIAC9BP,UAAU,CAACQ,yBAAX,GAAuCC,IAAvC,CAA4C,SAACC,QAAD,CAAc,CACzD,GAAIA,QAAJ,CAAc,CACd,GAAIA,QAAQ,CAACC,UAAb,CAAyB,CACxBN,YAAY,CAAC,IAAD,CAAZ,CACA,CACA,CAJD,IAIO,IAAI,CAACK,QAAL,CAAe,CACtBL,YAAY,CAAC,KAAD,CAAZ,CACC,CACD,CARD,EASCO,KATD,CASO,UAAM,CACZV,cAAc,GACd,CAXD,EAD8B,sDAAF,GAazB,KAbyB,CAA5B,CAcA,MAAO,kBAAMW,CAAAA,aAAa,CAACP,QAAD,CAAnB,EAAP,CACA,CAhBQ,CAgBN,CAACF,SAAD,CAhBM,CAAT,CAkBA;AACA;AACC,mBACC,KAAC,aAAD,wBACA,oCACC,KAAC,MAAD,IADD,cAGC,MAAC,MAAD,yBACA,KAAC,KAAD,EAAO,IAAI,CAAC,eAAZ,uBACC,KAAC,YAAD,IADD,EADA,cAIA,KAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,uBACC,KAAC,YAAD,IADD,EAJA,cAOA,KAAC,KAAD,EAAO,IAAI,CAAC,YAAZ,uBACC,KAAC,SAAD,IADD,EAPA,cAUA,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,uBACC,KAAC,KAAD,IADD,EAVA,cAaA,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,uBACC,4CADD,EAbA,GAHD,CAoBEA,SAAS,cACV,aAAK,SAAS,CAAC,QAAf,wBACC,wCADD,cAEC,KAAC,aAAD,EACA,KAAK,CAAEH,KADP,CAEA,kBAAkB,CAAE,IAFpB,CAGA,0BAA0B,CAAE,CAH5B,EAFD,GADU,cAUV,YAAK,SAAS,CAAC,QAAf,uBACC,sDADD,EA9BD,GADA,EADD,CAuCA,CACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nexport default function Dashboard() {\n// TODO: This takes too many requests, remove for now\nconst [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 10000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);\n\n//return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\n\treturn (\n\t\t<BrowserRouter>\n\t\t<div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n\t\t\t<Navbar />\n\n\t\t\t<Switch>\n\t\t\t<Route path=\"/RecentTracks\">\n\t\t\t\t<RecentTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/logout\">\n\t\t\t\t<LogoutButton />\n\t\t\t</Route>\n\t\t\t<Route path=\"/TopTracks\">\n\t\t\t\t<TopTracks />\n\t\t\t</Route>\n\t\t\t<Route path=\"/Moods\">\n\t\t\t\t<Moods />\n\t\t\t</Route>\n\t\t\t<Route path=\"/\">\n\t\t\t\t<h1>Welcome to Spoti-FYI</h1>\n\t\t\t</Route>\n\t\t\t</Switch>\n\t\t\t{isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}