{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _asyncIterator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncIterator\";import TrackInfo from\"../components/TrackInfo\";import React,{useState,useEffect}from\"react\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import fetchData from\"../components/UserSongs\";// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/ // LOGIC WORKSSS RECURSION\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var getplaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(playlists,limit,offset){var newOffset,newPlaylist;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newOffset=offset+limit;_context.next=3;return spotifyApi.getUserPlaylists({limit:limit,offset:offset}).then(function(response){if(response){newPlaylist=[].concat(_toConsumableArray(playlists),_toConsumableArray(response.items));if(response.next){newPlaylist=getplaylists(newPlaylist,limit,newOffset);}}}).catch(function(){getAccessToken();});case 3:return _context.abrupt(\"return\",newPlaylist);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getplaylists(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var getTrackfromPlaylist=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(playlistId,tracks,limit,offset){var newOffset,newTrack;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:newOffset=offset+limit;_context2.next=3;return spotifyApi.getPlaylistTracks(token,playlistId,{limit:limit,offset:offset}).then(function(response){if(response){newTrack=[].concat(_toConsumableArray(tracks),_toConsumableArray(response.items));if(response.next){newTrack=getTrackfromPlaylist(playlistId,newTrack,limit,newOffset);}}});case 3:return _context2.abrupt(\"return\",newTrack);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTrackfromPlaylist(_x4,_x5,_x6,_x7){return _ref2.apply(this,arguments);};}();var getAllSongs=function getAllSongs(res){var c=getTrackfromPlaylist(res,[],100,0).then(function(response){if(response){return response.map(function(x){return x.track.id;});//response.map(x => x.track.id)\n}});return c;};function arraySplice(array,size){var a=array;var spliced=[];if(array){while(a.length){spliced=[].concat(_toConsumableArray(spliced),[a.splice(0,size)]);}}return spliced;}var Reccommendations=function Reccommendations(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),audioFet=_useState2[0],setAudioFet=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),allSongs=_useState4[0],setAllSongs=_useState4[1];var _useState5=useState(1),_useState6=_slicedToArray(_useState5,2),toggleState=_useState6[0],setToggleState=_useState6[1];var _useState7=useState(\"sad\"),_useState8=_slicedToArray(_useState7,2),mood=_useState8[0],setMood=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),songs=_useState10[0],setSongs=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),tracks=_useState12[0],setTracks=_useState12[1];var audio_feat=JSON.parse(window.sessionStorage.getItem(\"audio_features\"));var trackstorage=JSON.parse(window.sessionStorage.getItem(\"tracks\"));// get every songs form every playlist and every saved\nvar toggleTab=function toggleTab(index,mood){console.log(audioFet);setTracks();setMood(mood);setToggleState(index);};useEffect(function(){if(!trackstorage){var _fetchData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var all_songs;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:all_songs=[];_context4.next=3;return getplaylists([],50,0).then(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response){var _iteratorAbruptCompletion,_didIteratorError,_iteratorError,_iterator,_step,index;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(\"Fetching all songs...\");_iteratorAbruptCompletion=false;_didIteratorError=false;_context3.prev=3;_iterator=_asyncIterator(response.map(function(x){return x.id;}));case 5:_context3.next=7;return _iterator.next();case 7:if(!(_iteratorAbruptCompletion=!(_step=_context3.sent).done)){_context3.next=20;break;}index=_step.value;_context3.t0=[];_context3.t1=_toConsumableArray(all_songs);_context3.t2=_toConsumableArray;_context3.next=14;return getAllSongs(index);case 14:_context3.t3=_context3.sent;_context3.t4=(0,_context3.t2)(_context3.t3);all_songs=_context3.t0.concat.call(_context3.t0,_context3.t1,_context3.t4);case 17:_iteratorAbruptCompletion=false;_context3.next=5;break;case 20:_context3.next=26;break;case 22:_context3.prev=22;_context3.t5=_context3[\"catch\"](3);_didIteratorError=true;_iteratorError=_context3.t5;case 26:_context3.prev=26;_context3.prev=27;if(!(_iteratorAbruptCompletion&&_iterator.return!=null)){_context3.next=31;break;}_context3.next=31;return _iterator.return();case 31:_context3.prev=31;if(!_didIteratorError){_context3.next=34;break;}throw _iteratorError;case 34:return _context3.finish(31);case 35:return _context3.finish(26);case 36:// instead of set state maybe import this from home\nsetAllSongs(all_songs);window.sessionStorage.setItem(\"tracks\",JSON.stringify(all_songs));case 38:case\"end\":return _context3.stop();}}},_callee3,null,[[3,22,26,36],[27,,31,35]]);}));return function(_x8){return _ref4.apply(this,arguments);};}());case 3:case\"end\":return _context4.stop();}}},_callee4);}));return function _fetchData(){return _ref3.apply(this,arguments);};}();_fetchData();}else{console.log(\"Fetching all songs...\");setAllSongs(trackstorage);}},[]);//console.log(allSongs)\nuseEffect(function(){//console.log(allSongs)\nif(!audio_feat){if(allSongs){var get=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(all_audio){var _iterator2,_step2,index,c;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_iterator2=_createForOfIteratorHelper(allSongsSpliced);_context5.prev=1;_iterator2.s();case 3:if((_step2=_iterator2.n()).done){_context5.next=11;break;}index=_step2.value;_context5.next=7;return spotifyApi.getAudioFeaturesForTracks(index);case 7:c=_context5.sent;all_audio=[].concat(_toConsumableArray(all_audio),_toConsumableArray(c.audio_features));case 9:_context5.next=3;break;case 11:_context5.next=16;break;case 13:_context5.prev=13;_context5.t0=_context5[\"catch\"](1);_iterator2.e(_context5.t0);case 16:_context5.prev=16;_iterator2.f();return _context5.finish(16);case 19:setAudioFet(all_audio);window.sessionStorage.setItem(\"audio_features\",JSON.stringify(all_audio));case 21:case\"end\":return _context5.stop();}}},_callee5,null,[[1,13,16,19]]);}));return function get(_x9){return _ref5.apply(this,arguments);};}();var all_audio=[];var allSongsSpliced=arraySplice(allSongs,100);console.log(\"Fetching audio data...\");get(all_audio);}}else{console.log(\"Fetching audio data...\");setAudioFet(audio_feat);}},[allSongs]);useEffect(function(){if(allSongs){setSongs(1);}},[allSongs]);useEffect(function(){if(audioFet){// TODO ADJUST THE FILTERS\nvar audioFetFix=audioFet.filter(function(x){return x;});// some songs have no audio features\nconsole.log(audioFetFix);if(mood==\"sad\"){console.log(\":(\");var FilteredSplice=arraySplice(audioFetFix.filter(function(x){return x.valence<0.2;}),50);spotifyApi.getTracks(FilteredSplice[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});// SET TRACKS IN THIS LOGIC\n}else if(mood==\"happy\"){console.log(\":)\");var _FilteredSplice=arraySplice(audioFetFix.filter(function(x){return x.energy>0.7;}),50);spotifyApi.getTracks(_FilteredSplice[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});}else if(mood==\"study\"){console.log(\":/\");var _FilteredSplice2=arraySplice(audioFetFix.filter(function(x){return x.danceability<0.2;}),50);spotifyApi.getTracks(_FilteredSplice2[0].map(function(x){return x.id;})).then(function(response){setTracks(response);});}}},[mood,audioFet]);console.log(tracks);// NOW FILTER EVERYTHING IN AUDIO FEATURES\n// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n// AUDIO FEATURES HOOK\n// neeed recursion of this logic\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\" \",\"Gather all the songs from all your playlists and find which songs statistically follow these moods\"]}),/*#__PURE__*/_jsx(\"div\",{children:songs?/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Songs Discovered: \",audioFet?audioFet.length:/*#__PURE__*/_jsx(_Fragment,{children:\"0\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bloc-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:toggleState===1?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(1,\"sad\");},children:\"Sad\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===2?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(2,\"happy\");},children:\"Happy\"}),/*#__PURE__*/_jsx(\"button\",{className:toggleState===3?\"tabs active-tabs\":\"tabs\",onClick:function onClick(){return toggleTab(3,\"study\");},children:\"Study\"})]})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching all Songs....\"})}),audioFet?/*#__PURE__*/_jsxs(\"div\",{className:\"content-tabs\",children:[/*#__PURE__*/_jsx(\"div\",{className:toggleState===1?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Sad songs :(\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===2?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Happy Songs :D\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===3?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Study Songs :/\"})})]}):/*#__PURE__*/_jsx(\"b\",{children:\"Fetching Audio Data...\"})]})/* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/;};export default Reccommendations;","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","getUserPlaylists","then","response","newPlaylist","items","next","catch","getTrackfromPlaylist","playlistId","tracks","getPlaylistTracks","newTrack","getAllSongs","res","c","map","x","track","id","arraySplice","array","size","a","spliced","length","splice","Reccommendations","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","toggleTab","index","console","log","all_songs","setItem","stringify","get","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","audioFetFix","filter","FilteredSplice","valence","getTracks","energy","danceability","key"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi\n    .getUserPlaylists({\n      limit: limit,\n      offset: offset,\n    })\n    .then((response) => {\n      if (response) {\n        newPlaylist = [...playlists, ...response.items];\n        if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n        }\n      }\n    })\n    .catch(() => {\n      getAccessToken();\n    });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi\n    .getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n    .then((response) => {\n      if (response) {\n        newTrack = [...tracks, ...response.items];\n        if (response.next) {\n          newTrack = getTrackfromPlaylist(\n            playlistId,\n            newTrack,\n            limit,\n            newOffset\n          );\n        }\n      }\n    });\n\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = (res) => {\n  const c = getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n    if (response) {\n      return response.map((x) => x.track.id);\n      //response.map(x => x.track.id)\n    }\n  });\n\n  return c;\n};\n\nfunction arraySplice(array, size) {\n  var a = array;\n  var spliced = [];\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, size)];\n    }\n  }\n  return spliced;\n}\n\nconst Reccommendations = () => {\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  // get every songs form every playlist and every saved\n\n  const toggleTab = (index, mood) => {\n    console.log(audioFet);\n    setTracks();\n    setMood(mood);\n    setToggleState(index);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          setAllSongs(all_songs);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n\n      const audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n      console.log(audioFetFix);\n      if (mood == \"sad\") {\n        console.log(\":(\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.valence < 0.2),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n\n        // SET TRACKS IN THIS LOGIC\n      } else if (mood == \"happy\") {\n        console.log(\":)\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.energy > 0.7),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n      } else if (mood == \"study\") {\n        console.log(\":/\");\n        const FilteredSplice = arraySplice(\n          audioFetFix.filter((x) => x.danceability < 0.2),\n          50\n        );\n        spotifyApi\n          .getTracks(FilteredSplice[0].map((x) => x.id))\n          .then((response) => {\n            setTracks(response);\n          });\n      }\n    }\n  }, [mood, audioFet]);\n  console.log(tracks);\n\n  // NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n  // AUDIO FEATURES HOOK\n\n  // neeed recursion of this logic\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all the songs from all your playlists and find which songs\n        statistically follow these moods\n      </h1>\n\n      <div>\n        {songs ? (\n          <div className=\"container\">\n            <h2>Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"sad\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"happy\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"study\")}\n              >\n                Study\n              </button>\n            </div>\n          </div>\n        ) : (\n          <b>Fetching all Songs....</b>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div className=\"content-tabs\">\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Sad songs :(</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 2 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Happy Songs :D</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 3 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo key={key} track={track} />\n                ))}\n              </>\n            ) : (\n              <p>Loading Study Songs :/</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <b>Fetching Audio Data...</b>\n      )}\n    </>\n    /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n  );\n};\n\nexport default Reccommendations;\n"]},"metadata":{},"sourceType":"module"}