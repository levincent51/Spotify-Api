{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{BrowserRouter,Route,Switch}from\"react-router-dom\";import{LogoutButton}from\"../components/functions\";import Navbar from\"../components/Navbar\";import Home from\"./Home\";import TopTracks from\"./TopTracks\";import Moods from\"./Moods\";import RecentTracks from\"./RecentTracks\";import SpotifyPlayer from\"react-spotify-web-playback\";import{spotifyApi,token,getAccessToken}from\"../components/spotifyAPI\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Dashboard(){// TODO: This takes too many requests, remove for now\n/*const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 7000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);*/ //return should return, getTOPTRACKS, make playlist\n// DashBoard should tell us our favourite genre based on our top artist\nreturn/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/RecentTracks\",children:/*#__PURE__*/_jsx(RecentTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/logout\",children:/*#__PURE__*/_jsx(LogoutButton,{})}),/*#__PURE__*/_jsx(Route,{path:\"/TopTracks\",children:/*#__PURE__*/_jsx(TopTracks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/Moods\",children:/*#__PURE__*/_jsx(Moods,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",children:/*#__PURE__*/_jsx(Home,{})})]})]})});}// ****** NESTED ROUTING","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Switch","LogoutButton","Navbar","Home","TopTracks","Moods","RecentTracks","SpotifyPlayer","spotifyApi","token","getAccessToken","Dashboard"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,aAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,KAA6C,kBAA7C,CACA,OAASC,YAAT,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,UAAT,CAAqBC,KAArB,CAA4BC,cAA5B,KAAkD,0BAAlD,C,wFAEA,cAAe,SAASC,CAAAA,SAAT,EAAqB,CAClC;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBArBoC,CAuBlC;AACA;AAEA,mBACE,KAAC,aAAD,wBACE,oCACE,KAAC,MAAD,IADF,cAGE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,eAAZ,uBACE,KAAC,YAAD,IADF,EADF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,uBACE,KAAC,YAAD,IADF,EAJF,cAOE,KAAC,KAAD,EAAO,IAAI,CAAC,YAAZ,uBACE,KAAC,SAAD,IADF,EAPF,cAUE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,uBACE,KAAC,KAAD,IADF,EAVF,cAaE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,uBACE,KAAC,IAAD,IADF,EAbF,GAHF,GADF,EADF,CAuCD,CACD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport Navbar from \"../components/Navbar\";\nimport Home from \"./Home\";\nimport TopTracks from \"./TopTracks\";\nimport Moods from \"./Moods\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nexport default function Dashboard() {\n  // TODO: This takes too many requests, remove for now\n  /*const [isPlaying, setIsPlaying] = useState(false);\n// Note the spotify web player SDK is in beta so performance is janky\n\nuseEffect(() => {\n\tconst interval = setInterval( async () => {\n\tspotifyApi.getMyCurrentPlaybackState().then((response) => {\n\t\tif (response) {\n\t\tif (response.is_playing) {\n\t\t\tsetIsPlaying(true);\n\t\t}\n\t\t} else if (!response) {\n\t\tsetIsPlaying(false);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tgetAccessToken()\n\t});\n\t}, 7000);\n\treturn () => clearInterval(interval);\n}, [isPlaying]);*/\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <Navbar />\n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/Moods\">\n            <Moods />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        {/*isPlaying ? (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Playing</b>\n\t\t\t\t<SpotifyPlayer\n\t\t\t\ttoken={token}\n\t\t\t\tsyncExternalDevice={true}\n\t\t\t\tsyncExternalDeviceInterval={5}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<div className=\"player\">\n\t\t\t\t<b>Currently Not Playing Anything </b>\n\t\t\t</div>\n\t\t\t)*/}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}