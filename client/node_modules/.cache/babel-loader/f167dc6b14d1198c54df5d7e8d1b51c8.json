{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport { arraySplice, getplaylists, getAllSongs } from \"../components/UserSongs\";\nimport { Slider, Typography, Switch } from \"@material-ui/core\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Moods = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState(\"all\");\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async arraysplice => {\n    var Tracks = {\n      tracks: []\n    };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map(x => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  }; // get every songs form every playlist and every saved\n\n  /*const toggleTab = (index, moods) => {\n  console.log(audioFet);\n  if (moods != mood) {\n  \tsetTracks();\n  }\n  \tsetMood(moods);\n  setToggleState(index);\n  };*/\n\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async response => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n          // filter duplicates\n\n\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\"audio_features\", JSON.stringify(all_audio));\n        }\n\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (audioFet) {// TODO ADJUST THE FILTERS\n\n      /*\n      const audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n      console.log(audioFetFix);\n      if (mood == \"sad\") {\n      console.log(\":(\");\n      const FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n      console.log(FilteredSplice)\n      if (FilteredSplice) {\n      getTracksfromList(FilteredSplice)\n      } else {\n      alert(\"No matches\")\n      }\n      // SET TRACKS IN THIS LOGIC\n      } else if (mood == \"happy\") {\n      console.log(\":)\");\n      const FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n      if (FilteredSplice) {\n      getTracksfromList(FilteredSplice)\n      } else {\n      alert(\"No matches\")\n      }\n      } else if (mood == \"study\") {\n      console.log(\":/\");\n      const FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n      if (FilteredSplice) {\n      getTracksfromList(FilteredSplice)\n      } else {\n      alert(\"No matches\")\n      }\n      } else if (mood == \"gym (mad)\") {\n      const FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n      if (FilteredSplice) {\n      getTracksfromList(FilteredSplice)\n      } else {\n      alert(\"No matches\")\n      }\n      }*/\n    }\n  }, [mood, audioFet]);\n  const [value, setValue] = useState(0);\n  const [value1, setValue1] = useState(0);\n  const [value2, setValue2] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1);\n  };\n\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", \"Gather all your songs and find the perfect songs to match your current mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose source (in development)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Liked Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Only Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Everything\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Total Songs Discovered: \", audioFet ? audioFet.length : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"0\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Mood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            value: value,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Energy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            value: value1,\n            onChange: handleChange1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Groove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          value: value2,\n          onChange: handleChange2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Vocals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Fetching all Songs....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please do not refresh/leave the page while this is occuring.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Songs Found: \", tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.length\n        }, void 0, false) : 0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 19\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Sad songs :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 19\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Happy Songs :D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 19\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Study Songs :/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 4 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 19\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Gym Songs >:(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Fetching Audio Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 20\n      }, this) : null\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(Moods, \"9IzOzMXK+RGyXNL9h7BHdUHR/pk=\");\n\n_c = Moods;\nexport default Moods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moods\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","getAccessToken","arraySplice","getplaylists","getAllSongs","Slider","Typography","Switch","Moods","playlists","setPlaylists","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","tracks","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","length","c","getTracks","map","x","id","fetchData","all_songs","then","response","console","log","index","unique","Set","setItem","stringify","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","value","setValue","value1","setValue1","value2","setValue2","handleChange","event","newValue","handleChange1","newValue1","handleChange2","newValue2","track","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {\n  arraySplice,\n  getplaylists,\n  getAllSongs,\n} from \"../components/UserSongs\";\nimport { Slider, Typography, Switch } from \"@material-ui/core\";\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nconst Moods = () => {\n  const [playlists, setPlaylists] = useState(\"all\");\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async (arraysplice) => {\n    var Tracks = { tracks: [] };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n    setTracks(Tracks);\n  };\n\n  // get every songs form every playlist and every saved\n\n  /*const toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};*/\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          // filter duplicates\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n      /*\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}*/\n    }\n  }, [mood, audioFet]);\n  \n\n  const [value, setValue] = useState(0);\n  const [value1, setValue1] = useState(0);\n  const [value2, setValue2] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1);\n  };\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2);\n  };\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all your songs and find the perfect songs to match your current\n        mood\n      </h1>\n      <h2>Choose source (in development)</h2>\n      <button> Get All Liked Songs</button>\n      <button> Get All Playlists</button>\n      <button> Get Only Your Playlists</button>\n      <button> Get Everything</button>\n      <div>\n        {songs ? (\n          <div className=\"container\">\n            <h2>\n              Total Songs Discovered: {audioFet ? audioFet.length : <>0</>}\n            </h2>\n\n\t\t\t<div>\n            <Typography>Mood</Typography>\n\n            <Slider value={value} onChange={handleChange} />\n\t\t\t</div>\n\t\t\t<div>\n            <Typography>Energy</Typography>\n\t\t\t\n            <Slider value={value1} onChange={handleChange1} />\n\t\t\t</div>\n            <Typography>Groove</Typography>\n\n            <Slider value={value2} onChange={handleChange2} />\n\n\t\t\t<Typography>Vocals</Typography>\n\t\t\t<Switch></Switch>\n\t\t\t\n\n            {/*\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\n\t\t\t\t</div> \n\t\t\t\t*/}\n          </div>\n        ) : (\n          <>\n            <b>Fetching all Songs....</b>\n            <p>\n              Please do not refresh/leave the page while this is occuring.\n            </p>{\" \"}\n          </>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div className=\"content-tabs\">\n          <p>Songs Found: {tracks ? <>{tracks.tracks.length}</> : 0} </p>\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Sad songs :(</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 2 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Happy Songs :D</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 3 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Study Songs :/</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 4 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Gym Songs >:(</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <>{songs ? <b>Fetching Audio Data...</b> : null}</>\n      )}\n    </>\n  );\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}