{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\"; // LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconsole.log(spotifyApi.getUserPlaylists({\n  limit: 10,\n  offset: 0\n}));\nconsole.log(getplaylists([], 3, 0));\n\nconst Reccommendations = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState();\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {}, []); // neeed recursion of this logic\n  // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"ld9WpvuNbwB6ZcsUa7ik1I8x+Kc=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js"],"names":["React","useState","useEffect","spotifyApi","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","next","catch","console","log","Reccommendations","setPlaylists","allSongs","setAllSongs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,0BAA3C,C,CAGA;;;;AACA,MAAMC,YAAY,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoC;AACrD,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAJ;AACA,QAAMP,UAAU,CAACQ,gBAAX,CAA4B;AAC9BJ,IAAAA,KAAK,EAAEA,KADuB;AAE9BC,IAAAA,MAAM,EAAEA;AAFsB,GAA5B,EAGHI,IAHG,CAGGC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACC,KAA3B,CAAd;;AACA,UAAID,QAAQ,CAACE,IAAb,EAAmB;AACfL,QAAAA,WAAW,GAAGL,YAAY,CAACK,WAAD,EAAcH,KAAd,EAAqBE,SAArB,CAA1B;AACH;AACJ;AACJ,GAVK,EAUHO,KAVG,CAUG,MAAM;AACXZ,IAAAA,cAAc;AACjB,GAZK,CAAN;AAaA,SAAOM,WAAP;AACH,CAjBD;;AAmBAO,OAAO,CAACC,GAAR,CAAYf,UAAU,CAACQ,gBAAX,CAA4B;AACpCJ,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,MAAM,EAAE;AAF4B,CAA5B,CAAZ;AAKAS,OAAO,CAACC,GAAR,CAAYb,YAAY,CAAC,EAAD,EAAI,CAAJ,EAAM,CAAN,CAAxB;;AAGA,MAAMc,gBAAgB,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACb,SAAD,EAAYc,YAAZ,IAA4BnB,QAAQ,EAA1C;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,EAAxC;AAGAC,EAAAA,SAAS,CAAC,MAAM,CAGf,CAHQ,EAGN,EAHM,CAAT,CAN2B,CAY3B;AAGA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CApBD;;GAAMiB,gB;;KAAAA,gB;AAsBN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\n\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconsole.log(spotifyApi.getUserPlaylists({\n    limit: 10,\n    offset: 0,\n}))\n\nconsole.log(getplaylists([],3,0))\n\n\nconst Reccommendations = () => {\n\n    const [playlists, setPlaylists] = useState();\n    const [allSongs, setAllSongs] = useState()\n\n\n    useEffect(() => {\n\n    \n    }, []);\n\n    \n    // neeed recursion of this logic\n\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}