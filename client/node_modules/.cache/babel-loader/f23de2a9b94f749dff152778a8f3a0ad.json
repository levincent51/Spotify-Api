{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-node-react-starter-kit/client/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { getAccessToken } from './spotifyAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi();\n\nfunction App() {\n  _s();\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [nowPlaying, setNowPlaying] = useState({\n    name: window.localStorage.getItem('name'),\n    albumArt: window.localStorage.getItem('image')\n  });\n  const token = getAccessToken();\n  window.localStorage.clear();\n  useEffect(() => {\n    if (token) {\n      setLoggedIn(true);\n      spotifyApi.setAccessToken(token);\n    }\n  }, []);\n\n  const getNowPlaying = () => {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      if (response) {\n        setNowPlaying(prevState => ({ ...prevState,\n          name: response.item.name,\n          albumArt: response.item.album.images[0].url\n        }));\n        window.localStorage.setItem('name', response.item.name);\n        window.localStorage.setItem('image', response.item.album.images[0].url);\n      } else {\n        alert(\"YOU ARE not playing anything\");\n      }\n    });\n  }; // PLAN, USE THIS AS REFERENCE: https://github.com/aneeshnema/spotify-stats/blob/master/client/src/spotify/index.js\n  // BASICALLY create a component for storing all spotify api calls\n  // NEXT COMPONENT SHOULD BE REFRESHING TOKEN, IF a certain time has expired we must auto refresh\n  // calling back to server and getting new access token\n  // CHECK INDEX.html of our auth server for this and ALSO UPDATE OUR ACCESS TOKEN AFTER using setACCES\n  // OUR APP SHOULD RETURN \n  // return DASHBOARD OR LOGIN SCREEN\n  // our DASHBOARD SHOULD BE ALL THE INFO\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loggedIn ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Now Playing/Last Played: \", nowPlaying.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: nowPlaying.albumArt,\n          style: {\n            height: 150\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), loggedIn && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getNowPlaying(),\n        children: \"Check Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n/*\n\nclass App extends Component {\n  constructor(){\n    // this constructs object\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      // THIS IS THE OBJECT COMPONENTS, and their properties\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Not Checked', albumArt: '' }\n    }\n  }\n\n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying(){\n  \n    spotifyApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      if (response) {\n        this.setState({\n        nowPlaying: { \n            name: response.item.name, \n            albumArt: response.item.album.images[0].url\n          }\n        })\n      } else {\n\n        alert(\"YOU ARE not playing anything\")\n        return\n      }\n      ;\n    })\n    \n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <a href='http://localhost:8888' > Login to Spotify </a>\n        <div>\n          Now Playing: { this.state.nowPlaying.name }\n          Logged in: {this.state.loggedIn.toString()}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.albumArt} style={{ height: 150 }}/>\n        </div>\n        { this.state.loggedIn &&\n          <button onClick={() => this.getNowPlaying()}>\n            Check Now Playing\n          </button>\n        }\n      </div>\n    );\n  }\n}\n*/\n\n\n_s(App, \"0HNpFoeLnSxRzQyxC/5A9RgD2MM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-node-react-starter-kit/client/src/components/App.js"],"names":["React","Component","useState","useEffect","Login","SpotifyWebApi","getAccessToken","spotifyApi","App","loggedIn","setLoggedIn","nowPlaying","setNowPlaying","name","window","localStorage","getItem","albumArt","token","clear","setAccessToken","getNowPlaying","getMyCurrentPlaybackState","then","response","prevState","item","album","images","url","setItem","alert","height"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nimport { getAccessToken } from './spotifyAPI';\n\nconst spotifyApi = new SpotifyWebApi();\n\nfunction App() {\n  \n  const [loggedIn, setLoggedIn] = useState(false)\n  const [nowPlaying, setNowPlaying] = useState({ name: window.localStorage.getItem('name'), albumArt: window.localStorage.getItem('image')})\n\n  const token = getAccessToken()\n\n  window.localStorage.clear();\n\n  useEffect(() => {\n    if (token) {\n      setLoggedIn(true)\n      spotifyApi.setAccessToken(token)\n    }\n\n  },[])\n\n\n  const getNowPlaying = () => {\n    spotifyApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      if (response) {\n        setNowPlaying(prevState => ({\n          ...prevState,\n          name: response.item.name, \n          albumArt: response.item.album.images[0].url\n        }));   \n        window.localStorage.setItem('name',response.item.name)\n        window.localStorage.setItem('image',response.item.album.images[0].url)        \n      } else {\n\n        alert(\"YOU ARE not playing anything\")\n      }\n\n    })\n  }\n\n\n  // PLAN, USE THIS AS REFERENCE: https://github.com/aneeshnema/spotify-stats/blob/master/client/src/spotify/index.js\n  // BASICALLY create a component for storing all spotify api calls\n\n  // NEXT COMPONENT SHOULD BE REFRESHING TOKEN, IF a certain time has expired we must auto refresh\n  // calling back to server and getting new access token\n  // CHECK INDEX.html of our auth server for this and ALSO UPDATE OUR ACCESS TOKEN AFTER using setACCES\n\n\n\n  // OUR APP SHOULD RETURN \n  // return DASHBOARD OR LOGIN SCREEN\n  // our DASHBOARD SHOULD BE ALL THE INFO\n\n  return (\n    <div className=\"App\">\n      {loggedIn ? <h1>\n      <div>\n        Now Playing/Last Played: { nowPlaying.name }\n      </div>\n      <div>\n        <img src={nowPlaying.albumArt} style={{ height: 150 }}/>\n      </div>\n      { loggedIn &&\n        <button onClick={() => getNowPlaying()}>\n          Check Now Playing\n        </button>\n      } </h1> : \n      <Login />}\n      \n    </div>\n  )\n}\n\n/*\n\nclass App extends Component {\n  constructor(){\n    // this constructs object\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      // THIS IS THE OBJECT COMPONENTS, and their properties\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Not Checked', albumArt: '' }\n    }\n  }\n\n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying(){\n  \n    spotifyApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      if (response) {\n        this.setState({\n        nowPlaying: { \n            name: response.item.name, \n            albumArt: response.item.album.images[0].url\n          }\n        })\n      } else {\n\n        alert(\"YOU ARE not playing anything\")\n        return\n      }\n      ;\n    })\n    \n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <a href='http://localhost:8888' > Login to Spotify </a>\n        <div>\n          Now Playing: { this.state.nowPlaying.name }\n          Logged in: {this.state.loggedIn.toString()}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.albumArt} style={{ height: 150 }}/>\n        </div>\n        { this.state.loggedIn &&\n          <button onClick={() => this.getNowPlaying()}>\n            Check Now Playing\n          </button>\n        }\n      </div>\n    );\n  }\n}\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}