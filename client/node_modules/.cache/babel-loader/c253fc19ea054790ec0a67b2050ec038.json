{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n      /*if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n      } */\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n      /*if (response.next) {\n          newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n      } */\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = res => {\n  const c = getTrackfromPlaylist(res, [], 100, 0).then(response => {\n    if (response) {\n      return response.map(x => x.track); //response.map(x => x.track.id) \n    }\n  });\n  return c;\n};\n\nfunction arraySplice(array) {\n  var a = array;\n  var spliced = [];\n\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, 100)];\n    }\n  }\n\n  return spliced;\n}\n\nconst Reccommendations = () => {\n  _s();\n\n  const [finished, setFinished] = useState(false);\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [songs, setSongs] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      await getplaylists([], 50, 0).then(async response => {\n        var all_songs = [];\n\n        for (const index of response.map(x => x.id)) {\n          all_songs = [...all_songs, ...(await getAllSongs(index))];\n        } // instead of set state maybe import this from home\n\n\n        setAllSongs(all_songs);\n      });\n    } //setAllSongs(fetchData())\n\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (allSongs) {\n      var all_audio = [];\n      console.log(allSongs);\n      const allSongsSpliced = arraySplice(allSongs);\n      console.log(allSongsSpliced);\n\n      async function get(all_audio) {\n        for await (const index of allSongsSpliced) {\n          spotifyApi.getAudioFeaturesForTracks(index.map(x => x.id)).then(response => {\n            all_audio = [...all_audio, ...response.audio_features];\n          });\n        }\n      }\n\n      console.log(get(all_audio));\n      /*\n          for (const index of allSongs) {\n                  spotifyApi.getAudioFeaturesForTracks(index.map(x => x.id)).then(\n                  (response) => {\n                      all_audio.push(...response.audio_features) \n                      \n              })\n          }\n          console.log(all_audio)*/\n    }\n  }, [allSongs]);\n\n  if (audioFet) {\n    if (audioFet) console.log(audioFet);\n  }\n  /*\n  const Reccommendations = () => {\n  \n      const [sad, setSad] = useState()\n  \n      const [recco, setRecco] = useState()\n  \n      const [playlists, setPlaylists] = useState([]);\n      const [addSong, setAddSong] = useState()\n  \n      useEffect(() => {\n          getplaylists([],4,0).then(\n              (response) => {\n                  var all_songs = []\n                  response.map(x => x.id).forEach((res) => {\n                      getTrackfromPlaylist(res,[],4,0).then( (response) => {\n                          if (response) {\n                              all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                              setAddSong(all_songs)\n                          }\n                         \n                      })\n                  }) \n              })  \n          \n      }, []);\n  */\n\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n      console.log(2);\n    }\n  }, [allSongs]);\n  /* var a = YOUR_ARRAY;\n  while(a.length) {\n  console.log(a.splice(0,100));\n  }*/\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n  // AUDIO FEATURES HOOK\n  // Get Audio Features for several tracks max id is 100\n  // getting back our several tracks max id is 50\n  //console.log(playlists.map( x => x.id))\n  // neeed recursion of this logic\n\n  const [toggleState, setToggleState] = useState(1); // get every songs form every playlist and every saved \n\n  const changeTerm = newTimeRange => {};\n\n  const toggleTab = (index, time_range) => {\n    changeTerm(time_range);\n    setToggleState(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" Gather all the songs from all your playlists and find which songs statistically follow these moods \", audioFet ? audioFet.length : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bloc-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 1 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(1, \"short_term\"),\n            children: \"Sad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 2 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(2, \"medium_term\"),\n            children: \"Happy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 3 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(3, \"long_term\"),\n            children: \"Study\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"LOADING\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true)\n  /* {tracks.items.map((track, key) => (\n          <TrackInfo key={key} track={track}*/\n  ;\n};\n\n_s(Reccommendations, \"7FfKEV+MWV9j/qZY3cRYOHYZsQw=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getAllSongs","res","c","map","x","track","arraySplice","array","a","spliced","length","splice","Reccommendations","finished","setFinished","audioFet","setAudioFet","allSongs","setAllSongs","songs","setSongs","all_songs","index","id","all_audio","console","log","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","toggleState","setToggleState","changeTerm","newTimeRange","toggleTab","time_range"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,0BAAlD;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA,MAAMC,YAAY,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoC;AACrD,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAJ;AACA,QAAMT,UAAU,CAACU,gBAAX,CAA4B;AAC9BJ,IAAAA,KAAK,EAAEA,KADuB;AAE9BC,IAAAA,MAAM,EAAEA;AAFsB,GAA5B,EAGHI,IAHG,CAGGC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACC,KAA3B,CAAd;AACA;AACZ;AACA;AACS;AACJ,GAVK,EAUHC,KAVG,CAUG,MAAM;AACXZ,IAAAA,cAAc;AACjB,GAZK,CAAN;AAaA,SAAOO,WAAP;AACH,CAjBD;;AAmBA,MAAMM,oBAAoB,GAAG,OAAOC,UAAP,EAAmBC,MAAnB,EAA2BX,KAA3B,EAAkCC,MAAlC,KAA6C;AACtE,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIY,QAAJ;AACA,QAAMlB,UAAU,CAACmB,iBAAX,CACFlB,KADE,EAEFe,UAFE,EAGF;AAACV,IAAAA,KAAK,EAAEA,KAAR;AACAC,IAAAA,MAAM,EAAEA;AADR,GAHE,EAIgBI,IAJhB,CAIsBC,QAAD,IAAc;AACrC,QAAIA,QAAJ,EAAc;AACVM,MAAAA,QAAQ,GAAG,CAAC,GAAGD,MAAJ,EAAY,GAAGL,QAAQ,CAACC,KAAxB,CAAX;AACA;AACZ;AACA;AACS;AACJ,GAXK,CAAN;AAaA,SAAOK,QAAP,CAhBsE,CAgBtD;AACnB,CAjBD;;AAoBA,MAAME,WAAW,GAAIC,GAAD,IAAS;AACzB,QAAMC,CAAC,GAAGP,oBAAoB,CAACM,GAAD,EAAK,EAAL,EAAQ,GAAR,EAAY,CAAZ,CAApB,CAAmCV,IAAnC,CAA0CC,QAAD,IAAc;AAC7D,QAAIA,QAAJ,EAAc;AACV,aAAOA,QAAQ,CAACW,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACC,KAApB,CAAP,CADU,CAEV;AACH;AACJ,GALS,CAAV;AAOA,SAAOH,CAAP;AACH,CATD;;AAWA,SAASI,WAAT,CAAqBC,KAArB,EAA4B;AACxB,MAAIC,CAAC,GAAGD,KAAR;AACA,MAAIE,OAAO,GAAG,EAAd;;AACA,MAAIF,KAAJ,EAAW;AACP,WAAOC,CAAC,CAACE,MAAT,EAAiB;AACbD,MAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaD,CAAC,CAACG,MAAF,CAAS,CAAT,EAAW,GAAX,CAAb,CAAV;AACH;AAEJ;;AACD,SAAOF,OAAP;AAEH;;AAID,MAAMG,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACqC,QAAD,EAAWC,WAAX,IAA0BtC,QAAQ,EAAxC;AACA,QAAM,CAACuC,QAAD,EAAWC,WAAX,IAA0BxC,QAAQ,EAAxC;AACA,QAAM,CAACyC,KAAD,EAAQC,QAAR,IAAoB1C,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeI,SAAf,GAA2B;AACvB,YAAMC,YAAY,CAAC,EAAD,EAAI,EAAJ,EAAO,CAAP,CAAZ,CAAsBO,IAAtB,CACF,MAAOC,QAAP,IAAoB;AAChB,YAAI6B,SAAS,GAAG,EAAhB;;AACA,aAAK,MAAMC,KAAX,IAAoB9B,QAAQ,CAACW,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACmB,EAApB,CAApB,EAA6C;AACzCF,UAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe,IAAG,MAAMrB,WAAW,CAACsB,KAAD,CAApB,CAAf,CAAZ;AACH,SAJe,CAKhB;;;AACAJ,QAAAA,WAAW,CAACG,SAAD,CAAX;AACP,OARK,CAAN;AASH,KAXW,CAYZ;;;AACAtC,IAAAA,SAAS;AAEZ,GAfQ,EAeN,EAfM,CAAT;AAmBAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsC,QAAJ,EAAc;AACV,UAAIO,SAAS,GAAG,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,YAAMU,eAAe,GAAGrB,WAAW,CAACW,QAAD,CAAnC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYC,eAAZ;;AACA,qBAAeC,GAAf,CAAmBJ,SAAnB,EAA8B;AAC1B,mBAAW,MAAMF,KAAjB,IAA0BK,eAA1B,EAA2C;AACvC/C,UAAAA,UAAU,CAACiD,yBAAX,CAAqCP,KAAK,CAACnB,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACmB,EAAjB,CAArC,EAA2DhC,IAA3D,CACKC,QAAD,IAAc;AACVgC,YAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe,GAAGhC,QAAQ,CAACsC,cAA3B,CAAZ;AACX,WAHG;AAIP;AAAC;;AAEFL,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACJ,SAAD,CAAf;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEa;AACR,GA1BQ,EA0BN,CAACP,QAAD,CA1BM,CAAT;;AA+BA,MAAIF,QAAJ,EAAc;AACV,QAAIA,QAAJ,EACAU,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEH;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGsC,QAAH,EAAa;AACTG,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACH;AAEJ,GANQ,EAMN,CAACT,QAAD,CANM,CAAT;AAUA;AACJ;AACA;AACA;AAEI;AAGA;AAKA;AACA;AAEA;AAKA;;AAEA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCtD,QAAQ,CAAC,CAAD,CAA9C,CA3H2B,CA4H3B;;AAEA,QAAMuD,UAAU,GAAIC,YAAD,IAAkB,CACpC,CADD;;AAGA,QAAMC,SAAS,GAAG,CAACb,KAAD,EAAQc,UAAR,KAAuB;AACrCH,IAAAA,UAAU,CAACG,UAAD,CAAV;AACAJ,IAAAA,cAAc,CAACV,KAAD,CAAd;AACH,GAHD;;AAKA,sBACI;AAAA,4BACA;AAAA,yHACoBP,QAAQ,GAAEA,QAAQ,CAACL,MAAX,GAAoB,IADhD;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIA;AAAA,gBAAMS,KAAK,gBACP;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BAEA;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AACE,YAAA,SAAS,EAAEY,WAAW,KAAK,CAAhB,GAAoB,kBAApB,GAAyC,MADtD;AAEE,YAAA,OAAO,EAAE,MAAMI,SAAS,CAAC,CAAD,EAAI,YAAJ,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AACE,YAAA,SAAS,EAAEJ,WAAW,KAAK,CAAhB,GAAoB,kBAApB,GAAyC,MADtD;AAEE,YAAA,OAAO,EAAE,MAAMI,SAAS,CAAC,CAAD,EAAI,aAAJ,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,eAaE;AACE,YAAA,SAAS,EAAEJ,WAAW,KAAK,CAAhB,GAAoB,kBAApB,GAAyC,MADtD;AAEE,YAAA,OAAO,EAAE,MAAMI,SAAS,CAAC,CAAD,EAAI,WAAJ,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,cADO,gBAwBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxBL;AAAA;AAAA;AAAA;AAAA,YAJA,EA+BCpB,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AACE,QAAA,SAAS,EACPgB,WAAW,KAAK,CAAhB,GAAoB,yBAApB,GAAgD,SAFpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AACE,QAAA,SAAS,EACPA,WAAW,KAAK,CAAhB,GAAoB,yBAApB,GAAgD,SAFpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAeE;AACE,QAAA,SAAS,EACPA,WAAW,KAAK,CAAhB,GAAoB,yBAApB,GAAgD,SAFpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBA0BP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzDF;AAAA;AA4DA;AACR;AA9DI;AAgEH,CAtMD;;GAAMnB,gB;;KAAAA,gB;AAwMN,eAAeA,gBAAf","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            /*if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } */\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            /*if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } */\n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\n\nconst getAllSongs = (res) => {\n    const c = getTrackfromPlaylist(res,[],100,0).then( (response) => {\n        if (response) { \n            return response.map(x => x.track)\n            //response.map(x => x.track.id) \n        }\n    })\n\n    return c\n}\n\nfunction arraySplice(array) {\n    var a = array\n    var spliced = []\n    if (array) {\n        while (a.length) {\n            spliced = [...spliced, a.splice(0,100)]\n        }\n\n    }\n    return spliced\n\n}\n\n\n\nconst Reccommendations = () => {\n    const [finished, setFinished] = useState(false)\n    const [audioFet, setAudioFet] = useState()\n    const [allSongs, setAllSongs] = useState()\n    const [songs, setSongs] = useState()\n\n    useEffect(() => {\n        async function fetchData() {\n            await getplaylists([],50,0).then(\n                async (response) => {\n                    var all_songs = []\n                    for (const index of response.map(x => x.id)) {\n                        all_songs = [...all_songs, ...await getAllSongs(index)]\n                    }\n                    // instead of set state maybe import this from home\n                    setAllSongs(all_songs)\n            })  \n        }\n        //setAllSongs(fetchData())\n        fetchData()\n\n    }, []);\n\n\n\n    useEffect(() => {\n        if (allSongs) {\n            var all_audio = []\n            console.log(allSongs)\n            const allSongsSpliced = arraySplice(allSongs)\n            console.log(allSongsSpliced)\n            async function get(all_audio) {\n                for await (const index of allSongsSpliced) {\n                    spotifyApi.getAudioFeaturesForTracks(index.map(x => x.id)).then(\n                        (response) => {\n                            all_audio = [...all_audio, ...response.audio_features ]\n                })\n            }}\n      \n            console.log(get(all_audio))\n            /*\n                for (const index of allSongs) {\n                        spotifyApi.getAudioFeaturesForTracks(index.map(x => x.id)).then(\n                        (response) => {\n                            all_audio.push(...response.audio_features) \n                            \n                    })\n                }\n                console.log(all_audio)*/\n\n            }\n    }, [allSongs])\n\n\n\n\n    if (audioFet) {\n        if (audioFet)\n        console.log(audioFet)\n\n    }\n\n\n/*\nconst Reccommendations = () => {\n\n    const [sad, setSad] = useState()\n\n    const [recco, setRecco] = useState()\n\n    const [playlists, setPlaylists] = useState([]);\n    const [addSong, setAddSong] = useState()\n\n    useEffect(() => {\n        getplaylists([],4,0).then(\n            (response) => {\n                var all_songs = []\n                response.map(x => x.id).forEach((res) => {\n                    getTrackfromPlaylist(res,[],4,0).then( (response) => {\n                        if (response) {\n                            all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                            setAddSong(all_songs)\n                        }\n                       \n                    })\n                }) \n            })  \n        \n    }, []);\n*/\n    useEffect(() => {\n        if(allSongs) {\n            setSongs(1)\n            console.log(2)\n        }\n\n    }, [allSongs])\n\n\n\n    /* var a = YOUR_ARRAY;\nwhile(a.length) {\n    console.log(a.splice(0,100));\n\n}*/\n    // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n    \n    // AUDIO FEATURES HOOK\n \n    \n\n\n    // Get Audio Features for several tracks max id is 100\n    // getting back our several tracks max id is 50\n\n    //console.log(playlists.map( x => x.id))\n \n\n\n\n    // neeed recursion of this logic\n\n    const [toggleState, setToggleState] = useState(1);\n    // get every songs form every playlist and every saved \n    \n    const changeTerm = (newTimeRange) => {\n    };\n\n    const toggleTab = (index, time_range) => {\n        changeTerm(time_range);\n        setToggleState(index);\n    };\n\n    return (\n        <>\n        <h1> Gather all the songs from all your playlists and find which songs statistically \n        follow these moods {audioFet? audioFet.length : null}\n        </h1>\n        <div>{songs ? (\n            <div className=\"container\">\n\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"short_term\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"medium_term\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"long_term\")}\n              >\n                Study\n              </button>\n            </div>\n            </div>\n        ) : (<b>loading</b>)}</div>\n\n\n        {audioFet ? (\n          <div className=\"content-tabs\">\n            <div\n              className={\n                toggleState === 1 ? \"content  active-content\" : \"content\"\n              }\n            >\n                1\n            </div>\n            <div\n              className={\n                toggleState === 2 ? \"content  active-content\" : \"content\"\n              }\n            >\n                2\n            </div>\n            <div\n              className={\n                toggleState === 3 ? \"content  active-content\" : \"content\"\n              }\n            >\n                3\n            </div>\n          </div>\n        ) : (\n\n          <b>LOADING</b>\n        )}\n        </>\n        /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}