{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n\n  // THIS IS the get recentlyplayed component\n  const [RecentlyPlayed, setRecentlyPlayed] = useState(); // variable limit? with useeffect to load more\n\n  const getRecentlyPlayed = () => {\n    spotifyApi.getMyTopTracks({\n      limit: 20\n    }).then(response => {\n      if (response) {\n        console.log(response);\n      }\n    });\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 20\n    }).then(response => {\n      if (response) {\n        console.log(response);\n        setRecentlyPlayed({\n          items: response.items\n        });\n        /*\n        window.localStorage.setItem('name',response.item.name)\n        window.localStorage.setItem('image',response.item.album.images[0].url)     */\n      } else {\n        alert(\"You are not playing anything\");\n      }\n    });\n  };\n\n  console.log(RecentlyPlayed); //return should return, getTOPTRACKS, make playlist\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Recently Played: \", RecentlyPlayed ? RecentlyPlayed.items.map(item => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item.track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 95\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 91\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 131\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getRecentlyPlayed(),\n        children: \"Check Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => logout(),\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Dashboard, \"x3r9HkRfGLrYHGg9ZEFdIAV/nFU=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-node-react-starter-kit/client/src/Pages/Dashboard.js"],"names":["React","Component","useState","useEffect","SpotifyWebApi","logout","spotifyApi","Dashboard","RecentlyPlayed","setRecentlyPlayed","getRecentlyPlayed","getMyTopTracks","limit","then","response","console","log","getMyRecentlyPlayedTracks","items","alert","map","item","track","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAGhC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,EAApD,CAJgC,CAQhC;;AACA,QAAMQ,iBAAiB,GAAG,MAAM;AAE9BJ,IAAAA,UAAU,CAACK,cAAX,CAA0B;AACtBC,MAAAA,KAAK,EAAE;AADe,KAA1B,EAEGC,IAFH,CAESC,QAAD,IAAc;AACpB,UAAIA,QAAJ,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD;AACF,KAND;AAQAR,IAAAA,UAAU,CAACW,yBAAX,CAAqC;AACnCL,MAAAA,KAAK,EAAG;AAD2B,KAArC,EAEGC,IAFH,CAESC,QAAD,IAAc;AACpB,UAAIA,QAAJ,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAL,QAAAA,iBAAiB,CAAE;AAEjBS,UAAAA,KAAK,EAAEJ,QAAQ,CAACI;AAFC,SAAF,CAAjB;AAIA;AACV;AACA;AACS,OATD,MASO;AAELC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;AAEF,KAjBD;AAkBD,GA5BD;;AA8BAJ,EAAAA,OAAO,CAACC,GAAR,CAAYR,cAAZ,EAvCgC,CA4C5B;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACI;AAAA,8BACA;AAAA,wCACwBA,cAAc,GAAGA,cAAc,CAACU,KAAf,CAAqBE,GAArB,CAAyBC,IAAI,iBAAI;AAAA,iCAAI;AAAA,sBAAKA,IAAI,CAACC,KAAL,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAAjC,CAAH,gBAA4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADlH;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAIA;AAAA;AAAA;AAAA;AAAA,cAJA,eAOI;AAAQ,QAAA,OAAO,EAAE,MAAMb,iBAAiB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAUA;AAAQ,QAAA,OAAO,EAAE,MAAML,MAAM,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBP;;GA/DuBE,S;;KAAAA,S","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { logout } from '../components/functions';\nimport { spotifyApi } from '../components/spotifyAPI';\n\nexport default function Dashboard() {\n\n\n    // THIS IS the get recentlyplayed component\n    const [RecentlyPlayed, setRecentlyPlayed] = useState()\n\n\n\n    // variable limit? with useeffect to load more\n    const getRecentlyPlayed = () => {\n\n      spotifyApi.getMyTopTracks({\n          limit: 20\n      }).then((response) => {\n        if (response) {\n          console.log(response)\n        }\n      })\n\n      spotifyApi.getMyRecentlyPlayedTracks({\n        limit : 20\n      }).then((response) => {\n        if (response) {\n          console.log(response)\n          setRecentlyPlayed( {\n\n            items: response.items\n          });   \n          /*\n          window.localStorage.setItem('name',response.item.name)\n          window.localStorage.setItem('image',response.item.album.images[0].url)     */   \n        } else {\n\n          alert(\"You are not playing anything\")\n        }\n\n      })\n    }\n\n    console.log(RecentlyPlayed)\n\n\n\n\n        //return should return, getTOPTRACKS, make playlist\n        return (\n            <div className=\"Dashboard\">\n                <h1>\n                <div>\n                    Recently Played: {  RecentlyPlayed ? RecentlyPlayed.items.map(item => <ul><li>{item.track.name}</li></ul>) :  <li>loading</li>}\n                </div>\n                <div>\n                    {/*<img src={RecentlyPlayed.albumArt} style={{ height: 150 }}/>*/}\n                </div>\n                    <button onClick={() => getRecentlyPlayed()}>\n                    Check Now Playing\n                    </button>\n                <button onClick={() => logout()}>\n                    Log Out\n                </button> \n                </h1>\n            </div>\n        )\n}\n"]},"metadata":{},"sourceType":"module"}