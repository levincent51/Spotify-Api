{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport { arraySplice, getplaylists, getAllSongs } from \"../components/UserSongs\";\nimport { Slider, Typography, Switch, CircularProgress } from \"@material-ui/core\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Moods = () => {\n  _s();\n\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const totalSongs = React.useRef(0);\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async arraysplice => {\n    var Tracks = {\n      tracks: []\n    };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map(x => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async response => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n          // filter duplicates\n\n\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n          totalSongs.current = unique.length;\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n      totalSongs.current = trackstorage.length;\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          const audioWithFeat = all_audio.filter(x => x); // filter out songs without features\n\n          setAudioFet(audioWithFeat);\n          window.sessionStorage.setItem(\"audio_features\", JSON.stringify(all_audio));\n        }\n\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  const [value, setValue] = useState(0.5);\n  const [value1, setValue1] = useState(0.5);\n  const [value2, setValue2] = useState(0.5);\n  const [vocal, setVocal] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue / 100);\n  };\n\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1 / 100);\n  };\n\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2 / 100);\n  };\n\n  const handleVocal = () => {\n    setVocal(!vocal);\n  };\n\n  const filterReq = useCallback(async () => {\n    setTracks();\n    const filter = audioFet.filter(x => x.valence >= value - 0.2 && x.valence <= value + 0.2 && x.energy >= value1 - 0.2 && x.energy <= value1 + 0.2 && x.danceability >= value2 - 0.2 && x.danceability <= value2 + 0.2);\n    var filter2;\n\n    if (vocal) {\n      filter2 = filter.filter(x => x.instrumentalness <= 0.4);\n      console.log(filter2);\n    } else {\n      filter2 = filter.filter(x => x.instrumentalness >= 0.8);\n      console.log(filter2);\n    }\n\n    const FilteredSplice = arraySplice(filter2, 50);\n    console.log(FilteredSplice);\n    getTracksfromList(FilteredSplice);\n  });\n  console.log(tracks);\n  const marksValence = [{\n    value: 0,\n    label: 'sad'\n  }, {\n    value: 50,\n    label: 'neutral'\n  }, {\n    value: 100,\n    label: 'happy'\n  }];\n  const marksEnergy = [{\n    value: 0,\n    label: 'chill'\n  }, {\n    value: 50,\n    label: 'neutral'\n  }, {\n    value: 100,\n    label: 'hype'\n  }];\n  const marksDance = [{\n    value: 0,\n    label: 'calm'\n  }, {\n    value: 50,\n    label: 'neutral'\n  }, {\n    value: 100,\n    label: 'dance!'\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", \"Gather all your songs and find the perfect songs to match your current mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose source (in development)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Liked Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Only Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Everything\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Total Songs Discovered: \", totalSongs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sliders\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Mood\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: value * 100,\n              onChange: handleChange,\n              \"aria-labelledby\": \"discrete-slider-small-steps\",\n              marks: marksValence,\n              min: 0,\n              max: 100,\n              valueLabelDisplay: \"auto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Energy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: value1 * 100,\n              onChange: handleChange1,\n              \"aria-labelledby\": \"discrete-slider-small-steps\",\n              marks: marksEnergy,\n              min: 0,\n              max: 100,\n              valueLabelDisplay: \"auto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Groove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: value2 * 100,\n              onChange: handleChange2,\n              \"aria-labelledby\": \"discrete-slider-small-steps\",\n              marks: marksDance,\n              min: 0,\n              max: 100,\n              valueLabelDisplay: \"auto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Vocals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Switch, {\n              onChange: handleVocal,\n              label: \"Vocals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Fetching all Songs....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please do not refresh/leave the page while this is occuring.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Songs Found: \", tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.length\n        }, void 0, false) : 0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: filterReq,\n          children: \"Find Songs!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 5\n      }, this), tracks ? tracks.tracks.length ? tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n        track: track,\n        index: tracks.tracks.indexOf(track)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 19\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"no songs \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button to find your songs!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: songs ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Fetching Audio Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 22\n        }, this), \" \", /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(Moods, \"r2jN64gEEgM4U+fj19qx+abB9CY=\");\n\n_c = Moods;\nexport default Moods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moods\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","useCallback","spotifyApi","getAccessToken","arraySplice","getplaylists","getAllSongs","Slider","Typography","Switch","CircularProgress","Moods","audioFet","setAudioFet","allSongs","setAllSongs","totalSongs","useRef","songs","setSongs","tracks","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","length","c","getTracks","map","x","id","fetchData","all_songs","then","response","console","log","index","unique","Set","setItem","stringify","current","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","audioWithFeat","filter","value","setValue","value1","setValue1","value2","setValue2","vocal","setVocal","handleChange","event","newValue","handleChange1","newValue1","handleChange2","newValue2","handleVocal","filterReq","valence","energy","danceability","filter2","instrumentalness","FilteredSplice","marksValence","label","marksEnergy","marksDance","track","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {\n  arraySplice,\n  getplaylists,\n  getAllSongs,\n} from \"../components/UserSongs\";\nimport { Slider, Typography, Switch, CircularProgress } from \"@material-ui/core\";\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n\n\nconst Moods = () => {\n\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const totalSongs = React.useRef(0);\n\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n\n  const getTracksfromList = async (arraysplice) => {\n    var Tracks = { tracks: [] };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          // filter duplicates\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n          totalSongs.current = unique.length\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n      totalSongs.current = trackstorage.length\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\t\t  const audioWithFeat = all_audio.filter(x => x); // filter out songs without features\n          setAudioFet(audioWithFeat);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n\n\n  const [value, setValue] = useState(0.5);\n  const [value1, setValue1] = useState(0.5);\n  const [value2, setValue2] = useState(0.5);\n  const [vocal, setVocal] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue/100);\n  };\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1/100);\n  };\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2/100);\n  };\n  const handleVocal = () => {\n    setVocal(!vocal);\n  };\n\n\n\n  const filterReq = useCallback( async () => {\n      setTracks();\n\n      const filter = audioFet.filter((x) => \n      x.valence >= (value - 0.2) && x.valence <= (value + 0.2) &&\n      x.energy >= (value1 - 0.2) && x.energy <= (value1 + 0.2) &&\n      x.danceability >= (value2 - 0.2) && x.danceability <= (value2 + 0.2) \n      )\n      var filter2;\n      if (vocal) {\n        filter2 = filter.filter((x) => x.instrumentalness <= 0.4)\n\n        console.log(filter2)\n      } else {\n        filter2 = filter.filter((x) => x.instrumentalness >= 0.8)\n        console.log(filter2)\n      }\n\n      const FilteredSplice = arraySplice(filter2,50)\n      console.log(FilteredSplice)\n      getTracksfromList(FilteredSplice)\n\n  })\n  console.log(tracks)\n\n\n  const marksValence = [\n    {\n      value: 0,\n      label: 'sad',\n    },\n    {\n      value: 50,\n      label: 'neutral',\n    },\n    {\n      value: 100,\n      label: 'happy',\n    },\n  ];\n\n  const marksEnergy = [\n    {\n      value: 0,\n      label: 'chill',\n    },\n    {\n      value: 50,\n      label: 'neutral',\n    },\n    {\n      value: 100,\n      label: 'hype',\n    },\n  ];\n\n  const marksDance = [\n    {\n      value: 0,\n      label: 'calm',\n    },\n    {\n      value: 50,\n      label: 'neutral',\n    },\n    {\n      value: 100,\n      label: 'dance!',\n    },\n  ];\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all your songs and find the perfect songs to match your current\n        mood\n      </h1>\n      <h2>Choose source (in development)</h2>\n      <button> Get All Liked Songs</button>\n      <button> Get All Playlists</button>\n      <button> Get Only Your Playlists</button>\n      <button> Get Everything</button>\n      <div>\n        {songs ? ( <div className=\"container\">\n            <h2>\n              Total Songs Discovered: {totalSongs}\n            </h2>\n          <div className='sliders'>\n            <div>\n              <Typography>Mood</Typography>\n\n              <Slider\n                value={value *100}\n                onChange={handleChange}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                marks={marksValence}\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Energy</Typography>\n\n              <Slider\n                value={value1 *100}\n                onChange={handleChange1}\n                aria-labelledby=\"discrete-slider-small-steps\"\n\n                marks={marksEnergy}\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Groove</Typography>\n\n              <Slider\n                value={value2 *100}\n                onChange={handleChange2}\n                aria-labelledby=\"discrete-slider-small-steps\"\n \n                marks={marksDance}\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n              <div>\n                  <Typography>Vocals</Typography>\n                  <Switch onChange={handleVocal} label=\"Vocals\" />\n              </div>\n          </div>\n        </div>\n        ) : (\n          <>\n            <b>Fetching all Songs....</b>\n            <CircularProgress/>\n            <p>\n              Please do not refresh/leave the page while this is occuring.\n            </p>{\" \"}\n          </>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div >\n          <p>Songs Found: {tracks ? <>{tracks.tracks.length}</> : 0} </p>\n\t\t  <div>\n\t\t\t<button onClick={filterReq}>Find Songs!</button>\n\t\t\t</div>\n            {tracks ? (\n    \n              tracks.tracks.length ? (\n                tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))) : (<p>no songs </p>)\n            \n            ) : (\n              <p>Click the button to find your songs!</p>\n            )}\n        </div>\n      ) : (\n        <>{songs ? <><b>Fetching Audio Data...</b> <CircularProgress/></>: null}</>\n      )}\n    </>\n  );\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}