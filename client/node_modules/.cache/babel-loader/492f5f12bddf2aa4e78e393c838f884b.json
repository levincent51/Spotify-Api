{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncIterator from\"/Users/macuser/project/spotify-api-project/client/node_modules/@babel/runtime/helpers/esm/asyncIterator\";import TrackInfo from\"../components/TrackInfo\";import React,{useState,useEffect,useCallback}from\"react\";import{spotifyApi,getAccessToken}from\"../components/spotifyAPI\";import{arraySplice,getplaylists,getAllSongs,getTrackfromPlaylist}from\"../components/UserSongs\";import{Slider,Typography,Switch,CircularProgress}from\"@material-ui/core\";// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Moods=function Moods(){var _useState=useState(\"all\"),_useState2=_slicedToArray(_useState,2),playlists=_useState2[0],setPlaylists=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),audioFet=_useState4[0],setAudioFet=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),allSongs=_useState6[0],setAllSongs=_useState6[1];var _useState7=useState(1),_useState8=_slicedToArray(_useState7,2),toggleState=_useState8[0],setToggleState=_useState8[1];var _useState9=useState(\"sad\"),_useState10=_slicedToArray(_useState9,2),mood=_useState10[0],setMood=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),songs=_useState12[0],setSongs=_useState12[1];var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),tracks=_useState14[0],setTracks=_useState14[1];var audio_feat=JSON.parse(window.sessionStorage.getItem(\"audio_features\"));var trackstorage=JSON.parse(window.sessionStorage.getItem(\"tracks\"));var getTracksfromList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(arraysplice){var Tracks,i,c;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:Tracks={tracks:[]};i=0;case 2:if(!(i<arraysplice.length)){_context.next=10;break;}_context.next=5;return spotifyApi.getTracks(arraysplice[i].map(function(x){return x.id;}));case 5:c=_context.sent;Tracks.tracks=[].concat(_toConsumableArray(Tracks.tracks),_toConsumableArray(c.tracks));case 7:i++;_context.next=2;break;case 10:setTracks(Tracks);case 11:case\"end\":return _context.stop();}}},_callee);}));return function getTracksfromList(_x){return _ref.apply(this,arguments);};}();// get every songs form every playlist and every saved\n/*const toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};*/useEffect(function(){if(!trackstorage){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var all_songs;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:all_songs=[];_context3.next=3;return getplaylists([],50,0).then(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response){var _iteratorAbruptCompletion,_didIteratorError,_iteratorError,_iterator,_step,index,unique;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"Fetching all songs...\");_iteratorAbruptCompletion=false;_didIteratorError=false;_context2.prev=3;_iterator=_asyncIterator(response.map(function(x){return x.id;}));case 5:_context2.next=7;return _iterator.next();case 7:if(!(_iteratorAbruptCompletion=!(_step=_context2.sent).done)){_context2.next=20;break;}index=_step.value;_context2.t0=[];_context2.t1=_toConsumableArray(all_songs);_context2.t2=_toConsumableArray;_context2.next=14;return getAllSongs(index);case 14:_context2.t3=_context2.sent;_context2.t4=(0,_context2.t2)(_context2.t3);all_songs=_context2.t0.concat.call(_context2.t0,_context2.t1,_context2.t4);case 17:_iteratorAbruptCompletion=false;_context2.next=5;break;case 20:_context2.next=26;break;case 22:_context2.prev=22;_context2.t5=_context2[\"catch\"](3);_didIteratorError=true;_iteratorError=_context2.t5;case 26:_context2.prev=26;_context2.prev=27;if(!(_iteratorAbruptCompletion&&_iterator.return!=null)){_context2.next=31;break;}_context2.next=31;return _iterator.return();case 31:_context2.prev=31;if(!_didIteratorError){_context2.next=34;break;}throw _iteratorError;case 34:return _context2.finish(31);case 35:return _context2.finish(26);case 36:// instead of set state maybe import this from home\n// filter duplicates\nunique=_toConsumableArray(new Set(all_songs));setAllSongs(unique);window.sessionStorage.setItem(\"tracks\",JSON.stringify(all_songs));case 39:case\"end\":return _context2.stop();}}},_callee2,null,[[3,22,26,36],[27,,31,35]]);}));return function(_x2){return _ref3.apply(this,arguments);};}());case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();}else{console.log(\"Fetching all songs...\");setAllSongs(trackstorage);}},[]);//console.log(allSongs)\nuseEffect(function(){//console.log(allSongs)\nif(!audio_feat){if(allSongs){var get=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(all_audio){var _iterator2,_step2,index,c,audioWithFeat;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_iterator2=_createForOfIteratorHelper(allSongsSpliced);_context4.prev=1;_iterator2.s();case 3:if((_step2=_iterator2.n()).done){_context4.next=11;break;}index=_step2.value;_context4.next=7;return spotifyApi.getAudioFeaturesForTracks(index);case 7:c=_context4.sent;all_audio=[].concat(_toConsumableArray(all_audio),_toConsumableArray(c.audio_features));case 9:_context4.next=3;break;case 11:_context4.next=16;break;case 13:_context4.prev=13;_context4.t0=_context4[\"catch\"](1);_iterator2.e(_context4.t0);case 16:_context4.prev=16;_iterator2.f();return _context4.finish(16);case 19:audioWithFeat=all_audio.filter(function(x){return x;});// filter out songs without features\nsetAudioFet(audioWithFeat);window.sessionStorage.setItem(\"audio_features\",JSON.stringify(all_audio));case 22:case\"end\":return _context4.stop();}}},_callee4,null,[[1,13,16,19]]);}));return function get(_x3){return _ref4.apply(this,arguments);};}();var all_audio=[];var allSongsSpliced=arraySplice(allSongs,100);console.log(\"Fetching audio data...\");get(all_audio);}}else{console.log(\"Fetching audio data...\");setAudioFet(audio_feat);}},[allSongs]);useEffect(function(){if(allSongs){setSongs(1);}},[allSongs]);useEffect(function(){if(audioFet){// TODO ADJUST THE FILTERS\n/*\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}*/}},[mood,audioFet]);var _useState15=useState(0.5),_useState16=_slicedToArray(_useState15,2),value=_useState16[0],setValue=_useState16[1];var _useState17=useState(0.5),_useState18=_slicedToArray(_useState17,2),value1=_useState18[0],setValue1=_useState18[1];var _useState19=useState(0.5),_useState20=_slicedToArray(_useState19,2),value2=_useState20[0],setValue2=_useState20[1];var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),vocal=_useState22[0],setVocal=_useState22[1];var handleChange=function handleChange(event,newValue){setValue(newValue/100);};var handleChange1=function handleChange1(event,newValue1){setValue1(newValue1/100);};var handleChange2=function handleChange2(event,newValue2){setValue2(newValue2/100);};var handleVocal=function handleVocal(){setVocal(!vocal);};var filterReq=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var filter,filter2,FilteredSplice;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:console.log(\"mood\",value);console.log(\"energy\",value1);console.log(\"groove\",value2);console.log(\"vocal\",vocal);filter=audioFet.filter(function(x){return x.valence>=value-0.15&&x.valence<=value+0.15&&x.energy>=value1-0.15&&x.energy<=value1+0.15&&x.danceability>=value2-0.15&&x.danceability<=value2+0.15;});if(vocal){filter2=filter.filter(function(x){return x.instrumentalness<=0.4;});console.log(filter2);}else{filter2=filter.filter(function(x){return x.instrumentalness>=0.8;});console.log(filter2);}FilteredSplice=arraySplice(filter2,50);console.log(FilteredSplice);getTracksfromList(FilteredSplice);case 9:case\"end\":return _context5.stop();}}},_callee5);})));console.log(tracks);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\" \",\"Gather all your songs and find the perfect songs to match your current mood\"]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Choose source (in development)\"}),/*#__PURE__*/_jsx(\"button\",{children:\" Get All Liked Songs\"}),/*#__PURE__*/_jsx(\"button\",{children:\" Get All Playlists\"}),/*#__PURE__*/_jsx(\"button\",{children:\" Get Only Your Playlists\"}),/*#__PURE__*/_jsx(\"button\",{children:\" Get Everything\"}),/*#__PURE__*/_jsx(\"div\",{children:songs?/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Total Songs Discovered: \",audioFet?audioFet.length:/*#__PURE__*/_jsx(_Fragment,{children:\"0\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{children:\"Mood\"}),/*#__PURE__*/_jsx(Slider,{value:value*100,onChange:handleChange,\"aria-labelledby\":\"discrete-slider-small-steps\",step:10,marks:true,min:0,max:100,valueLabelDisplay:\"auto\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{children:\"Energy\"}),/*#__PURE__*/_jsx(Slider,{value:value1*100,onChange:handleChange1,\"aria-labelledby\":\"discrete-slider-small-steps\",step:10,marks:true,min:0,max:100,valueLabelDisplay:\"auto\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{children:\"Groove\"}),/*#__PURE__*/_jsx(Slider,{value:value2*100,onChange:handleChange2,\"aria-labelledby\":\"discrete-slider-small-steps\",step:10,marks:true,min:0,max:100,valueLabelDisplay:\"auto\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{children:\"Vocals\"}),/*#__PURE__*/_jsx(Switch,{onChange:handleVocal,label:\"Vocals\"})]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Fetching all Songs....\"}),/*#__PURE__*/_jsx(CircularProgress,{}),/*#__PURE__*/_jsx(\"p\",{children:\"Please do not refresh/leave the page while this is occuring.\"}),\" \"]})}),audioFet?/*#__PURE__*/_jsxs(\"div\",{className:\"content-tabs\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Songs Found: \",tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.length}):0,\" \"]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:filterReq,children:\"Find Songs!\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===1?\"content  active-content\":\"content\",children:tracks?tracks.tracks.length?tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);}):/*#__PURE__*/_jsx(\"p\",{children:\"no songs \"}):/*#__PURE__*/_jsx(\"p\",{children:\"Click the button to find your songs!\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===2?\"content  active-content\":\"content\"}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===3?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Study Songs :/\"})}),/*#__PURE__*/_jsx(\"div\",{className:toggleState===4?\"content  active-content\":\"content\",children:tracks?/*#__PURE__*/_jsx(_Fragment,{children:tracks.tracks.map(function(track,key){return/*#__PURE__*/_jsx(TrackInfo,{track:track,index:tracks.tracks.indexOf(track)},key);})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading Gym Songs >:(\"})})]}):/*#__PURE__*/_jsx(_Fragment,{children:songs?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Fetching Audio Data...\"}),\" \",/*#__PURE__*/_jsx(CircularProgress,{})]}):null})]});};export default Moods;","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","useCallback","spotifyApi","getAccessToken","arraySplice","getplaylists","getAllSongs","getTrackfromPlaylist","Slider","Typography","Switch","CircularProgress","Moods","playlists","setPlaylists","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","tracks","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","length","getTracks","map","x","id","c","fetchData","all_songs","then","response","console","log","index","unique","Set","setItem","stringify","get","all_audio","allSongsSpliced","getAudioFeaturesForTracks","audio_features","audioWithFeat","filter","value","setValue","value1","setValue1","value2","setValue2","vocal","setVocal","handleChange","event","newValue","handleChange1","newValue1","handleChange2","newValue2","handleVocal","filterReq","valence","energy","danceability","filter2","instrumentalness","FilteredSplice","track","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\nimport {\n  arraySplice,\n  getplaylists,\n  getAllSongs,\n  getTrackfromPlaylist\n} from \"../components/UserSongs\";\nimport { Slider, Typography, Switch, CircularProgress } from \"@material-ui/core\";\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n\n\nconst Moods = () => {\n  const [playlists, setPlaylists] = useState(\"all\");\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async (arraysplice) => {\n    var Tracks = { tracks: [] };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n    setTracks(Tracks);\n  };\n\n  // get every songs form every playlist and every saved\n\n  /*const toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};*/\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async (response) => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map((x) => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          }\n\n          // instead of set state maybe import this from home\n          // filter duplicates\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []);\n  //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\t\t  const audioWithFeat = all_audio.filter(x => x); // filter out songs without features\n          setAudioFet(audioWithFeat);\n          window.sessionStorage.setItem(\n            \"audio_features\",\n            JSON.stringify(all_audio)\n          );\n        }\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n      /*\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}*/\n    }\n  }, [mood, audioFet]);\n\n\n  const [value, setValue] = useState(0.5);\n  const [value1, setValue1] = useState(0.5);\n  const [value2, setValue2] = useState(0.5);\n  const [vocal, setVocal] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue/100);\n  };\n  const handleChange1 = (event, newValue1) => {\n    setValue1(newValue1/100);\n  };\n  const handleChange2 = (event, newValue2) => {\n    setValue2(newValue2/100);\n  };\n  const handleVocal = () => {\n    setVocal(!vocal);\n  };\n\n\n\n  const filterReq = useCallback( async () => {\n\tconsole.log(\"mood\", value);\n\tconsole.log(\"energy\", value1);\n\tconsole.log(\"groove\", value2);\n\tconsole.log(\"vocal\", vocal);\n\tconst filter = audioFet.filter((x) => \n\tx.valence >= (value - 0.15) && x.valence <= (value + 0.15) &&\n\tx.energy >= (value1 - 0.15) && x.energy <= (value1 + 0.15) &&\n\tx.danceability >= (value2 - 0.15) && x.danceability <= (value2 + 0.15) \n\t)\n\tvar filter2;\n\tif (vocal) {\n\t\tfilter2 = filter.filter((x) => x.instrumentalness <= 0.4)\n\n\t\tconsole.log(filter2)\n\t} else {\n\t\tfilter2 = filter.filter((x) => x.instrumentalness >= 0.8)\n\t\tconsole.log(filter2)\n\t}\n\n\tconst FilteredSplice = arraySplice(filter2,50)\n\tconsole.log(FilteredSplice)\n\tgetTracksfromList(FilteredSplice)\n\n  })\n  console.log(tracks)\n\n  return (\n    <>\n      <h1>\n        {\" \"}\n        Gather all your songs and find the perfect songs to match your current\n        mood\n      </h1>\n      <h2>Choose source (in development)</h2>\n      <button> Get All Liked Songs</button>\n      <button> Get All Playlists</button>\n      <button> Get Only Your Playlists</button>\n      <button> Get Everything</button>\n      <div>\n        {songs ? ( <div className=\"container\">\n            <h2>\n              Total Songs Discovered: {audioFet ? audioFet.length : <>0</>}\n            </h2>\n\n            <div>\n              <Typography>Mood</Typography>\n\n              <Slider\n                value={value *100}\n                onChange={handleChange}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Energy</Typography>\n\n              <Slider\n                value={value1 *100}\n                onChange={handleChange1}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n            <div>\n              <Typography>Groove</Typography>\n\n              <Slider\n                value={value2 *100}\n                onChange={handleChange2}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={10}\n                marks\n                min={0}\n                max={100}\n                valueLabelDisplay=\"auto\"\n              />\n            </div>\n\t\t\t<div>\n            <Typography>Vocals</Typography>\n            <Switch onChange={handleVocal} label=\"Vocals\" />\n\t\t\t</div>\n\n            {/*\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\n\t\t\t\t</div> \n\t\t\t\t*/}\n        </div>\n        ) : (\n          <>\n            <b>Fetching all Songs....</b>\n            <CircularProgress/>\n            <p>\n              Please do not refresh/leave the page while this is occuring.\n            </p>{\" \"}\n          </>\n        )}\n      </div>\n\n      {audioFet ? (\n        <div className=\"content-tabs\">\n          <p>Songs Found: {tracks ? <>{tracks.tracks.length}</> : 0} </p>\n\n\t\t  <div>\n\t\t\t<button onClick={filterReq}>Find Songs!</button>\n\t\t\t</div>\n          <div\n            className={\n              toggleState === 1 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n    \n              tracks.tracks.length ? (\n                tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))) : (<p>no songs </p>)\n              \n            \n            ) : (\n              <p>Click the button to find your songs!</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 2 ? \"content  active-content\" : \"content\"\n            }\n          >\n          \n          </div>\n          <div\n            className={\n              toggleState === 3 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Study Songs :/</p>\n            )}\n          </div>\n          <div\n            className={\n              toggleState === 4 ? \"content  active-content\" : \"content\"\n            }\n          >\n            {tracks ? (\n              <>\n                {tracks.tracks.map((track, key) => (\n                  <TrackInfo\n                    key={key}\n                    track={track}\n                    index={tracks.tracks.indexOf(track)}\n                  />\n                ))}\n              </>\n            ) : (\n              <p>Loading Gym Songs >:(</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <>{songs ? <><b>Fetching Audio Data...</b> <CircularProgress/></>: null}</>\n      )}\n    </>\n  );\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}