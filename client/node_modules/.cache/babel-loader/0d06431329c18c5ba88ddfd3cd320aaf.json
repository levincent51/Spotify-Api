{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport { arraySplice, getplaylists, getAllSongs } from \"../components/UserSongs\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Moods = () => {\n  _s();\n\n  getAccessToken();\n  const [playlists, setPlaylists] = useState('all');\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n  const getTracksfromList = async arraysplice => {\n    var Tracks = {\n      tracks: []\n    };\n\n    for (var i = 0; i < arraysplice.length; i++) {\n      const c = await spotifyApi.getTracks(arraysplice[i].map(x => x.id));\n      Tracks.tracks = [...Tracks.tracks, ...c.tracks];\n    }\n\n    setTracks(Tracks);\n  }; // get every songs form every playlist and every saved\n\n\n  const toggleTab = (index, moods) => {\n    console.log(audioFet);\n\n    if (moods != mood) {\n      setTracks();\n    }\n\n    setMood(moods);\n    setToggleState(index);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      function fetchData() {\n        var all_songs = [];\n        getplaylists([], 50, 0).then(async response => {\n          console.log(\"Fetching all songs...\");\n\n          for (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n          // filter duplicates\n\n\n          const unique = [...new Set(all_songs)];\n          setAllSongs(unique);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\"audio_features\", JSON.stringify(all_audio));\n        }\n\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n      const audioFetFix = audioFet.filter(x => x); // some songs have no audio features\n\n      console.log(audioFetFix);\n\n      if (mood == \"sad\") {\n        console.log(\":(\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n        console.log(FilteredSplice);\n\n        if (FilteredSplice) {\n          getTracksfromList(FilteredSplice);\n        } else {\n          alert(\"No matches\");\n        } // SET TRACKS IN THIS LOGIC\n\n      } else if (mood == \"happy\") {\n        console.log(\":)\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6), 50);\n\n        if (FilteredSplice) {\n          getTracksfromList(FilteredSplice);\n        } else {\n          alert(\"No matches\");\n        }\n      } else if (mood == \"study\") {\n        console.log(\":/\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\n        if (FilteredSplice) {\n          getTracksfromList(FilteredSplice);\n        } else {\n          alert(\"No matches\");\n        }\n      } else if (mood == \"gym (mad)\") {\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\n        if (FilteredSplice) {\n          getTracksfromList(FilteredSplice);\n        } else {\n          alert(\"No matches\");\n        }\n      }\n    }\n  }, [mood, audioFet]);\n  console.log(tracks); // NOW FILTER EVERYTHING IN AUDIO FEATURES\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n  // AUDIO FEATURES HOOK\n  // neeed recursion of this logic\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", \"Gather all the songs from all your playlists and find the songs that match your current mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Only Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Total Songs Discovered: \", audioFet ? audioFet.length : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"0\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bloc-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 1 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(1, \"sad\"),\n            children: \"Sad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 2 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(2, \"happy\"),\n            children: \"Happy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 3 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(3, \"study\"),\n            children: \"Study\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 4 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(4, \"gym (mad)\"),\n            children: \"Gym >:(\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Fetching all Songs....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please do not refresh/leave the page while this is occuring.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 4\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Songs Found: \", tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.length\n        }, void 0, false) : 0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Sad songs :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Happy Songs :D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Study Songs :/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 4 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track,\n            index: tracks.tracks.indexOf(track)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Gym Songs >:(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Fetching Audio Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 14\n      }, this) : null\n    }, void 0, false)]\n  }, void 0, true)\n  /* {tracks.items.map((track, key) => (\n  \t\t\t<TrackInfo key={key} track={track}*/\n  ;\n};\n\n_s(Moods, \"5A2AbxdeIeJUNgGjTkV4Qmzq8rM=\");\n\n_c = Moods;\nexport default Moods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moods\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","arraySplice","getplaylists","getAllSongs","Moods","playlists","setPlaylists","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","tracks","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","getTracksfromList","arraysplice","Tracks","i","length","c","getTracks","map","x","id","toggleTab","index","moods","console","log","fetchData","all_songs","then","response","unique","Set","setItem","stringify","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","audioFetFix","filter","FilteredSplice","valence","energy","danceability","alert","tempo","speechiness","instrumentalness","acousticness","liveness","track","key","indexOf"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport {arraySplice, getplaylists, getAllSongs} from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\nconst Moods = () => {\n\tgetAccessToken()\n\n\tconst [playlists, setPlaylists] = useState('all')\n\tconst [audioFet, setAudioFet] = useState();\n\tconst [allSongs, setAllSongs] = useState();\n\tconst [toggleState, setToggleState] = useState(1);\n\tconst [mood, setMood] = useState(\"sad\");\n\tconst [songs, setSongs] = useState();\n\n\tconst [tracks, setTracks] = useState();\n\n\tvar audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n\tvar trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n\n\tconst getTracksfromList = async (arraysplice) => {\n\n\t\tvar Tracks = {tracks: []}\n\t\n\t\tfor (var i = 0; i < arraysplice.length; i++) {\n\t\t\tconst c = await spotifyApi.getTracks(arraysplice[i].map((x) => x.id))\n\t\t\tTracks.tracks = [...Tracks.tracks, ...c.tracks]\n\t\t}\n\t\tsetTracks(Tracks)\n\t}\n\n\t// get every songs form every playlist and every saved\n\n\tconst toggleTab = (index, moods) => {\n\t\tconsole.log(audioFet);\n\t\tif (moods != mood) {\n\t\t\tsetTracks();\n\t\t}\n\n\t\tsetMood(moods);\n\t\tsetToggleState(index);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!trackstorage) {\n\t\tfunction fetchData() {\n\t\t\tvar all_songs = [];\n\t\t\tgetplaylists([], 50, 0).then(async (response) => {\n\t\t\tconsole.log(\"Fetching all songs...\");\n\n\t\t\t\tfor (const index of response.map((x) => x.id)) {\n\t\t\t\t\tall_songs = [...all_songs, ...(await getAllSongs(index))];\n\t\t\t\t}\n\n\t\t\t\t// instead of set state maybe import this from home\n\t\t\t\t// filter duplicates\n\t\t\t\tconst unique = [...new Set(all_songs)]\n\t\t\t\tsetAllSongs(unique);\n\t\t\t\twindow.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n\t\t\t});\n\t\t}\n\t\tfetchData();\n\t\t} else {\n\t\tconsole.log(\"Fetching all songs...\");\n\t\tsetAllSongs(trackstorage);\n\t\t}\n\t}, []);\n\t//console.log(allSongs)\n\n\tuseEffect(() => {\n\t\t//console.log(allSongs)\n\t\tif (!audio_feat) {\n\t\t\tif (allSongs) {\n\t\t\t\tvar all_audio = [];\n\n\t\t\t\tconst allSongsSpliced = arraySplice(allSongs, 100);\n\n\t\t\t\tasync function get(all_audio) {\n\t\t\t\t\tfor (const index of allSongsSpliced) {\n\t\t\t\t\t\tconst c = await spotifyApi.getAudioFeaturesForTracks(index);\n\t\t\t\t\t\tall_audio = [...all_audio, ...c.audio_features];\n\t\t\t\t\t}\n\t\t\t\t\tsetAudioFet(all_audio);\n\t\t\t\t\twindow.sessionStorage.setItem(\n\t\t\t\t\t\t\"audio_features\",\n\t\t\t\t\t\tJSON.stringify(all_audio)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tget(all_audio);\n\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\t\tsetAudioFet(audio_feat);\n\t\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (allSongs) {\n\t\tsetSongs(1);\n\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (audioFet) {\n\t\t// TODO ADJUST THE FILTERS\n\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.valence < 0.3 && x.energy < 0.5 && x.danceability < 0.6), 50);\n\t\t\t\tconsole.log(FilteredSplice)\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice( audioFetFix.filter((x) => x.tempo > 110 && x.speechiness < 0.2 && x.energy > 0.6 && x.danceability > 0.6 && x.valence > 0.6),50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) =>  x.speechiness < 0.4 && x.energy < 0.55 && x.instrumentalness > 0.7), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\t\t\t} else if (mood == \"gym (mad)\") {\n\t\t\t\tconst FilteredSplice = arraySplice(audioFetFix.filter((x) => x.tempo > 130 && x.energy > 0.65 && x.acousticness < 0.2 && x.liveness > 0.1), 50);\n\t\t\t\tif (FilteredSplice) {\n\t\t\t\t\tgetTracksfromList(FilteredSplice)\n\t\t\t\t} else {\n\t\t\t\t\talert(\"No matches\")\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t}\n\t}, [mood, audioFet]);\n\tconsole.log(tracks);\n\n\t// NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n\t// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n\t// AUDIO FEATURES HOOK\n\n\t// neeed recursion of this logic\n\n\treturn (\n\t\t<>\n\t\t<h1>\n\t\t\t{\" \"}\n\t\t\tGather all the songs from all your playlists and find the songs that match your current mood\n\t\t</h1>\n\t\t<button> Get All Playlists</button>\n\t\t<button> Get Only Your Playlists</button>\n\t\t<div>\n\t\t\t{songs ? (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h2>Total Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(4, \"gym (mad)\")}\n\t\t\t\t>\n\t\t\t\t\tGym >:(\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t<b>Fetching all Songs....</b>\n\t\t\t<p>Please do not refresh/leave the page while this is occuring.</p> </>\n\t\t\t)}\n\t\t</div>\n\t\t\t\t\n\t\t{audioFet ? (\n\t\t\t\n\t\t\t<div className=\"content-tabs\">\n\t\t\t\t<p>Songs Found: {tracks? <>{tracks.tracks.length}</> : 0} </p>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Sad songs :(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}  index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Happy Songs :D</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Study Songs :/</p>\n\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 4 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} index={tracks.tracks.indexOf(track)} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Loading Gym Songs >:(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<>\n\t\t\t{songs ? (<b>Fetching Audio Data...</b>) : null}\n\t\t\t</>\n\t\t)}\n\t\t</>\n\t\t/* {tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}*/\n\t);\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}