{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\"; // LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getplaylists(playlists, limit, offset) {\n  const newOffset = offset + limit;\n  var newPlaylist = playlists;\n  spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      console.log(response);\n      newPlaylist = [...playlists, ...response.items];\n      console.log(newPlaylist);\n\n      if (response.next) {\n        getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n}\n\nconst Reccommendations = () => {\n  _s();\n\n  const [playlists, setPlaylists] = useState();\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {\n    const play_list = getplaylists([], 50, 0);\n    setPlaylists(play_list);\n  }, []); // neeed recursion of this logic\n\n  console.log(); // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"ld9WpvuNbwB6ZcsUa7ik1I8x+Kc=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/TopArtist.js"],"names":["React","useState","useEffect","spotifyApi","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","console","log","items","next","catch","Reccommendations","setPlaylists","allSongs","setAllSongs","play_list"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,0BAA3C,C,CAGA;;;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC5C,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAW,GAAGJ,SAAlB;AACAH,EAAAA,UAAU,CAACQ,gBAAX,CAA4B;AACxBJ,IAAAA,KAAK,EAAEA,KADiB;AAExBC,IAAAA,MAAM,EAAEA;AAFgB,GAA5B,EAGGI,IAHH,CAGSC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACG,KAA3B,CAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;;AACA,UAAIG,QAAQ,CAACI,IAAb,EAAmB;AACfZ,QAAAA,YAAY,CAACK,WAAD,EAAcH,KAAd,EAAqBE,SAArB,CAAZ;AACH;AACJ;AACJ,GAZD,EAYGS,KAZH,CAYS,MAAM;AACXd,IAAAA,cAAc;AACjB,GAdD;AAeA,SAAOM,WAAP;AACH;;AAED,MAAMS,gBAAgB,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACb,SAAD,EAAYc,YAAZ,IAA4BnB,QAAQ,EAA1C;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,EAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,SAAS,GAAGlB,YAAY,CAAC,EAAD,EAAI,EAAJ,EAAO,CAAP,CAA9B;AACAe,IAAAA,YAAY,CAACG,SAAD,CAAZ;AAED,GAJM,EAIJ,EAJI,CAAT,CAL2B,CAW3B;;AACAT,EAAAA,OAAO,CAACC,GAAR,GAZ2B,CAc3B;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAnBD;;GAAMI,gB;;KAAAA,gB;AAqBN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, getAccessToken } from \"../components/spotifyAPI\";\n\n\n// LOGIC WORKSSS RECURSION\nfunction getplaylists(playlists, limit, offset) {\n    const newOffset = offset + limit\n    var newPlaylist = playlists\n    spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            console.log(response)\n            newPlaylist = [...playlists, ...response.items] ;\n            console.log(newPlaylist)\n            if (response.next) {\n                getplaylists(newPlaylist, limit, newOffset)\n            }\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst Reccommendations = () => {\n\n    const [playlists, setPlaylists] = useState();\n    const [allSongs, setAllSongs] = useState()\n\n    useEffect(() => {\n        const play_list = getplaylists([],50,0)\n        setPlaylists(play_list)\n    \n      }, []);\n    \n    // neeed recursion of this logic\n    console.log()\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}