{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n      /*if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n      } */\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n      /*if (response.next) {\n          newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n      } */\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = async () => {\n  getplaylists([], 4, 0).then(async response => {\n    var all_songs = [];\n    aresponse.map(x => x.id).forEach(res => {\n      getTrackfromPlaylist(res, [], 4, 0).then(async response => {\n        if (response) {\n          all_songs = [...all_songs, ...response.map(x => x.track.id)];\n          console.log(all_songs);\n        }\n      });\n    });\n    console.log(all_songs);\n  });\n};\n\nexport default function UserSongs() {\n  _s();\n\n  const [addSong, setAddSong] = useState();\n  useEffect(() => {\n    setAddSong(getAllSongs);\n  }, []);\n  console.log(addSong);\n  return addSong;\n}\n\n_s(UserSongs, \"FdeBWxrrOX2VSHPrh5WSWG5FkJ0=\");\n\n_c = UserSongs;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSongs\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/components/UserSongs.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getAllSongs","all_songs","aresponse","map","x","id","forEach","res","track","console","log","UserSongs","addSong","setAddSong"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,cAA5B,QAAkD,0BAAlD;;AAIA,MAAMC,YAAY,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoC;AACrD,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIG,WAAJ;AACA,QAAMR,UAAU,CAACS,gBAAX,CAA4B;AAC9BJ,IAAAA,KAAK,EAAEA,KADuB;AAE9BC,IAAAA,MAAM,EAAEA;AAFsB,GAA5B,EAGHI,IAHG,CAGGC,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGO,QAAQ,CAACC,KAA3B,CAAd;AACA;AACZ;AACA;AACS;AACJ,GAVK,EAUHC,KAVG,CAUG,MAAM;AACXX,IAAAA,cAAc;AACjB,GAZK,CAAN;AAaA,SAAOM,WAAP;AACH,CAjBD;;AAmBA,MAAMM,oBAAoB,GAAG,OAAOC,UAAP,EAAmBC,MAAnB,EAA2BX,KAA3B,EAAkCC,MAAlC,KAA6C;AACtE,QAAMC,SAAS,GAAGD,MAAM,GAAGD,KAA3B;AACA,MAAIY,QAAJ;AACA,QAAMjB,UAAU,CAACkB,iBAAX,CACFjB,KADE,EAEFc,UAFE,EAGF;AAACV,IAAAA,KAAK,EAAEA,KAAR;AACAC,IAAAA,MAAM,EAAEA;AADR,GAHE,EAIgBI,IAJhB,CAIsBC,QAAD,IAAc;AACrC,QAAIA,QAAJ,EAAc;AACVM,MAAAA,QAAQ,GAAG,CAAC,GAAGD,MAAJ,EAAY,GAAGL,QAAQ,CAACC,KAAxB,CAAX;AACA;AACZ;AACA;AACS;AACJ,GAXK,CAAN;AAaA,SAAOK,QAAP,CAhBsE,CAgBtD;AACnB,CAjBD;;AAmBA,MAAME,WAAW,GAAG,YAAY;AAC3BhB,EAAAA,YAAY,CAAC,EAAD,EAAI,CAAJ,EAAM,CAAN,CAAZ,CAAqBO,IAArB,CACG,MAAOC,QAAP,IAAoB;AAChB,QAAIS,SAAS,GAAG,EAAhB;AAEAC,IAAAA,SAAS,CAACC,GAAV,CAAcC,CAAC,IAAIA,CAAC,CAACC,EAArB,EAAyBC,OAAzB,CAAmCC,GAAD,IAAS;AACvCZ,MAAAA,oBAAoB,CAACY,GAAD,EAAK,EAAL,EAAQ,CAAR,EAAU,CAAV,CAApB,CAAiChB,IAAjC,CAAuC,MAAOC,QAAP,IAAoB;AACvD,YAAIA,QAAJ,EAAc;AACVS,UAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe,GAAGT,QAAQ,CAACW,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACI,KAAF,CAAQH,EAA1B,CAAlB,CAAZ;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACH;AAEJ,OAND;AAOH,KARD;AASAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACH,GAdJ;AAeJ,CAhBD;;AAiBA,eAAe,SAASU,SAAT,GAAsB;AAAA;;AAEjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBlC,QAAQ,EAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,UAAU,CAACb,WAAD,CAAV;AAEH,GAHQ,EAGN,EAHM,CAAT;AAKAS,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AAEA,SAAOA,OAAP;AACH;;GAZuBD,S;;KAAAA,S","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            /*if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } */\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            /*if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } */\n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\nconst getAllSongs = async () => {\n     getplaylists([],4,0).then(\n        async (response) => {\n            var all_songs = []\n\n            aresponse.map(x => x.id).forEach( (res) => {\n                getTrackfromPlaylist(res,[],4,0).then( async (response) => {\n                    if (response) {\n                        all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                        console.log(all_songs)\n                    }\n                \n                })\n            }) \n            console.log(all_songs)\n        })  \n}\nexport default function UserSongs () {\n\n    const [addSong, setAddSong] = useState()\n\n    useEffect(() => {\n        setAddSong(getAllSongs)\n        \n    }, []);\n\n    console.log(addSong)\n\n    return addSong\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}