{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport TopTracks from \"./TopTracks\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi } from \"../components/spotifyAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  token\n}) {\n  _s();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\n        if (response) {\n          if (response.is_playing) {\n            setIsPlaying(true);\n          } else if (!response.is_playing) {// get current playing\n            // MAYBE CHANGE IT SO THAT ISPLAYING DOESNT stop it completely\n          }\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [isPlaying]); //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"HOME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/TopTracks\",\n            children: \"Top Tracks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/RecentTracks\",\n            children: \"RecentlyPlayed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/logout\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/RecentTracks\",\n          children: /*#__PURE__*/_jsxDEV(RecentTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/logout\",\n          children: /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/TopTracks\",\n          children: /*#__PURE__*/_jsxDEV(TopTracks, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"WELCOME TO SPOTIFY API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Currently Playing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n          token: token,\n          syncExternalDevice: true,\n          syncExternalDeviceInterval: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Not Playing Anything Currently\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n} // ****** NESTED ROUTING\n\n_s(Dashboard, \"BwVY8ih+eQv3Bg1ifNx664wzb54=\");\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Dashboard.js"],"names":["React","Component","useState","useEffect","BrowserRouter","Route","Switch","Link","LogoutButton","TopTracks","RecentTracks","SpotifyPlayer","spotifyApi","Dashboard","token","isPlaying","setIsPlaying","interval","setInterval","getMyCurrentPlaybackState","then","response","is_playing","catch","error","console","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { LogoutButton } from \"../components/functions\";\nimport TopTracks from \"./TopTracks\";\nimport RecentTracks from \"./RecentTracks\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { spotifyApi } from \"../components/spotifyAPI\";\n\nexport default function Dashboard({ token }) {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval( () => {\n\n    spotifyApi.getMyCurrentPlaybackState().then((response) => {\n      if (response) {\n        if (response.is_playing) {\n          setIsPlaying(true);\n        } else if(!response.is_playing) {\n          // get current playing\n          // MAYBE CHANGE IT SO THAT ISPLAYING DOESNT stop it completely\n        }\n      }\n    }).catch((error) => {\n      console.error(error);\n    })\n  }, 2000)\n    return () => clearInterval(interval)\n\n  }, [isPlaying]);\n\n\n\n  //return should return, getTOPTRACKS, make playlist\n  // DashBoard should tell us our favourite genre based on our top artist\n  return (\n    <BrowserRouter>\n      <div /* will make a header bar FOR ALL OUR BROWSER ROUTES*/>\n        <ul>\n          <li>\n            <Link to=\"/\">HOME</Link>\n          </li>\n          <li>\n            <Link to=\"/TopTracks\">Top Tracks</Link>\n          </li>\n          <li>\n            <Link to=\"/RecentTracks\">RecentlyPlayed</Link>\n          </li>\n          <li>\n            <Link to=\"/logout\">Logout</Link>\n          </li>\n        </ul>\n        \n\n        <Switch>\n          <Route path=\"/RecentTracks\">\n            <RecentTracks />\n          </Route>\n          <Route path=\"/logout\">\n            <LogoutButton />\n          </Route>\n          <Route path=\"/TopTracks\">\n            <TopTracks />\n          </Route>\n          <Route path=\"/\">\n            <h1>WELCOME TO SPOTIFY API</h1>\n          </Route>\n        </Switch>\n      {isPlaying ? (\n          <div className='player'>\n          <b>Currently Playing</b>\n          <SpotifyPlayer\n            token={token}\n            syncExternalDevice={true}\n            syncExternalDeviceInterval={3}\n          />\n          </div>\n        ) : (\n          <div className='player'>\n          <b>Not Playing Anything Currently</b>\n          </div>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n// ****** NESTED ROUTING\n"]},"metadata":{},"sourceType":"module"}