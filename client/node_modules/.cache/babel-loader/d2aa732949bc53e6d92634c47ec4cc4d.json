{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n      /*if (response.next) {\n          newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n      } */\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n      /*if (response.next) {\n          newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n      } */\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getSongs = async (response, array) => {\n  await response.map(x => x.id).forEach(res => {\n    getTrackfromPlaylist(res, [], 6, 0).then(response => {\n      if (response) {\n        array = [...array, ...response.map(x => x.track.id)];\n        console.log(array);\n        return array;\n      }\n    });\n  });\n  console.log(1);\n};\n\nconst Reccommendations = () => {\n  _s();\n\n  const [sad, setSad] = useState();\n  const [recco, setRecco] = useState();\n  const [playlists, setPlaylists] = useState([]);\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {\n    getplaylists([], 4, 0).then(response => {\n      var all_songs = [];\n      getSongs(response, all_songs);\n    });\n  }, []);\n  /*\n  useEffect(() => {\n      var all_songs = []\n      playlists.forEach((res) => {\n          getTrackfromPlaylist(res,[],3,0).then( (response) => {\n              if (response) {\n                  all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                  setAllSongs(all_songs)\n              }\n          })\n      })\n   }, [playlists]);*/\n\n  /* var a = YOUR_ARRAY;\n  while(a.length) {\n  console.log(a.splice(0,100));\n  }*/\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n  // AUDIO FEATURES HOOK\n  // Get Audio Features for several tracks max id is 100\n  // getting back our several tracks max id is 50\n  //console.log(playlists.map( x => x.id))\n  // neeed recursion of this logic\n\n  const [toggleState, setToggleState] = useState(1); // get every songs form every playlist and every saved \n\n  const changeTerm = newTimeRange => {};\n\n  const toggleTab = (index, time_range) => {\n    changeTerm(time_range);\n    setToggleState(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allSongs ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bloc-tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: toggleState === 1 ? \"tabs active-tabs\" : \"tabs\",\n          onClick: () => toggleTab(1, \"short_term\"),\n          children: \"Sad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: toggleState === 2 ? \"tabs active-tabs\" : \"tabs\",\n          onClick: () => toggleTab(2, \"medium_term\"),\n          children: \"Happy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: toggleState === 3 ? \"tabs active-tabs\" : \"tabs\",\n          onClick: () => toggleTab(3, \"long_term\"),\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this)\n  /* {tracks.items.map((track, key) => (\n          <TrackInfo key={key} track={track}*/\n  ;\n};\n\n_s(Reccommendations, \"EHy4QW9XDmSGrEjJHD9oGGUmAcw=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getSongs","array","map","x","id","forEach","res","track","console","log","Reccommendations","sad","setSad","recco","setRecco","setPlaylists","allSongs","setAllSongs","all_songs","toggleState","setToggleState","changeTerm","newTimeRange","toggleTab","index","time_range"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            /*if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } */\n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            /*if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } */\n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\nconst getSongs = async (response, array) => {\n    await response.map(x => x.id).forEach((res) => {\n         getTrackfromPlaylist(res,[],6,0).then( (response) => {\n            if (response) {\n                array = [...array, ...response.map(x => x.track.id)] \n                console.log(array)\n                return array\n            }\n        })\n    })\n    console.log(1)\n}\n\n\n\nconst Reccommendations = () => {\n\n    const [sad, setSad] = useState()\n\n    const [recco, setRecco] = useState()\n\n    const [playlists, setPlaylists] = useState([]);\n    const [allSongs, setAllSongs] = useState()\n\n    useEffect(() => {\n        getplaylists([],4,0).then(\n            (response) => {\n                var all_songs = []\n                getSongs(response, all_songs)\n            })  \n    }, []);\n\n    /*\n    useEffect(() => {\n        var all_songs = []\n        playlists.forEach((res) => {\n            getTrackfromPlaylist(res,[],3,0).then( (response) => {\n                if (response) {\n                    all_songs = [...all_songs, ...response.map(x => x.track.id)] \n                    setAllSongs(all_songs)\n                }\n            })\n        })\n\n    }, [playlists]);*/\n\n    /* var a = YOUR_ARRAY;\nwhile(a.length) {\n    console.log(a.splice(0,100));\n\n}*/\n    // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n    \n    // AUDIO FEATURES HOOK\n \n    \n\n\n    // Get Audio Features for several tracks max id is 100\n    // getting back our several tracks max id is 50\n\n    //console.log(playlists.map( x => x.id))\n \n\n\n\n    // neeed recursion of this logic\n\n    const [toggleState, setToggleState] = useState(1);\n    // get every songs form every playlist and every saved \n    \n    const changeTerm = (newTimeRange) => {\n    };\n\n    const toggleTab = (index, time_range) => {\n        changeTerm(time_range);\n        setToggleState(index);\n    };\n\n    return (\n        <div>{allSongs ? (\n            <div className=\"container\">\n            <div className=\"bloc-tabs\">\n              <button\n                className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(1, \"short_term\")}\n              >\n                Sad\n              </button>\n              <button\n                className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(2, \"medium_term\")}\n              >\n                Happy\n              </button>\n              <button\n                className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n                onClick={() => toggleTab(3, \"long_term\")}\n              >\n                Study\n              </button>\n            </div>\n            </div>\n        ) : (<b>loading</b>)}</div>\n        /* {tracks.items.map((track, key) => (\n                <TrackInfo key={key} track={track}*/\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}