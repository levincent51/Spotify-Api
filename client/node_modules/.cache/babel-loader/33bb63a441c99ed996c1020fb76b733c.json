{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js\",\n    _s = $RefreshSig$();\n\nimport TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      console.log(response);\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n\n      if (response.next) {\n        newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset);\n      }\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = res => {\n  const c = getTrackfromPlaylist(res, [], 100, 0).then(response => {\n    if (response) {\n      return response.map(x => x.track.id); //response.map(x => x.track.id)\n    }\n  });\n  return c;\n};\n\nfunction arraySplice(array, size) {\n  var a = array;\n  var spliced = [];\n\n  if (array) {\n    while (a.length) {\n      spliced = [...spliced, a.splice(0, size)];\n    }\n  }\n\n  return spliced;\n}\n\nconst Moods = () => {\n  _s();\n\n  const [audioFet, setAudioFet] = useState();\n  const [allSongs, setAllSongs] = useState();\n  const [toggleState, setToggleState] = useState(1);\n  const [mood, setMood] = useState(\"sad\");\n  const [songs, setSongs] = useState();\n  const [tracks, setTracks] = useState();\n  var audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n  var trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\")); // get every songs form every playlist and every saved\n\n  const toggleTab = (index, mood) => {\n    console.log(audioFet);\n    setTracks();\n    setMood(mood);\n    setToggleState(index);\n  };\n\n  useEffect(() => {\n    if (!trackstorage) {\n      async function fetchData() {\n        var all_songs = [];\n        await getplaylists([], 50, 0).then(async response => {\n          console.log(\"Fetching all songs...\");\n\n          for await (const index of response.map(x => x.id)) {\n            all_songs = [...all_songs, ...(await getAllSongs(index))];\n          } // instead of set state maybe import this from home\n\n\n          setAllSongs(all_songs);\n          window.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n        });\n      }\n\n      fetchData();\n    } else {\n      console.log(\"Fetching all songs...\");\n      setAllSongs(trackstorage);\n    }\n  }, []); //console.log(allSongs)\n\n  useEffect(() => {\n    //console.log(allSongs)\n    if (!audio_feat) {\n      if (allSongs) {\n        var all_audio = [];\n        const allSongsSpliced = arraySplice(allSongs, 100);\n\n        async function get(all_audio) {\n          for (const index of allSongsSpliced) {\n            const c = await spotifyApi.getAudioFeaturesForTracks(index);\n            all_audio = [...all_audio, ...c.audio_features];\n          }\n\n          setAudioFet(all_audio);\n          window.sessionStorage.setItem(\"audio_features\", JSON.stringify(all_audio));\n        }\n\n        console.log(\"Fetching audio data...\");\n        get(all_audio);\n      }\n    } else {\n      console.log(\"Fetching audio data...\");\n      setAudioFet(audio_feat);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (allSongs) {\n      setSongs(1);\n    }\n  }, [allSongs]);\n  useEffect(() => {\n    if (audioFet) {\n      // TODO ADJUST THE FILTERS\n      const audioFetFix = audioFet.filter(x => x); // some songs have no audio features\n\n      console.log(audioFetFix);\n\n      if (mood == \"sad\") {\n        console.log(\":(\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.valence < 0.2), 50);\n        spotifyApi.getTracks(FilteredSplice[0].map(x => x.id)).then(response => {\n          setTracks(response);\n        }); // SET TRACKS IN THIS LOGIC\n      } else if (mood == \"happy\") {\n        console.log(\":)\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.energy > 0.7), 50);\n        spotifyApi.getTracks(FilteredSplice[0].map(x => x.id)).then(response => {\n          setTracks(response);\n        });\n      } else if (mood == \"study\") {\n        console.log(\":/\");\n        const FilteredSplice = arraySplice(audioFetFix.filter(x => x.danceability < 0.2), 50);\n        spotifyApi.getTracks(FilteredSplice[0].map(x => x.id)).then(response => {\n          setTracks(response);\n        });\n      }\n    }\n  }, [mood, audioFet]);\n  console.log(tracks); // NOW FILTER EVERYTHING IN AUDIO FEATURES\n  // get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n  // AUDIO FEATURES HOOK\n  // neeed recursion of this logic\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", \"Gather all the songs from all your playlists and find the songs that match your current mood\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get All Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Get Only Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Songs Discovered: \", audioFet ? audioFet.length : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"0\"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bloc-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 1 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(1, \"sad\"),\n            children: \"Sad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 2 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(2, \"happy\"),\n            children: \"Happy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: toggleState === 3 ? \"tabs active-tabs\" : \"tabs\",\n            onClick: () => toggleTab(3, \"study\"),\n            children: \"Study\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Fetching all Songs....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 3\n    }, this), audioFet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 1 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Sad songs :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 2 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Happy Songs :D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: toggleState === 3 ? \"content  active-content\" : \"content\",\n        children: tracks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: tracks.tracks.map((track, key) => /*#__PURE__*/_jsxDEV(TrackInfo, {\n            track: track\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 6\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Study Songs :/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Fetching Audio Data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true)\n  /* {tracks.items.map((track, key) => (\n  \t\t\t<TrackInfo key={key} track={track}*/\n  ;\n};\n\n_s(Moods, \"B/JBk5uNgdcxPQ5FbnfqNph1Fxo=\");\n\n_c = Moods;\nexport default Moods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Moods\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Moods.js"],"names":["TrackInfo","React","useState","useEffect","spotifyApi","token","getAccessToken","fetchData","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","console","log","items","next","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","getAllSongs","res","c","map","x","track","id","arraySplice","array","size","a","spliced","length","splice","Moods","audioFet","setAudioFet","allSongs","setAllSongs","toggleState","setToggleState","mood","setMood","songs","setSongs","setTracks","audio_feat","JSON","parse","window","sessionStorage","getItem","trackstorage","toggleTab","index","all_songs","setItem","stringify","all_audio","allSongsSpliced","get","getAudioFeaturesForTracks","audio_features","audioFetFix","filter","FilteredSplice","valence","getTracks","energy","danceability","key"],"mappings":"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","sourcesContent":["import TrackInfo from \"../components/TrackInfo\";\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\nimport fetchData from \"../components/UserSongs\";\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (Â±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newPlaylist;\n\tawait spotifyApi\n\t.getUserPlaylists({\n\t\tlimit: limit,\n\t\toffset: offset,\n\t\t})\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tconsole.log(response)\n\t\t\tnewPlaylist = [...playlists, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewPlaylist = getplaylists(newPlaylist, limit, newOffset);\n\t\t\t}\n\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\tgetAccessToken();\n\t});\n\treturn newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n\tconst newOffset = offset + limit;\n\tvar newTrack;\n\tawait spotifyApi\n\t\t.getPlaylistTracks(token, playlistId, { limit: limit, offset: offset })\n\t\t.then((response) => {\n\t\tif (response) {\n\t\t\tnewTrack = [...tracks, ...response.items];\n\t\t\tif (response.next) {\n\t\t\tnewTrack = getTrackfromPlaylist(\n\t\t\t\tplaylistId,\n\t\t\t\tnewTrack,\n\t\t\t\tlimit,\n\t\t\t\tnewOffset\n\t\t\t);\n\t\t\t}\n\t\t}\n\t\t});\n\n\treturn newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconst getAllSongs = (res) => {\n\tconst c = getTrackfromPlaylist(res, [], 100, 0).then((response) => {\n\t\tif (response) {\n\t\treturn response.map((x) => x.track.id);\n\t\t//response.map(x => x.track.id)\n\t\t}\n\t});\n\n\treturn c;\n};\n\nfunction arraySplice(array, size) {\n\tvar a = array;\n\tvar spliced = [];\n\tif (array) {\n\t\twhile (a.length) {\n\t\tspliced = [...spliced, a.splice(0, size)];\n\t\t}\n\t}\n\treturn spliced;\n\t}\n\nconst Moods = () => {\n\tconst [audioFet, setAudioFet] = useState();\n\tconst [allSongs, setAllSongs] = useState();\n\tconst [toggleState, setToggleState] = useState(1);\n\tconst [mood, setMood] = useState(\"sad\");\n\tconst [songs, setSongs] = useState();\n\n\tconst [tracks, setTracks] = useState();\n\n\tvar audio_feat = JSON.parse(window.sessionStorage.getItem(\"audio_features\"));\n\tvar trackstorage = JSON.parse(window.sessionStorage.getItem(\"tracks\"));\n\n\t// get every songs form every playlist and every saved\n\n\tconst toggleTab = (index, mood) => {\n\t\tconsole.log(audioFet);\n\t\tsetTracks();\n\t\tsetMood(mood);\n\t\tsetToggleState(index);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!trackstorage) {\n\t\tasync function fetchData() {\n\t\t\tvar all_songs = [];\n\t\t\tawait getplaylists([], 50, 0).then(async (response) => {\n\t\t\tconsole.log(\"Fetching all songs...\");\n\n\t\t\tfor await (const index of response.map((x) => x.id)) {\n\t\t\t\tall_songs = [...all_songs, ...(await getAllSongs(index))];\n\t\t\t}\n\n\t\t\t// instead of set state maybe import this from home\n\t\t\tsetAllSongs(all_songs);\n\t\t\twindow.sessionStorage.setItem(\"tracks\", JSON.stringify(all_songs));\n\t\t\t});\n\t\t}\n\t\tfetchData();\n\t\t} else {\n\t\tconsole.log(\"Fetching all songs...\");\n\t\tsetAllSongs(trackstorage);\n\t\t}\n\t}, []);\n\t//console.log(allSongs)\n\n\tuseEffect(() => {\n\t\t//console.log(allSongs)\n\t\tif (!audio_feat) {\n\t\tif (allSongs) {\n\t\t\tvar all_audio = [];\n\n\t\t\tconst allSongsSpliced = arraySplice(allSongs, 100);\n\n\t\t\tasync function get(all_audio) {\n\t\t\tfor (const index of allSongsSpliced) {\n\t\t\t\tconst c = await spotifyApi.getAudioFeaturesForTracks(index);\n\t\t\t\tall_audio = [...all_audio, ...c.audio_features];\n\t\t\t}\n\t\t\tsetAudioFet(all_audio);\n\t\t\twindow.sessionStorage.setItem(\n\t\t\t\t\"audio_features\",\n\t\t\t\tJSON.stringify(all_audio)\n\t\t\t);\n\t\t\t}\n\t\t\tconsole.log(\"Fetching audio data...\");\n\t\t\tget(all_audio);\n\t\t}\n\t\t} else {\n\t\tconsole.log(\"Fetching audio data...\");\n\t\tsetAudioFet(audio_feat);\n\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (allSongs) {\n\t\tsetSongs(1);\n\t\t}\n\t}, [allSongs]);\n\n\tuseEffect(() => {\n\t\tif (audioFet) {\n\t\t// TODO ADJUST THE FILTERS\n\n\t\t\tconst audioFetFix = audioFet.filter((x) => x); // some songs have no audio features\n\t\t\tconsole.log(audioFetFix);\n\t\t\tif (mood == \"sad\") {\n\t\t\t\tconsole.log(\":(\");\n\t\t\t\tconst FilteredSplice = arraySplice(\n\t\t\t\taudioFetFix.filter((x) => x.valence < 0.2),\n\t\t\t\t50\n\t\t\t\t);\n\t\t\t\tspotifyApi\n\t\t\t\t.getTracks(FilteredSplice[0].map((x) => x.id))\n\t\t\t\t.then((response) => {\n\t\t\t\t\tsetTracks(response);\n\t\t\t\t});\n\n\t\t\t\t// SET TRACKS IN THIS LOGIC\n\t\t\t} else if (mood == \"happy\") {\n\t\t\t\tconsole.log(\":)\");\n\t\t\t\tconst FilteredSplice = arraySplice(\n\t\t\t\taudioFetFix.filter((x) => x.energy > 0.7),\n\t\t\t\t50\n\t\t\t\t);\n\t\t\t\tspotifyApi\n\t\t\t\t.getTracks(FilteredSplice[0].map((x) => x.id))\n\t\t\t\t.then((response) => {\n\t\t\t\t\tsetTracks(response);\n\t\t\t\t});\n\t\t\t} else if (mood == \"study\") {\n\t\t\t\tconsole.log(\":/\");\n\t\t\t\tconst FilteredSplice = arraySplice(\n\t\t\t\taudioFetFix.filter((x) => x.danceability < 0.2),\n\t\t\t\t50\n\t\t\t\t);\n\t\t\t\tspotifyApi\n\t\t\t\t.getTracks(FilteredSplice[0].map((x) => x.id))\n\t\t\t\t.then((response) => {\n\t\t\t\t\tsetTracks(response);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [mood, audioFet]);\n\tconsole.log(tracks);\n\n\t// NOW FILTER EVERYTHING IN AUDIO FEATURES\n\n\t// get audio features of everything, then we find songs less than 30 valence and 50energy, and display top 20\n\n\t// AUDIO FEATURES HOOK\n\n\t// neeed recursion of this logic\n\n\treturn (\n\t\t<>\n\t\t<h1>\n\t\t\t{\" \"}\n\t\t\tGather all the songs from all your playlists and find the songs that match your current mood\n\t\t</h1>\n\t\t<button> Get All Playlists</button>\n\t\t<button> Get Only Your Playlists</button>\n\t\t<div>\n\t\t\t{songs ? (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h2>Songs Discovered: {audioFet ? audioFet.length : <>0</>}</h2>\n\t\t\t\t<div className=\"bloc-tabs\">\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(1, \"sad\")}\n\t\t\t\t>\n\t\t\t\t\tSad\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(2, \"happy\")}\n\t\t\t\t>\n\t\t\t\t\tHappy\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n\t\t\t\t\tonClick={() => toggleTab(3, \"study\")}\n\t\t\t\t>\n\t\t\t\t\tStudy\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : (\n\t\t\t<b>Fetching all Songs....</b>\n\t\t\t)}\n\t\t</div>\n\n\t\t{audioFet ? (\n\t\t\t<div className=\"content-tabs\">\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 1 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Sad songs :(</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 2 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Happy Songs :D</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\ttoggleState === 3 ? \"content  active-content\" : \"content\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{tracks ? (\n\t\t\t\t<>\n\t\t\t\t\t{tracks.tracks.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t<p>Loading Study Songs :/</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<b>Fetching Audio Data...</b>\n\t\t)}\n\t\t</>\n\t\t/* {tracks.items.map((track, key) => (\n\t\t\t\t\t<TrackInfo key={key} track={track}*/\n\t);\n};\n\nexport default Moods;\n"]},"metadata":{},"sourceType":"module"}