{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\"; // CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n// LOGIC WORKSSS RECURSION\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getplaylists = async (playlists, limit, offset) => {\n  const newOffset = offset + limit;\n  var newPlaylist;\n  await spotifyApi.getUserPlaylists({\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newPlaylist = [...playlists, ...response.items];\n\n      if (response.next) {\n        newPlaylist = getplaylists(newPlaylist, limit, newOffset);\n      }\n    }\n  }).catch(() => {\n    getAccessToken();\n  });\n  return newPlaylist;\n};\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n  const newOffset = offset + limit;\n  var newTrack;\n  await spotifyApi.getPlaylistTracks(token, playlistId, {\n    limit: limit,\n    offset: offset\n  }).then(response => {\n    if (response) {\n      newTrack = [...tracks, ...response.items];\n\n      if (response.next) {\n        newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset);\n      }\n    }\n  });\n  return newTrack; // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n};\n\nconsole.log(getTrackfromPlaylist(\"6mSPlgg3X9RguFcpnZZDIw\", [], 100, 0));\nconsole.log(spotifyApi.getMySavedTracks({\n  limit: 50\n}));\n\nconst Reccommendations = () => {\n  _s();\n\n  const [mood, setMood] = useState('sad');\n  const [playlists, setPlaylists] = useState([]);\n  const [allSongs, setAllSongs] = useState();\n  useEffect(() => {\n    getplaylists([], 50, 0).then(response => {\n      setPlaylists(response.map(x => x.id));\n    });\n  }, []);\n  useEffect(() => {\n    playlists.forEach(res => {\n      console.log(res);\n    });\n  }, [playlists]); //console.log(playlists.map( x => x.id))\n  // neeed recursion of this logic\n  // get every songs form every playlist and every saved \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reccommendations, \"628/RWgNrCT7oCvbyJLk/xbolII=\");\n\n_c = Reccommendations;\nexport default Reccommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reccommendations\");","map":{"version":3,"sources":["/Users/macuser/project/spotify-api-project/client/src/Pages/Reccomendations.js"],"names":["React","useState","useEffect","spotifyApi","token","getAccessToken","getplaylists","playlists","limit","offset","newOffset","newPlaylist","getUserPlaylists","then","response","items","next","catch","getTrackfromPlaylist","playlistId","tracks","newTrack","getPlaylistTracks","console","log","getMySavedTracks","Reccommendations","mood","setMood","setPlaylists","allSongs","setAllSongs","map","x","id","forEach","res"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { spotifyApi, token, getAccessToken } from \"../components/spotifyAPI\";\n\n\n// CHOOSE YOUR MOODS: SAD, GYM, GROOVY(DANCE), HAPPY, STUDY, chill glad\n// GET AUDIOFEATURES OF SEVERAL TRACKS\n// GET ALL TRACKS FROM PLAYLIST, THEN ALL TRACJKS FROM SAVED\n\n\n// Find the best songs to fit your mood from your playlists:\n// sad songs: energy : less than 0.5 happy songs have more energy and dancibility VALENCE HIGH HAPPY LOW SAD\n// study songs have high instrumentals low speechiness\n\n/*\nDanceability: The degree of how suitable a track is for dancing based on tempo, rhythm stability, beat strength, and overall regularity. (0~1)\nEnergy: The perceptual measure of intensity based on dynamic range, perceived loudness, timbre, onset rate, and general entropy. (0~1)\nKey: The estimated overall pitch class of the track and its type of scale from which its melodic content is derived.\nLoudness: The quality of a sound that is the primary psychological correlate of amplitude in decibel. (-60~0)\nSpeechiness: The presence of spoken words in a track. (0~1)\nAcousticness: The confidence measure whether the track is acoustic. (0~1)\nLiveness: The presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. (0~1)\nValence: The musical positiveness conveyed by a track (e.g. happy, cheerful, euphoric). (0~1)\nTempo: The overall estimated tempo of a track in beats per minute (BPM). (±50~200)*/\n\n// LOGIC WORKSSS RECURSION\nconst getplaylists = async (playlists, limit, offset) => {\n    const newOffset = offset + limit\n    var newPlaylist\n    await spotifyApi.getUserPlaylists({\n        limit: limit,\n        offset: offset,\n    }).then((response) => {\n        if (response) {\n            newPlaylist = [...playlists, ...response.items] ;\n            if (response.next) {\n                newPlaylist = getplaylists(newPlaylist, limit, newOffset)\n            } \n        }\n    }).catch(() => {\n        getAccessToken()\n    })\n    return newPlaylist\n}\n\nconst getTrackfromPlaylist = async (playlistId, tracks, limit, offset) => {\n    const newOffset = offset + limit\n    var newTrack\n    await spotifyApi.getPlaylistTracks(\n        token,\n        playlistId,\n        {limit: limit,\n        offset: offset,}).then((response) => {\n        if (response) {\n            newTrack = [...tracks, ...response.items] ;\n            if (response.next) {\n                newTrack = getTrackfromPlaylist(playlistId, newTrack, limit, newOffset)\n            } \n        }\n    })\n\n    return newTrack // AFTER THIS ARRAY.JOIN THEM ALL TO GET ALL THE track IDS WE NEED\n}\n\nconsole.log(getTrackfromPlaylist(\"6mSPlgg3X9RguFcpnZZDIw\", [], 100, 0))\n\nconsole.log(spotifyApi.getMySavedTracks({\n    limit:50,\n}))\n\n\n\nconst Reccommendations = () => {\n\n    const [mood, setMood] = useState('sad')\n\n    const [playlists, setPlaylists] = useState([]);\n    const [allSongs, setAllSongs] = useState()\n\n\n    useEffect(() => {\n        getplaylists([],50,0).then(\n            (response) => {\n                setPlaylists(response.map(x => x.id))\n            }\n        )  \n\n    }, []);\n\n    useEffect(() => {\n        playlists.forEach((res) => {\n            console.log(res)\n        })\n    }, [playlists]);\n\n\n    //console.log(playlists.map( x => x.id))\n \n\n\n\n    // neeed recursion of this logic\n\n\n    // get every songs form every playlist and every saved \n\n    return (\n        <div></div>\n    )\n}\n\nexport default Reccommendations"]},"metadata":{},"sourceType":"module"}